// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genProto/Dotw_ProtoBuf.proto

#ifndef PROTOBUF_genProto_2fDotw_5fProtoBuf_2eproto__INCLUDED
#define PROTOBUF_genProto_2fDotw_5fProtoBuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_genProto_2fDotw_5fProtoBuf_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[27];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPSFRequest_RoomOccupancyImpl();
void InitDefaultsPSFRequest_RoomOccupancy();
void InitDefaultsPSFRequest_HotelFiltersImpl();
void InitDefaultsPSFRequest_HotelFilters();
void InitDefaultsPSFRequest_RoomTypeFilters_RoomCategoryImpl();
void InitDefaultsPSFRequest_RoomTypeFilters_RoomCategory();
void InitDefaultsPSFRequest_RoomTypeFiltersImpl();
void InitDefaultsPSFRequest_RoomTypeFilters();
void InitDefaultsPSFRequest_AdditionalFiltersImpl();
void InitDefaultsPSFRequest_AdditionalFilters();
void InitDefaultsPSFRequest_SearchPeriodCriteriaImpl();
void InitDefaultsPSFRequest_SearchPeriodCriteria();
void InitDefaultsPSFRequestImpl();
void InitDefaultsPSFRequest();
void InitDefaultsPSFReply_RoomDataImpl();
void InitDefaultsPSFReply_RoomData();
void InitDefaultsPSFReply_HotelCodeImpl();
void InitDefaultsPSFReply_HotelCode();
void InitDefaultsPSFReply_BookingChannelCodeImpl();
void InitDefaultsPSFReply_BookingChannelCode();
void InitDefaultsPSFReply_RoomIndexImpl();
void InitDefaultsPSFReply_RoomIndex();
void InitDefaultsPSFReplyImpl();
void InitDefaultsPSFReply();
void InitDefaultsHDRequest_HotelIdsImpl();
void InitDefaultsHDRequest_HotelIds();
void InitDefaultsHDRequest_ReturnHotelStaticDataImpl();
void InitDefaultsHDRequest_ReturnHotelStaticData();
void InitDefaultsHDRequest_ReturnRoomTypeStaticDataImpl();
void InitDefaultsHDRequest_ReturnRoomTypeStaticData();
void InitDefaultsHDRequest_ReturnRateDataImpl();
void InitDefaultsHDRequest_ReturnRateData();
void InitDefaultsHDRequestImpl();
void InitDefaultsHDRequest();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNameImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomName();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNamesImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNames();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomNameImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomInfoImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomInfo();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomCategoryImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomCategory();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticDataImpl();
void InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData();
void InitDefaultsHDReply_HotelStaticData_ImagesDataImpl();
void InitDefaultsHDReply_HotelStaticData_ImagesData();
void InitDefaultsHDReply_HotelStaticData_TransportationDataImpl();
void InitDefaultsHDReply_HotelStaticData_TransportationData();
void InitDefaultsHDReply_HotelStaticDataImpl();
void InitDefaultsHDReply_HotelStaticData();
void InitDefaultsHDReplyImpl();
void InitDefaultsHDReply();
inline void InitDefaults() {
  InitDefaultsPSFRequest_RoomOccupancy();
  InitDefaultsPSFRequest_HotelFilters();
  InitDefaultsPSFRequest_RoomTypeFilters_RoomCategory();
  InitDefaultsPSFRequest_RoomTypeFilters();
  InitDefaultsPSFRequest_AdditionalFilters();
  InitDefaultsPSFRequest_SearchPeriodCriteria();
  InitDefaultsPSFRequest();
  InitDefaultsPSFReply_RoomData();
  InitDefaultsPSFReply_HotelCode();
  InitDefaultsPSFReply_BookingChannelCode();
  InitDefaultsPSFReply_RoomIndex();
  InitDefaultsPSFReply();
  InitDefaultsHDRequest_HotelIds();
  InitDefaultsHDRequest_ReturnHotelStaticData();
  InitDefaultsHDRequest_ReturnRoomTypeStaticData();
  InitDefaultsHDRequest_ReturnRateData();
  InitDefaultsHDRequest();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomName();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNames();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomInfo();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomCategory();
  InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData();
  InitDefaultsHDReply_HotelStaticData_ImagesData();
  InitDefaultsHDReply_HotelStaticData_TransportationData();
  InitDefaultsHDReply_HotelStaticData();
  InitDefaultsHDReply();
}
}  // namespace protobuf_genProto_2fDotw_5fProtoBuf_2eproto
namespace protobuffer {
namespace dotwproto {
class HDReply;
class HDReplyDefaultTypeInternal;
extern HDReplyDefaultTypeInternal _HDReply_default_instance_;
class HDReply_HotelStaticData;
class HDReply_HotelStaticDataDefaultTypeInternal;
extern HDReply_HotelStaticDataDefaultTypeInternal _HDReply_HotelStaticData_default_instance_;
class HDReply_HotelStaticData_ImagesData;
class HDReply_HotelStaticData_ImagesDataDefaultTypeInternal;
extern HDReply_HotelStaticData_ImagesDataDefaultTypeInternal _HDReply_HotelStaticData_ImagesData_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData;
class HDReply_HotelStaticData_RoomTypeStaticDataDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticDataDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomCategoryDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticData_RoomCategoryDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomInfoDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticData_RoomInfoDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomName;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomNameDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticData_RoomNameDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_RoomName_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomNames;
class HDReply_HotelStaticData_RoomTypeStaticData_RoomNamesDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticData_RoomNamesDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_RoomNames_default_instance_;
class HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName;
class HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomNameDefaultTypeInternal;
extern HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomNameDefaultTypeInternal _HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName_default_instance_;
class HDReply_HotelStaticData_TransportationData;
class HDReply_HotelStaticData_TransportationDataDefaultTypeInternal;
extern HDReply_HotelStaticData_TransportationDataDefaultTypeInternal _HDReply_HotelStaticData_TransportationData_default_instance_;
class HDRequest;
class HDRequestDefaultTypeInternal;
extern HDRequestDefaultTypeInternal _HDRequest_default_instance_;
class HDRequest_HotelIds;
class HDRequest_HotelIdsDefaultTypeInternal;
extern HDRequest_HotelIdsDefaultTypeInternal _HDRequest_HotelIds_default_instance_;
class HDRequest_ReturnHotelStaticData;
class HDRequest_ReturnHotelStaticDataDefaultTypeInternal;
extern HDRequest_ReturnHotelStaticDataDefaultTypeInternal _HDRequest_ReturnHotelStaticData_default_instance_;
class HDRequest_ReturnRateData;
class HDRequest_ReturnRateDataDefaultTypeInternal;
extern HDRequest_ReturnRateDataDefaultTypeInternal _HDRequest_ReturnRateData_default_instance_;
class HDRequest_ReturnRoomTypeStaticData;
class HDRequest_ReturnRoomTypeStaticDataDefaultTypeInternal;
extern HDRequest_ReturnRoomTypeStaticDataDefaultTypeInternal _HDRequest_ReturnRoomTypeStaticData_default_instance_;
class PSFReply;
class PSFReplyDefaultTypeInternal;
extern PSFReplyDefaultTypeInternal _PSFReply_default_instance_;
class PSFReply_BookingChannelCode;
class PSFReply_BookingChannelCodeDefaultTypeInternal;
extern PSFReply_BookingChannelCodeDefaultTypeInternal _PSFReply_BookingChannelCode_default_instance_;
class PSFReply_HotelCode;
class PSFReply_HotelCodeDefaultTypeInternal;
extern PSFReply_HotelCodeDefaultTypeInternal _PSFReply_HotelCode_default_instance_;
class PSFReply_RoomData;
class PSFReply_RoomDataDefaultTypeInternal;
extern PSFReply_RoomDataDefaultTypeInternal _PSFReply_RoomData_default_instance_;
class PSFReply_RoomIndex;
class PSFReply_RoomIndexDefaultTypeInternal;
extern PSFReply_RoomIndexDefaultTypeInternal _PSFReply_RoomIndex_default_instance_;
class PSFRequest;
class PSFRequestDefaultTypeInternal;
extern PSFRequestDefaultTypeInternal _PSFRequest_default_instance_;
class PSFRequest_AdditionalFilters;
class PSFRequest_AdditionalFiltersDefaultTypeInternal;
extern PSFRequest_AdditionalFiltersDefaultTypeInternal _PSFRequest_AdditionalFilters_default_instance_;
class PSFRequest_HotelFilters;
class PSFRequest_HotelFiltersDefaultTypeInternal;
extern PSFRequest_HotelFiltersDefaultTypeInternal _PSFRequest_HotelFilters_default_instance_;
class PSFRequest_RoomOccupancy;
class PSFRequest_RoomOccupancyDefaultTypeInternal;
extern PSFRequest_RoomOccupancyDefaultTypeInternal _PSFRequest_RoomOccupancy_default_instance_;
class PSFRequest_RoomTypeFilters;
class PSFRequest_RoomTypeFiltersDefaultTypeInternal;
extern PSFRequest_RoomTypeFiltersDefaultTypeInternal _PSFRequest_RoomTypeFilters_default_instance_;
class PSFRequest_RoomTypeFilters_RoomCategory;
class PSFRequest_RoomTypeFilters_RoomCategoryDefaultTypeInternal;
extern PSFRequest_RoomTypeFilters_RoomCategoryDefaultTypeInternal _PSFRequest_RoomTypeFilters_RoomCategory_default_instance_;
class PSFRequest_SearchPeriodCriteria;
class PSFRequest_SearchPeriodCriteriaDefaultTypeInternal;
extern PSFRequest_SearchPeriodCriteriaDefaultTypeInternal _PSFRequest_SearchPeriodCriteria_default_instance_;
}  // namespace dotwproto
}  // namespace protobuffer
namespace protobuffer {
namespace dotwproto {

// ===================================================================

class PSFRequest_RoomOccupancy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.RoomOccupancy) */ {
 public:
  PSFRequest_RoomOccupancy();
  virtual ~PSFRequest_RoomOccupancy();

  PSFRequest_RoomOccupancy(const PSFRequest_RoomOccupancy& from);

  inline PSFRequest_RoomOccupancy& operator=(const PSFRequest_RoomOccupancy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_RoomOccupancy(PSFRequest_RoomOccupancy&& from) noexcept
    : PSFRequest_RoomOccupancy() {
    *this = ::std::move(from);
  }

  inline PSFRequest_RoomOccupancy& operator=(PSFRequest_RoomOccupancy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_RoomOccupancy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_RoomOccupancy* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_RoomOccupancy*>(
               &_PSFRequest_RoomOccupancy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PSFRequest_RoomOccupancy* other);
  friend void swap(PSFRequest_RoomOccupancy& a, PSFRequest_RoomOccupancy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_RoomOccupancy* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_RoomOccupancy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_RoomOccupancy& from);
  void MergeFrom(const PSFRequest_RoomOccupancy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_RoomOccupancy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  ::google::protobuf::int32 children(int index) const;
  void set_children(int index, ::google::protobuf::int32 value);
  void add_children(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      children() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_children();

  // int32 adults = 1;
  void clear_adults();
  static const int kAdultsFieldNumber = 1;
  ::google::protobuf::int32 adults() const;
  void set_adults(::google::protobuf::int32 value);

  // bool twin = 3;
  void clear_twin();
  static const int kTwinFieldNumber = 3;
  bool twin() const;
  void set_twin(bool value);

  // bool extraBed = 4;
  void clear_extrabed();
  static const int kExtraBedFieldNumber = 4;
  bool extrabed() const;
  void set_extrabed(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.RoomOccupancy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > children_;
  mutable int _children_cached_byte_size_;
  ::google::protobuf::int32 adults_;
  bool twin_;
  bool extrabed_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_RoomOccupancyImpl();
};
// -------------------------------------------------------------------

class PSFRequest_HotelFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.HotelFilters) */ {
 public:
  PSFRequest_HotelFilters();
  virtual ~PSFRequest_HotelFilters();

  PSFRequest_HotelFilters(const PSFRequest_HotelFilters& from);

  inline PSFRequest_HotelFilters& operator=(const PSFRequest_HotelFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_HotelFilters(PSFRequest_HotelFilters&& from) noexcept
    : PSFRequest_HotelFilters() {
    *this = ::std::move(from);
  }

  inline PSFRequest_HotelFilters& operator=(PSFRequest_HotelFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_HotelFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_HotelFilters* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_HotelFilters*>(
               &_PSFRequest_HotelFilters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PSFRequest_HotelFilters* other);
  friend void swap(PSFRequest_HotelFilters& a, PSFRequest_HotelFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_HotelFilters* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_HotelFilters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_HotelFilters& from);
  void MergeFrom(const PSFRequest_HotelFilters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_HotelFilters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 rating = 1;
  int rating_size() const;
  void clear_rating();
  static const int kRatingFieldNumber = 1;
  ::google::protobuf::int32 rating(int index) const;
  void set_rating(int index, ::google::protobuf::int32 value);
  void add_rating(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rating() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rating();

  // repeated int32 locationId = 4;
  int locationid_size() const;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 4;
  ::google::protobuf::int32 locationid(int index) const;
  void set_locationid(int index, ::google::protobuf::int32 value);
  void add_locationid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      locationid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_locationid();

  // repeated int32 amenitie = 5;
  int amenitie_size() const;
  void clear_amenitie();
  static const int kAmenitieFieldNumber = 5;
  ::google::protobuf::int32 amenitie(int index) const;
  void set_amenitie(int index, ::google::protobuf::int32 value);
  void add_amenitie(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      amenitie() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_amenitie();

  // repeated int32 leisure = 6;
  int leisure_size() const;
  void clear_leisure();
  static const int kLeisureFieldNumber = 6;
  ::google::protobuf::int32 leisure(int index) const;
  void set_leisure(int index, ::google::protobuf::int32 value);
  void add_leisure(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      leisure() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_leisure();

  // repeated int32 business = 7;
  int business_size() const;
  void clear_business();
  static const int kBusinessFieldNumber = 7;
  ::google::protobuf::int32 business(int index) const;
  void set_business(int index, ::google::protobuf::int32 value);
  void add_business(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      business() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_business();

  // repeated int32 hotelPreference = 8;
  int hotelpreference_size() const;
  void clear_hotelpreference();
  static const int kHotelPreferenceFieldNumber = 8;
  ::google::protobuf::int32 hotelpreference(int index) const;
  void set_hotelpreference(int index, ::google::protobuf::int32 value);
  void add_hotelpreference(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hotelpreference() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hotelpreference();

  // repeated int32 chain = 9;
  int chain_size() const;
  void clear_chain();
  static const int kChainFieldNumber = 9;
  ::google::protobuf::int32 chain(int index) const;
  void set_chain(int index, ::google::protobuf::int32 value);
  void add_chain(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      chain() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_chain();

  // string location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string attraction = 10;
  void clear_attraction();
  static const int kAttractionFieldNumber = 10;
  const ::std::string& attraction() const;
  void set_attraction(const ::std::string& value);
  #if LANG_CXX11
  void set_attraction(::std::string&& value);
  #endif
  void set_attraction(const char* value);
  void set_attraction(const char* value, size_t size);
  ::std::string* mutable_attraction();
  ::std::string* release_attraction();
  void set_allocated_attraction(::std::string* attraction);

  // string hotelName = 11;
  void clear_hotelname();
  static const int kHotelNameFieldNumber = 11;
  const ::std::string& hotelname() const;
  void set_hotelname(const ::std::string& value);
  #if LANG_CXX11
  void set_hotelname(::std::string&& value);
  #endif
  void set_hotelname(const char* value);
  void set_hotelname(const char* value, size_t size);
  ::std::string* mutable_hotelname();
  ::std::string* release_hotelname();
  void set_allocated_hotelname(::std::string* hotelname);

  // string lastUpdated = 17;
  void clear_lastupdated();
  static const int kLastUpdatedFieldNumber = 17;
  const ::std::string& lastupdated() const;
  void set_lastupdated(const ::std::string& value);
  #if LANG_CXX11
  void set_lastupdated(::std::string&& value);
  #endif
  void set_lastupdated(const char* value);
  void set_lastupdated(const char* value, size_t size);
  ::std::string* mutable_lastupdated();
  ::std::string* release_lastupdated();
  void set_allocated_lastupdated(::std::string* lastupdated);

  // int32 luxury = 2;
  void clear_luxury();
  static const int kLuxuryFieldNumber = 2;
  ::google::protobuf::int32 luxury() const;
  void set_luxury(::google::protobuf::int32 value);

  // int32 builtYear = 12;
  void clear_builtyear();
  static const int kBuiltYearFieldNumber = 12;
  ::google::protobuf::int32 builtyear() const;
  void set_builtyear(::google::protobuf::int32 value);

  // int32 renovationYear = 13;
  void clear_renovationyear();
  static const int kRenovationYearFieldNumber = 13;
  ::google::protobuf::int32 renovationyear() const;
  void set_renovationyear(::google::protobuf::int32 value);

  // int32 floors = 14;
  void clear_floors();
  static const int kFloorsFieldNumber = 14;
  ::google::protobuf::int32 floors() const;
  void set_floors(::google::protobuf::int32 value);

  // int32 noOfRooms = 15;
  void clear_noofrooms();
  static const int kNoOfRoomsFieldNumber = 15;
  ::google::protobuf::int32 noofrooms() const;
  void set_noofrooms(::google::protobuf::int32 value);

  // int32 fireSafety = 16;
  void clear_firesafety();
  static const int kFireSafetyFieldNumber = 16;
  ::google::protobuf::int32 firesafety() const;
  void set_firesafety(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.HotelFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rating_;
  mutable int _rating_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > locationid_;
  mutable int _locationid_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > amenitie_;
  mutable int _amenitie_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > leisure_;
  mutable int _leisure_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > business_;
  mutable int _business_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hotelpreference_;
  mutable int _hotelpreference_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > chain_;
  mutable int _chain_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr attraction_;
  ::google::protobuf::internal::ArenaStringPtr hotelname_;
  ::google::protobuf::internal::ArenaStringPtr lastupdated_;
  ::google::protobuf::int32 luxury_;
  ::google::protobuf::int32 builtyear_;
  ::google::protobuf::int32 renovationyear_;
  ::google::protobuf::int32 floors_;
  ::google::protobuf::int32 noofrooms_;
  ::google::protobuf::int32 firesafety_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_HotelFiltersImpl();
};
// -------------------------------------------------------------------

class PSFRequest_RoomTypeFilters_RoomCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory) */ {
 public:
  PSFRequest_RoomTypeFilters_RoomCategory();
  virtual ~PSFRequest_RoomTypeFilters_RoomCategory();

  PSFRequest_RoomTypeFilters_RoomCategory(const PSFRequest_RoomTypeFilters_RoomCategory& from);

  inline PSFRequest_RoomTypeFilters_RoomCategory& operator=(const PSFRequest_RoomTypeFilters_RoomCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_RoomTypeFilters_RoomCategory(PSFRequest_RoomTypeFilters_RoomCategory&& from) noexcept
    : PSFRequest_RoomTypeFilters_RoomCategory() {
    *this = ::std::move(from);
  }

  inline PSFRequest_RoomTypeFilters_RoomCategory& operator=(PSFRequest_RoomTypeFilters_RoomCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_RoomTypeFilters_RoomCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_RoomTypeFilters_RoomCategory* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_RoomTypeFilters_RoomCategory*>(
               &_PSFRequest_RoomTypeFilters_RoomCategory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PSFRequest_RoomTypeFilters_RoomCategory* other);
  friend void swap(PSFRequest_RoomTypeFilters_RoomCategory& a, PSFRequest_RoomTypeFilters_RoomCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_RoomTypeFilters_RoomCategory* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_RoomTypeFilters_RoomCategory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_RoomTypeFilters_RoomCategory& from);
  void MergeFrom(const PSFRequest_RoomTypeFilters_RoomCategory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_RoomTypeFilters_RoomCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 MainCategory = 1;
  void clear_maincategory();
  static const int kMainCategoryFieldNumber = 1;
  ::google::protobuf::int32 maincategory() const;
  void set_maincategory(::google::protobuf::int32 value);

  // int32 SubCategory = 2;
  void clear_subcategory();
  static const int kSubCategoryFieldNumber = 2;
  ::google::protobuf::int32 subcategory() const;
  void set_subcategory(::google::protobuf::int32 value);

  // int32 View = 3;
  void clear_view();
  static const int kViewFieldNumber = 3;
  ::google::protobuf::int32 view() const;
  void set_view(::google::protobuf::int32 value);

  // int32 BeddingType = 4;
  void clear_beddingtype();
  static const int kBeddingTypeFieldNumber = 4;
  ::google::protobuf::int32 beddingtype() const;
  void set_beddingtype(::google::protobuf::int32 value);

  // int32 Attribute1 = 5;
  void clear_attribute1();
  static const int kAttribute1FieldNumber = 5;
  ::google::protobuf::int32 attribute1() const;
  void set_attribute1(::google::protobuf::int32 value);

  // int32 Attribute2 = 6;
  void clear_attribute2();
  static const int kAttribute2FieldNumber = 6;
  ::google::protobuf::int32 attribute2() const;
  void set_attribute2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 maincategory_;
  ::google::protobuf::int32 subcategory_;
  ::google::protobuf::int32 view_;
  ::google::protobuf::int32 beddingtype_;
  ::google::protobuf::int32 attribute1_;
  ::google::protobuf::int32 attribute2_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_RoomTypeFilters_RoomCategoryImpl();
};
// -------------------------------------------------------------------

class PSFRequest_RoomTypeFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.RoomTypeFilters) */ {
 public:
  PSFRequest_RoomTypeFilters();
  virtual ~PSFRequest_RoomTypeFilters();

  PSFRequest_RoomTypeFilters(const PSFRequest_RoomTypeFilters& from);

  inline PSFRequest_RoomTypeFilters& operator=(const PSFRequest_RoomTypeFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_RoomTypeFilters(PSFRequest_RoomTypeFilters&& from) noexcept
    : PSFRequest_RoomTypeFilters() {
    *this = ::std::move(from);
  }

  inline PSFRequest_RoomTypeFilters& operator=(PSFRequest_RoomTypeFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_RoomTypeFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_RoomTypeFilters* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_RoomTypeFilters*>(
               &_PSFRequest_RoomTypeFilters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PSFRequest_RoomTypeFilters* other);
  friend void swap(PSFRequest_RoomTypeFilters& a, PSFRequest_RoomTypeFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_RoomTypeFilters* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_RoomTypeFilters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_RoomTypeFilters& from);
  void MergeFrom(const PSFRequest_RoomTypeFilters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_RoomTypeFilters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSFRequest_RoomTypeFilters_RoomCategory RoomCategory;

  // accessors -------------------------------------------------------

  // repeated int32 roomAmenitie = 2;
  int roomamenitie_size() const;
  void clear_roomamenitie();
  static const int kRoomAmenitieFieldNumber = 2;
  ::google::protobuf::int32 roomamenitie(int index) const;
  void set_roomamenitie(int index, ::google::protobuf::int32 value);
  void add_roomamenitie(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roomamenitie() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roomamenitie();

  // repeated int32 roomId = 3;
  int roomid_size() const;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  ::google::protobuf::int32 roomid(int index) const;
  void set_roomid(int index, ::google::protobuf::int32 value);
  void add_roomid(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roomid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roomid();

  // repeated .protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory roomCategories = 5;
  int roomcategories_size() const;
  void clear_roomcategories();
  static const int kRoomCategoriesFieldNumber = 5;
  const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory& roomcategories(int index) const;
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory* mutable_roomcategories(int index);
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory* add_roomcategories();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory >*
      mutable_roomcategories();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory >&
      roomcategories() const;

  // string roomName = 4;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  #if LANG_CXX11
  void set_roomname(::std::string&& value);
  #endif
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // int32 suite = 1;
  void clear_suite();
  static const int kSuiteFieldNumber = 1;
  ::google::protobuf::int32 suite() const;
  void set_suite(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.RoomTypeFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roomamenitie_;
  mutable int _roomamenitie_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roomid_;
  mutable int _roomid_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory > roomcategories_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  ::google::protobuf::int32 suite_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_RoomTypeFiltersImpl();
};
// -------------------------------------------------------------------

class PSFRequest_AdditionalFilters : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.AdditionalFilters) */ {
 public:
  PSFRequest_AdditionalFilters();
  virtual ~PSFRequest_AdditionalFilters();

  PSFRequest_AdditionalFilters(const PSFRequest_AdditionalFilters& from);

  inline PSFRequest_AdditionalFilters& operator=(const PSFRequest_AdditionalFilters& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_AdditionalFilters(PSFRequest_AdditionalFilters&& from) noexcept
    : PSFRequest_AdditionalFilters() {
    *this = ::std::move(from);
  }

  inline PSFRequest_AdditionalFilters& operator=(PSFRequest_AdditionalFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_AdditionalFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_AdditionalFilters* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_AdditionalFilters*>(
               &_PSFRequest_AdditionalFilters_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PSFRequest_AdditionalFilters* other);
  friend void swap(PSFRequest_AdditionalFilters& a, PSFRequest_AdditionalFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_AdditionalFilters* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_AdditionalFilters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_AdditionalFilters& from);
  void MergeFrom(const PSFRequest_AdditionalFilters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_AdditionalFilters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.AdditionalFilters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_AdditionalFiltersImpl();
};
// -------------------------------------------------------------------

class PSFRequest_SearchPeriodCriteria : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria) */ {
 public:
  PSFRequest_SearchPeriodCriteria();
  virtual ~PSFRequest_SearchPeriodCriteria();

  PSFRequest_SearchPeriodCriteria(const PSFRequest_SearchPeriodCriteria& from);

  inline PSFRequest_SearchPeriodCriteria& operator=(const PSFRequest_SearchPeriodCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest_SearchPeriodCriteria(PSFRequest_SearchPeriodCriteria&& from) noexcept
    : PSFRequest_SearchPeriodCriteria() {
    *this = ::std::move(from);
  }

  inline PSFRequest_SearchPeriodCriteria& operator=(PSFRequest_SearchPeriodCriteria&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest_SearchPeriodCriteria& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest_SearchPeriodCriteria* internal_default_instance() {
    return reinterpret_cast<const PSFRequest_SearchPeriodCriteria*>(
               &_PSFRequest_SearchPeriodCriteria_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PSFRequest_SearchPeriodCriteria* other);
  friend void swap(PSFRequest_SearchPeriodCriteria& a, PSFRequest_SearchPeriodCriteria& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest_SearchPeriodCriteria* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest_SearchPeriodCriteria* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest_SearchPeriodCriteria& from);
  void MergeFrom(const PSFRequest_SearchPeriodCriteria& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest_SearchPeriodCriteria* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 travelFrom = 1;
  void clear_travelfrom();
  static const int kTravelFromFieldNumber = 1;
  ::google::protobuf::int32 travelfrom() const;
  void set_travelfrom(::google::protobuf::int32 value);

  // int32 travelTo = 2;
  void clear_travelto();
  static const int kTravelToFieldNumber = 2;
  ::google::protobuf::int32 travelto() const;
  void set_travelto(::google::protobuf::int32 value);

  // int32 bookingDateTime = 3;
  void clear_bookingdatetime();
  static const int kBookingDateTimeFieldNumber = 3;
  ::google::protobuf::int32 bookingdatetime() const;
  void set_bookingdatetime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 travelfrom_;
  ::google::protobuf::int32 travelto_;
  ::google::protobuf::int32 bookingdatetime_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequest_SearchPeriodCriteriaImpl();
};
// -------------------------------------------------------------------

class PSFRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFRequest) */ {
 public:
  PSFRequest();
  virtual ~PSFRequest();

  PSFRequest(const PSFRequest& from);

  inline PSFRequest& operator=(const PSFRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFRequest(PSFRequest&& from) noexcept
    : PSFRequest() {
    *this = ::std::move(from);
  }

  inline PSFRequest& operator=(PSFRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFRequest* internal_default_instance() {
    return reinterpret_cast<const PSFRequest*>(
               &_PSFRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PSFRequest* other);
  friend void swap(PSFRequest& a, PSFRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFRequest& from);
  void MergeFrom(const PSFRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSFRequest_RoomOccupancy RoomOccupancy;
  typedef PSFRequest_HotelFilters HotelFilters;
  typedef PSFRequest_RoomTypeFilters RoomTypeFilters;
  typedef PSFRequest_AdditionalFilters AdditionalFilters;
  typedef PSFRequest_SearchPeriodCriteria SearchPeriodCriteria;

  // accessors -------------------------------------------------------

  // repeated int32 exceptRestrictions = 5;
  int exceptrestrictions_size() const;
  void clear_exceptrestrictions();
  static const int kExceptRestrictionsFieldNumber = 5;
  ::google::protobuf::int32 exceptrestrictions(int index) const;
  void set_exceptrestrictions(int index, ::google::protobuf::int32 value);
  void add_exceptrestrictions(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      exceptrestrictions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_exceptrestrictions();

  // repeated int32 hotelIds = 7;
  int hotelids_size() const;
  void clear_hotelids();
  static const int kHotelIdsFieldNumber = 7;
  ::google::protobuf::int32 hotelids(int index) const;
  void set_hotelids(int index, ::google::protobuf::int32 value);
  void add_hotelids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hotelids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hotelids();

  // repeated int32 bookingChannelsWithAutoMapping = 10;
  int bookingchannelswithautomapping_size() const;
  void clear_bookingchannelswithautomapping();
  static const int kBookingChannelsWithAutoMappingFieldNumber = 10;
  ::google::protobuf::int32 bookingchannelswithautomapping(int index) const;
  void set_bookingchannelswithautomapping(int index, ::google::protobuf::int32 value);
  void add_bookingchannelswithautomapping(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bookingchannelswithautomapping() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bookingchannelswithautomapping();

  // repeated int32 bookingChannelTypes = 11;
  int bookingchanneltypes_size() const;
  void clear_bookingchanneltypes();
  static const int kBookingChannelTypesFieldNumber = 11;
  ::google::protobuf::int32 bookingchanneltypes(int index) const;
  void set_bookingchanneltypes(int index, ::google::protobuf::int32 value);
  void add_bookingchanneltypes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bookingchanneltypes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bookingchanneltypes();

  // repeated int32 excludedBookingchannel = 12;
  int excludedbookingchannel_size() const;
  void clear_excludedbookingchannel();
  static const int kExcludedBookingchannelFieldNumber = 12;
  ::google::protobuf::int32 excludedbookingchannel(int index) const;
  void set_excludedbookingchannel(int index, ::google::protobuf::int32 value);
  void add_excludedbookingchannel(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      excludedbookingchannel() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_excludedbookingchannel();

  // repeated .protobuffer.dotwproto.PSFRequest.RoomOccupancy roomOccupancy = 14;
  int roomoccupancy_size() const;
  void clear_roomoccupancy();
  static const int kRoomOccupancyFieldNumber = 14;
  const ::protobuffer::dotwproto::PSFRequest_RoomOccupancy& roomoccupancy(int index) const;
  ::protobuffer::dotwproto::PSFRequest_RoomOccupancy* mutable_roomoccupancy(int index);
  ::protobuffer::dotwproto::PSFRequest_RoomOccupancy* add_roomoccupancy();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomOccupancy >*
      mutable_roomoccupancy();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomOccupancy >&
      roomoccupancy() const;

  // string psfilter = 1;
  void clear_psfilter();
  static const int kPsfilterFieldNumber = 1;
  const ::std::string& psfilter() const;
  void set_psfilter(const ::std::string& value);
  #if LANG_CXX11
  void set_psfilter(::std::string&& value);
  #endif
  void set_psfilter(const char* value);
  void set_psfilter(const char* value, size_t size);
  ::std::string* mutable_psfilter();
  ::std::string* release_psfilter();
  void set_allocated_psfilter(::std::string* psfilter);

  // string environment = 3;
  void clear_environment();
  static const int kEnvironmentFieldNumber = 3;
  const ::std::string& environment() const;
  void set_environment(const ::std::string& value);
  #if LANG_CXX11
  void set_environment(::std::string&& value);
  #endif
  void set_environment(const char* value);
  void set_environment(const char* value, size_t size);
  ::std::string* mutable_environment();
  ::std::string* release_environment();
  void set_allocated_environment(::std::string* environment);

  // string city = 8;
  void clear_city();
  static const int kCityFieldNumber = 8;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // .protobuffer.dotwproto.PSFRequest.HotelFilters hotelFilters = 15;
  bool has_hotelfilters() const;
  void clear_hotelfilters();
  static const int kHotelFiltersFieldNumber = 15;
  const ::protobuffer::dotwproto::PSFRequest_HotelFilters& hotelfilters() const;
  ::protobuffer::dotwproto::PSFRequest_HotelFilters* release_hotelfilters();
  ::protobuffer::dotwproto::PSFRequest_HotelFilters* mutable_hotelfilters();
  void set_allocated_hotelfilters(::protobuffer::dotwproto::PSFRequest_HotelFilters* hotelfilters);

  // .protobuffer.dotwproto.PSFRequest.RoomTypeFilters roomTypeFilters = 16;
  bool has_roomtypefilters() const;
  void clear_roomtypefilters();
  static const int kRoomTypeFiltersFieldNumber = 16;
  const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters& roomtypefilters() const;
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* release_roomtypefilters();
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* mutable_roomtypefilters();
  void set_allocated_roomtypefilters(::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* roomtypefilters);

  // .protobuffer.dotwproto.PSFRequest.AdditionalFilters additionalFilters = 17;
  bool has_additionalfilters() const;
  void clear_additionalfilters();
  static const int kAdditionalFiltersFieldNumber = 17;
  const ::protobuffer::dotwproto::PSFRequest_AdditionalFilters& additionalfilters() const;
  ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* release_additionalfilters();
  ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* mutable_additionalfilters();
  void set_allocated_additionalfilters(::protobuffer::dotwproto::PSFRequest_AdditionalFilters* additionalfilters);

  // .protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
  bool has_searchperiodcriteria() const;
  void clear_searchperiodcriteria();
  static const int kSearchPeriodCriteriaFieldNumber = 18;
  const ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria& searchperiodcriteria() const;
  ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* release_searchperiodcriteria();
  ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* mutable_searchperiodcriteria();
  void set_allocated_searchperiodcriteria(::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* searchperiodcriteria);

  // int32 customerId = 2;
  void clear_customerid();
  static const int kCustomerIdFieldNumber = 2;
  ::google::protobuf::int32 customerid() const;
  void set_customerid(::google::protobuf::int32 value);

  // int32 requestSource = 4;
  void clear_requestsource();
  static const int kRequestSourceFieldNumber = 4;
  ::google::protobuf::int32 requestsource() const;
  void set_requestsource(::google::protobuf::int32 value);

  // int32 country = 9;
  void clear_country();
  static const int kCountryFieldNumber = 9;
  ::google::protobuf::int32 country() const;
  void set_country(::google::protobuf::int32 value);

  // bool passengerNationalityOrResidenceProvided = 6;
  void clear_passengernationalityorresidenceprovided();
  static const int kPassengerNationalityOrResidenceProvidedFieldNumber = 6;
  bool passengernationalityorresidenceprovided() const;
  void set_passengernationalityorresidenceprovided(bool value);

  // bool activeForRoomCategories = 13;
  void clear_activeforroomcategories();
  static const int kActiveForRoomCategoriesFieldNumber = 13;
  bool activeforroomcategories() const;
  void set_activeforroomcategories(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > exceptrestrictions_;
  mutable int _exceptrestrictions_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hotelids_;
  mutable int _hotelids_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bookingchannelswithautomapping_;
  mutable int _bookingchannelswithautomapping_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bookingchanneltypes_;
  mutable int _bookingchanneltypes_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > excludedbookingchannel_;
  mutable int _excludedbookingchannel_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomOccupancy > roomoccupancy_;
  ::google::protobuf::internal::ArenaStringPtr psfilter_;
  ::google::protobuf::internal::ArenaStringPtr environment_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::protobuffer::dotwproto::PSFRequest_HotelFilters* hotelfilters_;
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* roomtypefilters_;
  ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* additionalfilters_;
  ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* searchperiodcriteria_;
  ::google::protobuf::int32 customerid_;
  ::google::protobuf::int32 requestsource_;
  ::google::protobuf::int32 country_;
  bool passengernationalityorresidenceprovided_;
  bool activeforroomcategories_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFRequestImpl();
};
// -------------------------------------------------------------------

class PSFReply_RoomData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFReply.RoomData) */ {
 public:
  PSFReply_RoomData();
  virtual ~PSFReply_RoomData();

  PSFReply_RoomData(const PSFReply_RoomData& from);

  inline PSFReply_RoomData& operator=(const PSFReply_RoomData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFReply_RoomData(PSFReply_RoomData&& from) noexcept
    : PSFReply_RoomData() {
    *this = ::std::move(from);
  }

  inline PSFReply_RoomData& operator=(PSFReply_RoomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFReply_RoomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFReply_RoomData* internal_default_instance() {
    return reinterpret_cast<const PSFReply_RoomData*>(
               &_PSFReply_RoomData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(PSFReply_RoomData* other);
  friend void swap(PSFReply_RoomData& a, PSFReply_RoomData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFReply_RoomData* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFReply_RoomData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFReply_RoomData& from);
  void MergeFrom(const PSFReply_RoomData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFReply_RoomData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // int32 roomTypeCode = 2;
  void clear_roomtypecode();
  static const int kRoomTypeCodeFieldNumber = 2;
  ::google::protobuf::int32 roomtypecode() const;
  void set_roomtypecode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFReply.RoomData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::int32 roomtypecode_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFReply_RoomDataImpl();
};
// -------------------------------------------------------------------

class PSFReply_HotelCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFReply.HotelCode) */ {
 public:
  PSFReply_HotelCode();
  virtual ~PSFReply_HotelCode();

  PSFReply_HotelCode(const PSFReply_HotelCode& from);

  inline PSFReply_HotelCode& operator=(const PSFReply_HotelCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFReply_HotelCode(PSFReply_HotelCode&& from) noexcept
    : PSFReply_HotelCode() {
    *this = ::std::move(from);
  }

  inline PSFReply_HotelCode& operator=(PSFReply_HotelCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFReply_HotelCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFReply_HotelCode* internal_default_instance() {
    return reinterpret_cast<const PSFReply_HotelCode*>(
               &_PSFReply_HotelCode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PSFReply_HotelCode* other);
  friend void swap(PSFReply_HotelCode& a, PSFReply_HotelCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFReply_HotelCode* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFReply_HotelCode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFReply_HotelCode& from);
  void MergeFrom(const PSFReply_HotelCode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFReply_HotelCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.PSFReply.RoomData roomData = 4;
  int roomdata_size() const;
  void clear_roomdata();
  static const int kRoomDataFieldNumber = 4;
  const ::protobuffer::dotwproto::PSFReply_RoomData& roomdata(int index) const;
  ::protobuffer::dotwproto::PSFReply_RoomData* mutable_roomdata(int index);
  ::protobuffer::dotwproto::PSFReply_RoomData* add_roomdata();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomData >*
      mutable_roomdata();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomData >&
      roomdata() const;

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string hotelCodeOriginal = 2;
  void clear_hotelcodeoriginal();
  static const int kHotelCodeOriginalFieldNumber = 2;
  const ::std::string& hotelcodeoriginal() const;
  void set_hotelcodeoriginal(const ::std::string& value);
  #if LANG_CXX11
  void set_hotelcodeoriginal(::std::string&& value);
  #endif
  void set_hotelcodeoriginal(const char* value);
  void set_hotelcodeoriginal(const char* value, size_t size);
  ::std::string* mutable_hotelcodeoriginal();
  ::std::string* release_hotelcodeoriginal();
  void set_allocated_hotelcodeoriginal(::std::string* hotelcodeoriginal);

  // string cityCode = 3;
  void clear_citycode();
  static const int kCityCodeFieldNumber = 3;
  const ::std::string& citycode() const;
  void set_citycode(const ::std::string& value);
  #if LANG_CXX11
  void set_citycode(::std::string&& value);
  #endif
  void set_citycode(const char* value);
  void set_citycode(const char* value, size_t size);
  ::std::string* mutable_citycode();
  ::std::string* release_citycode();
  void set_allocated_citycode(::std::string* citycode);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFReply.HotelCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomData > roomdata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr hotelcodeoriginal_;
  ::google::protobuf::internal::ArenaStringPtr citycode_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFReply_HotelCodeImpl();
};
// -------------------------------------------------------------------

class PSFReply_BookingChannelCode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFReply.BookingChannelCode) */ {
 public:
  PSFReply_BookingChannelCode();
  virtual ~PSFReply_BookingChannelCode();

  PSFReply_BookingChannelCode(const PSFReply_BookingChannelCode& from);

  inline PSFReply_BookingChannelCode& operator=(const PSFReply_BookingChannelCode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFReply_BookingChannelCode(PSFReply_BookingChannelCode&& from) noexcept
    : PSFReply_BookingChannelCode() {
    *this = ::std::move(from);
  }

  inline PSFReply_BookingChannelCode& operator=(PSFReply_BookingChannelCode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFReply_BookingChannelCode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFReply_BookingChannelCode* internal_default_instance() {
    return reinterpret_cast<const PSFReply_BookingChannelCode*>(
               &_PSFReply_BookingChannelCode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(PSFReply_BookingChannelCode* other);
  friend void swap(PSFReply_BookingChannelCode& a, PSFReply_BookingChannelCode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFReply_BookingChannelCode* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFReply_BookingChannelCode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFReply_BookingChannelCode& from);
  void MergeFrom(const PSFReply_BookingChannelCode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFReply_BookingChannelCode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.PSFReply.HotelCode hotelCodeArray = 2;
  int hotelcodearray_size() const;
  void clear_hotelcodearray();
  static const int kHotelCodeArrayFieldNumber = 2;
  const ::protobuffer::dotwproto::PSFReply_HotelCode& hotelcodearray(int index) const;
  ::protobuffer::dotwproto::PSFReply_HotelCode* mutable_hotelcodearray(int index);
  ::protobuffer::dotwproto::PSFReply_HotelCode* add_hotelcodearray();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_HotelCode >*
      mutable_hotelcodearray();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_HotelCode >&
      hotelcodearray() const;

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFReply.BookingChannelCode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_HotelCode > hotelcodearray_;
  ::google::protobuf::int32 key_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFReply_BookingChannelCodeImpl();
};
// -------------------------------------------------------------------

class PSFReply_RoomIndex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFReply.RoomIndex) */ {
 public:
  PSFReply_RoomIndex();
  virtual ~PSFReply_RoomIndex();

  PSFReply_RoomIndex(const PSFReply_RoomIndex& from);

  inline PSFReply_RoomIndex& operator=(const PSFReply_RoomIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFReply_RoomIndex(PSFReply_RoomIndex&& from) noexcept
    : PSFReply_RoomIndex() {
    *this = ::std::move(from);
  }

  inline PSFReply_RoomIndex& operator=(PSFReply_RoomIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFReply_RoomIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFReply_RoomIndex* internal_default_instance() {
    return reinterpret_cast<const PSFReply_RoomIndex*>(
               &_PSFReply_RoomIndex_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PSFReply_RoomIndex* other);
  friend void swap(PSFReply_RoomIndex& a, PSFReply_RoomIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFReply_RoomIndex* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFReply_RoomIndex* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFReply_RoomIndex& from);
  void MergeFrom(const PSFReply_RoomIndex& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFReply_RoomIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.PSFReply.BookingChannelCode roomIndexArray = 2;
  int roomindexarray_size() const;
  void clear_roomindexarray();
  static const int kRoomIndexArrayFieldNumber = 2;
  const ::protobuffer::dotwproto::PSFReply_BookingChannelCode& roomindexarray(int index) const;
  ::protobuffer::dotwproto::PSFReply_BookingChannelCode* mutable_roomindexarray(int index);
  ::protobuffer::dotwproto::PSFReply_BookingChannelCode* add_roomindexarray();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_BookingChannelCode >*
      mutable_roomindexarray();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_BookingChannelCode >&
      roomindexarray() const;

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFReply.RoomIndex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_BookingChannelCode > roomindexarray_;
  ::google::protobuf::int32 key_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFReply_RoomIndexImpl();
};
// -------------------------------------------------------------------

class PSFReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.PSFReply) */ {
 public:
  PSFReply();
  virtual ~PSFReply();

  PSFReply(const PSFReply& from);

  inline PSFReply& operator=(const PSFReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSFReply(PSFReply&& from) noexcept
    : PSFReply() {
    *this = ::std::move(from);
  }

  inline PSFReply& operator=(PSFReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSFReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PSFReply* internal_default_instance() {
    return reinterpret_cast<const PSFReply*>(
               &_PSFReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PSFReply* other);
  friend void swap(PSFReply& a, PSFReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSFReply* New() const PROTOBUF_FINAL { return New(NULL); }

  PSFReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSFReply& from);
  void MergeFrom(const PSFReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSFReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PSFReply_RoomData RoomData;
  typedef PSFReply_HotelCode HotelCode;
  typedef PSFReply_BookingChannelCode BookingChannelCode;
  typedef PSFReply_RoomIndex RoomIndex;

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.PSFReply.RoomIndex Results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::protobuffer::dotwproto::PSFReply_RoomIndex& results(int index) const;
  ::protobuffer::dotwproto::PSFReply_RoomIndex* mutable_results(int index);
  ::protobuffer::dotwproto::PSFReply_RoomIndex* add_results();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomIndex >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomIndex >&
      results() const;

  // string error = 2;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // string errorCode = 3;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 3;
  const ::std::string& errorcode() const;
  void set_errorcode(const ::std::string& value);
  #if LANG_CXX11
  void set_errorcode(::std::string&& value);
  #endif
  void set_errorcode(const char* value);
  void set_errorcode(const char* value, size_t size);
  ::std::string* mutable_errorcode();
  ::std::string* release_errorcode();
  void set_allocated_errorcode(::std::string* errorcode);

  // string replystring = 4;
  void clear_replystring();
  static const int kReplystringFieldNumber = 4;
  const ::std::string& replystring() const;
  void set_replystring(const ::std::string& value);
  #if LANG_CXX11
  void set_replystring(::std::string&& value);
  #endif
  void set_replystring(const char* value);
  void set_replystring(const char* value, size_t size);
  ::std::string* mutable_replystring();
  ::std::string* release_replystring();
  void set_allocated_replystring(::std::string* replystring);

  // int32 replystringInt = 5;
  void clear_replystringint();
  static const int kReplystringIntFieldNumber = 5;
  ::google::protobuf::int32 replystringint() const;
  void set_replystringint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.PSFReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomIndex > results_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr errorcode_;
  ::google::protobuf::internal::ArenaStringPtr replystring_;
  ::google::protobuf::int32 replystringint_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsPSFReplyImpl();
};
// -------------------------------------------------------------------

class HDRequest_HotelIds : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDRequest.HotelIds) */ {
 public:
  HDRequest_HotelIds();
  virtual ~HDRequest_HotelIds();

  HDRequest_HotelIds(const HDRequest_HotelIds& from);

  inline HDRequest_HotelIds& operator=(const HDRequest_HotelIds& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDRequest_HotelIds(HDRequest_HotelIds&& from) noexcept
    : HDRequest_HotelIds() {
    *this = ::std::move(from);
  }

  inline HDRequest_HotelIds& operator=(HDRequest_HotelIds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDRequest_HotelIds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDRequest_HotelIds* internal_default_instance() {
    return reinterpret_cast<const HDRequest_HotelIds*>(
               &_HDRequest_HotelIds_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(HDRequest_HotelIds* other);
  friend void swap(HDRequest_HotelIds& a, HDRequest_HotelIds& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDRequest_HotelIds* New() const PROTOBUF_FINAL { return New(NULL); }

  HDRequest_HotelIds* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDRequest_HotelIds& from);
  void MergeFrom(const HDRequest_HotelIds& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDRequest_HotelIds* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 roomTypeCodes = 2;
  int roomtypecodes_size() const;
  void clear_roomtypecodes();
  static const int kRoomTypeCodesFieldNumber = 2;
  ::google::protobuf::int32 roomtypecodes(int index) const;
  void set_roomtypecodes(int index, ::google::protobuf::int32 value);
  void add_roomtypecodes(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roomtypecodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roomtypecodes();

  // int32 hotelId = 1;
  void clear_hotelid();
  static const int kHotelIdFieldNumber = 1;
  ::google::protobuf::int32 hotelid() const;
  void set_hotelid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDRequest.HotelIds)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roomtypecodes_;
  mutable int _roomtypecodes_cached_byte_size_;
  ::google::protobuf::int32 hotelid_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDRequest_HotelIdsImpl();
};
// -------------------------------------------------------------------

class HDRequest_ReturnHotelStaticData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData) */ {
 public:
  HDRequest_ReturnHotelStaticData();
  virtual ~HDRequest_ReturnHotelStaticData();

  HDRequest_ReturnHotelStaticData(const HDRequest_ReturnHotelStaticData& from);

  inline HDRequest_ReturnHotelStaticData& operator=(const HDRequest_ReturnHotelStaticData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDRequest_ReturnHotelStaticData(HDRequest_ReturnHotelStaticData&& from) noexcept
    : HDRequest_ReturnHotelStaticData() {
    *this = ::std::move(from);
  }

  inline HDRequest_ReturnHotelStaticData& operator=(HDRequest_ReturnHotelStaticData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDRequest_ReturnHotelStaticData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDRequest_ReturnHotelStaticData* internal_default_instance() {
    return reinterpret_cast<const HDRequest_ReturnHotelStaticData*>(
               &_HDRequest_ReturnHotelStaticData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(HDRequest_ReturnHotelStaticData* other);
  friend void swap(HDRequest_ReturnHotelStaticData& a, HDRequest_ReturnHotelStaticData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDRequest_ReturnHotelStaticData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDRequest_ReturnHotelStaticData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDRequest_ReturnHotelStaticData& from);
  void MergeFrom(const HDRequest_ReturnHotelStaticData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDRequest_ReturnHotelStaticData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool description1 = 1;
  void clear_description1();
  static const int kDescription1FieldNumber = 1;
  bool description1() const;
  void set_description1(bool value);

  // bool description2 = 2;
  void clear_description2();
  static const int kDescription2FieldNumber = 2;
  bool description2() const;
  void set_description2(bool value);

  // bool geoPoint = 3;
  void clear_geopoint();
  static const int kGeoPointFieldNumber = 3;
  bool geopoint() const;
  void set_geopoint(bool value);

  // bool ratingDescription = 4;
  void clear_ratingdescription();
  static const int kRatingDescriptionFieldNumber = 4;
  bool ratingdescription() const;
  void set_ratingdescription(bool value);

  // bool images = 5;
  void clear_images();
  static const int kImagesFieldNumber = 5;
  bool images() const;
  void set_images(bool value);

  // bool direct = 6;
  void clear_direct();
  static const int kDirectFieldNumber = 6;
  bool direct() const;
  void set_direct(bool value);

  // bool hotelPreference = 7;
  void clear_hotelpreference();
  static const int kHotelPreferenceFieldNumber = 7;
  bool hotelpreference() const;
  void set_hotelpreference(bool value);

  // bool builtYear = 8;
  void clear_builtyear();
  static const int kBuiltYearFieldNumber = 8;
  bool builtyear() const;
  void set_builtyear(bool value);

  // bool renovationYear = 9;
  void clear_renovationyear();
  static const int kRenovationYearFieldNumber = 9;
  bool renovationyear() const;
  void set_renovationyear(bool value);

  // bool floors = 10;
  void clear_floors();
  static const int kFloorsFieldNumber = 10;
  bool floors() const;
  void set_floors(bool value);

  // bool noOfRooms = 11;
  void clear_noofrooms();
  static const int kNoOfRoomsFieldNumber = 11;
  bool noofrooms() const;
  void set_noofrooms(bool value);

  // bool luxury = 12;
  void clear_luxury();
  static const int kLuxuryFieldNumber = 12;
  bool luxury() const;
  void set_luxury(bool value);

  // bool address = 13;
  void clear_address();
  static const int kAddressFieldNumber = 13;
  bool address() const;
  void set_address(bool value);

  // bool zipCode = 14;
  void clear_zipcode();
  static const int kZipCodeFieldNumber = 14;
  bool zipcode() const;
  void set_zipcode(bool value);

  // bool location = 15;
  void clear_location();
  static const int kLocationFieldNumber = 15;
  bool location() const;
  void set_location(bool value);

  // bool locationId = 16;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 16;
  bool locationid() const;
  void set_locationid(bool value);

  // bool location1 = 17;
  void clear_location1();
  static const int kLocation1FieldNumber = 17;
  bool location1() const;
  void set_location1(bool value);

  // bool location2 = 18;
  void clear_location2();
  static const int kLocation2FieldNumber = 18;
  bool location2() const;
  void set_location2(bool value);

  // bool location3 = 19;
  void clear_location3();
  static const int kLocation3FieldNumber = 19;
  bool location3() const;
  void set_location3(bool value);

  // bool stateName = 20;
  void clear_statename();
  static const int kStateNameFieldNumber = 20;
  bool statename() const;
  void set_statename(bool value);

  // bool stateCode = 21;
  void clear_statecode();
  static const int kStateCodeFieldNumber = 21;
  bool statecode() const;
  void set_statecode(bool value);

  // bool countryName = 22;
  void clear_countryname();
  static const int kCountryNameFieldNumber = 22;
  bool countryname() const;
  void set_countryname(bool value);

  // bool regionName = 23;
  void clear_regionname();
  static const int kRegionNameFieldNumber = 23;
  bool regionname() const;
  void set_regionname(bool value);

  // bool regionCode = 24;
  void clear_regioncode();
  static const int kRegionCodeFieldNumber = 24;
  bool regioncode() const;
  void set_regioncode(bool value);

  // bool amenitie = 25;
  void clear_amenitie();
  static const int kAmenitieFieldNumber = 25;
  bool amenitie() const;
  void set_amenitie(bool value);

  // bool leisure = 26;
  void clear_leisure();
  static const int kLeisureFieldNumber = 26;
  bool leisure() const;
  void set_leisure(bool value);

  // bool business = 27;
  void clear_business();
  static const int kBusinessFieldNumber = 27;
  bool business() const;
  void set_business(bool value);

  // bool transportation = 28;
  void clear_transportation();
  static const int kTransportationFieldNumber = 28;
  bool transportation() const;
  void set_transportation(bool value);

  // bool hotelPhone = 29;
  void clear_hotelphone();
  static const int kHotelPhoneFieldNumber = 29;
  bool hotelphone() const;
  void set_hotelphone(bool value);

  // bool hotelCheckIn = 30;
  void clear_hotelcheckin();
  static const int kHotelCheckInFieldNumber = 30;
  bool hotelcheckin() const;
  void set_hotelcheckin(bool value);

  // bool hotelCheckOut = 31;
  void clear_hotelcheckout();
  static const int kHotelCheckOutFieldNumber = 31;
  bool hotelcheckout() const;
  void set_hotelcheckout(bool value);

  // bool minAge = 32;
  void clear_minage();
  static const int kMinAgeFieldNumber = 32;
  bool minage() const;
  void set_minage(bool value);

  // bool rating = 33;
  void clear_rating();
  static const int kRatingFieldNumber = 33;
  bool rating() const;
  void set_rating(bool value);

  // bool fireSafety = 34;
  void clear_firesafety();
  static const int kFireSafetyFieldNumber = 34;
  bool firesafety() const;
  void set_firesafety(bool value);

  // bool chain = 35;
  void clear_chain();
  static const int kChainFieldNumber = 35;
  bool chain() const;
  void set_chain(bool value);

  // bool lastUpdated = 36;
  void clear_lastupdated();
  static const int kLastUpdatedFieldNumber = 36;
  bool lastupdated() const;
  void set_lastupdated(bool value);

  // bool transferMandatory = 37;
  void clear_transfermandatory();
  static const int kTransferMandatoryFieldNumber = 37;
  bool transfermandatory() const;
  void set_transfermandatory(bool value);

  // bool tariffNotes = 38;
  void clear_tariffnotes();
  static const int kTariffNotesFieldNumber = 38;
  bool tariffnotes() const;
  void set_tariffnotes(bool value);

  // bool chainName = 39;
  void clear_chainname();
  static const int kChainNameFieldNumber = 39;
  bool chainname() const;
  void set_chainname(bool value);

  // bool hotelProperty = 40;
  void clear_hotelproperty();
  static const int kHotelPropertyFieldNumber = 40;
  bool hotelproperty() const;
  void set_hotelproperty(bool value);

  // bool fullAddress = 41;
  void clear_fulladdress();
  static const int kFullAddressFieldNumber = 41;
  bool fulladdress() const;
  void set_fulladdress(bool value);

  // bool exclusive = 42;
  void clear_exclusive();
  static const int kExclusiveFieldNumber = 42;
  bool exclusive() const;
  void set_exclusive(bool value);

  // bool attraction = 43;
  void clear_attraction();
  static const int kAttractionFieldNumber = 43;
  bool attraction() const;
  void set_attraction(bool value);

  // bool areaCode = 44;
  void clear_areacode();
  static const int kAreaCodeFieldNumber = 44;
  bool areacode() const;
  void set_areacode(bool value);

  // bool areaName = 45;
  void clear_areaname();
  static const int kAreaNameFieldNumber = 45;
  bool areaname() const;
  void set_areaname(bool value);

  // bool geoLocations = 46;
  void clear_geolocations();
  static const int kGeoLocationsFieldNumber = 46;
  bool geolocations() const;
  void set_geolocations(bool value);

  // bool priority = 47;
  void clear_priority();
  static const int kPriorityFieldNumber = 47;
  bool priority() const;
  void set_priority(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool description1_;
  bool description2_;
  bool geopoint_;
  bool ratingdescription_;
  bool images_;
  bool direct_;
  bool hotelpreference_;
  bool builtyear_;
  bool renovationyear_;
  bool floors_;
  bool noofrooms_;
  bool luxury_;
  bool address_;
  bool zipcode_;
  bool location_;
  bool locationid_;
  bool location1_;
  bool location2_;
  bool location3_;
  bool statename_;
  bool statecode_;
  bool countryname_;
  bool regionname_;
  bool regioncode_;
  bool amenitie_;
  bool leisure_;
  bool business_;
  bool transportation_;
  bool hotelphone_;
  bool hotelcheckin_;
  bool hotelcheckout_;
  bool minage_;
  bool rating_;
  bool firesafety_;
  bool chain_;
  bool lastupdated_;
  bool transfermandatory_;
  bool tariffnotes_;
  bool chainname_;
  bool hotelproperty_;
  bool fulladdress_;
  bool exclusive_;
  bool attraction_;
  bool areacode_;
  bool areaname_;
  bool geolocations_;
  bool priority_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDRequest_ReturnHotelStaticDataImpl();
};
// -------------------------------------------------------------------

class HDRequest_ReturnRoomTypeStaticData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData) */ {
 public:
  HDRequest_ReturnRoomTypeStaticData();
  virtual ~HDRequest_ReturnRoomTypeStaticData();

  HDRequest_ReturnRoomTypeStaticData(const HDRequest_ReturnRoomTypeStaticData& from);

  inline HDRequest_ReturnRoomTypeStaticData& operator=(const HDRequest_ReturnRoomTypeStaticData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDRequest_ReturnRoomTypeStaticData(HDRequest_ReturnRoomTypeStaticData&& from) noexcept
    : HDRequest_ReturnRoomTypeStaticData() {
    *this = ::std::move(from);
  }

  inline HDRequest_ReturnRoomTypeStaticData& operator=(HDRequest_ReturnRoomTypeStaticData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDRequest_ReturnRoomTypeStaticData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDRequest_ReturnRoomTypeStaticData* internal_default_instance() {
    return reinterpret_cast<const HDRequest_ReturnRoomTypeStaticData*>(
               &_HDRequest_ReturnRoomTypeStaticData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(HDRequest_ReturnRoomTypeStaticData* other);
  friend void swap(HDRequest_ReturnRoomTypeStaticData& a, HDRequest_ReturnRoomTypeStaticData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDRequest_ReturnRoomTypeStaticData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDRequest_ReturnRoomTypeStaticData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDRequest_ReturnRoomTypeStaticData& from);
  void MergeFrom(const HDRequest_ReturnRoomTypeStaticData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDRequest_ReturnRoomTypeStaticData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool roomAmenities = 1;
  void clear_roomamenities();
  static const int kRoomAmenitiesFieldNumber = 1;
  bool roomamenities() const;
  void set_roomamenities(bool value);

  // bool name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  bool name() const;
  void set_name(bool value);

  // bool supplierRoomName = 3;
  void clear_supplierroomname();
  static const int kSupplierRoomNameFieldNumber = 3;
  bool supplierroomname() const;
  void set_supplierroomname(bool value);

  // bool twin = 4;
  void clear_twin();
  static const int kTwinFieldNumber = 4;
  bool twin() const;
  void set_twin(bool value);

  // bool roomInfo = 5;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 5;
  bool roominfo() const;
  void set_roominfo(bool value);

  // bool specials = 6;
  void clear_specials();
  static const int kSpecialsFieldNumber = 6;
  bool specials() const;
  void set_specials(bool value);

  // bool roomImages = 7;
  void clear_roomimages();
  static const int kRoomImagesFieldNumber = 7;
  bool roomimages() const;
  void set_roomimages(bool value);

  // bool roomCategory = 8;
  void clear_roomcategory();
  static const int kRoomCategoryFieldNumber = 8;
  bool roomcategory() const;
  void set_roomcategory(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool roomamenities_;
  bool name_;
  bool supplierroomname_;
  bool twin_;
  bool roominfo_;
  bool specials_;
  bool roomimages_;
  bool roomcategory_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDRequest_ReturnRoomTypeStaticDataImpl();
};
// -------------------------------------------------------------------

class HDRequest_ReturnRateData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDRequest.ReturnRateData) */ {
 public:
  HDRequest_ReturnRateData();
  virtual ~HDRequest_ReturnRateData();

  HDRequest_ReturnRateData(const HDRequest_ReturnRateData& from);

  inline HDRequest_ReturnRateData& operator=(const HDRequest_ReturnRateData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDRequest_ReturnRateData(HDRequest_ReturnRateData&& from) noexcept
    : HDRequest_ReturnRateData() {
    *this = ::std::move(from);
  }

  inline HDRequest_ReturnRateData& operator=(HDRequest_ReturnRateData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDRequest_ReturnRateData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDRequest_ReturnRateData* internal_default_instance() {
    return reinterpret_cast<const HDRequest_ReturnRateData*>(
               &_HDRequest_ReturnRateData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(HDRequest_ReturnRateData* other);
  friend void swap(HDRequest_ReturnRateData& a, HDRequest_ReturnRateData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDRequest_ReturnRateData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDRequest_ReturnRateData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDRequest_ReturnRateData& from);
  void MergeFrom(const HDRequest_ReturnRateData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDRequest_ReturnRateData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool occupancy = 1;
  void clear_occupancy();
  static const int kOccupancyFieldNumber = 1;
  bool occupancy() const;
  void set_occupancy(bool value);

  // bool status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  bool status() const;
  void set_status(bool value);

  // bool rateType = 3;
  void clear_ratetype();
  static const int kRateTypeFieldNumber = 3;
  bool ratetype() const;
  void set_ratetype(bool value);

  // bool paymentMode = 4;
  void clear_paymentmode();
  static const int kPaymentModeFieldNumber = 4;
  bool paymentmode() const;
  void set_paymentmode(bool value);

  // bool allowsExtraMeals = 5;
  void clear_allowsextrameals();
  static const int kAllowsExtraMealsFieldNumber = 5;
  bool allowsextrameals() const;
  void set_allowsextrameals(bool value);

  // bool allowsSpecialRequests = 6;
  void clear_allowsspecialrequests();
  static const int kAllowsSpecialRequestsFieldNumber = 6;
  bool allowsspecialrequests() const;
  void set_allowsspecialrequests(bool value);

  // bool allowsBeddingPreference = 7;
  void clear_allowsbeddingpreference();
  static const int kAllowsBeddingPreferenceFieldNumber = 7;
  bool allowsbeddingpreference() const;
  void set_allowsbeddingpreference(bool value);

  // bool allowsSpecials = 8;
  void clear_allowsspecials();
  static const int kAllowsSpecialsFieldNumber = 8;
  bool allowsspecials() const;
  void set_allowsspecials(bool value);

  // bool passengerNamesRequiredForBooking = 9;
  void clear_passengernamesrequiredforbooking();
  static const int kPassengerNamesRequiredForBookingFieldNumber = 9;
  bool passengernamesrequiredforbooking() const;
  void set_passengernamesrequiredforbooking(bool value);

  // bool allocationDetails = 10;
  void clear_allocationdetails();
  static const int kAllocationDetailsFieldNumber = 10;
  bool allocationdetails() const;
  void set_allocationdetails(bool value);

  // bool minStay = 11;
  void clear_minstay();
  static const int kMinStayFieldNumber = 11;
  bool minstay() const;
  void set_minstay(bool value);

  // bool dateApplyMinStay = 12;
  void clear_dateapplyminstay();
  static const int kDateApplyMinStayFieldNumber = 12;
  bool dateapplyminstay() const;
  void set_dateapplyminstay(bool value);

  // bool cancellationRules = 13;
  void clear_cancellationrules();
  static const int kCancellationRulesFieldNumber = 13;
  bool cancellationrules() const;
  void set_cancellationrules(bool value);

  // bool withinCancellationDeadline = 14;
  void clear_withincancellationdeadline();
  static const int kWithinCancellationDeadlineFieldNumber = 14;
  bool withincancellationdeadline() const;
  void set_withincancellationdeadline(bool value);

  // bool tariffNotes = 15;
  void clear_tariffnotes();
  static const int kTariffNotesFieldNumber = 15;
  bool tariffnotes() const;
  void set_tariffnotes(bool value);

  // bool isBookable = 16;
  void clear_isbookable();
  static const int kIsBookableFieldNumber = 16;
  bool isbookable() const;
  void set_isbookable(bool value);

  // bool onRequest = 17;
  void clear_onrequest();
  static const int kOnRequestFieldNumber = 17;
  bool onrequest() const;
  void set_onrequest(bool value);

  // bool total = 18;
  void clear_total();
  static const int kTotalFieldNumber = 18;
  bool total() const;
  void set_total(bool value);

  // bool dates = 19;
  void clear_dates();
  static const int kDatesFieldNumber = 19;
  bool dates() const;
  void set_dates(bool value);

  // bool freeStay = 20;
  void clear_freestay();
  static const int kFreeStayFieldNumber = 20;
  bool freestay() const;
  void set_freestay(bool value);

  // bool discount = 21;
  void clear_discount();
  static const int kDiscountFieldNumber = 21;
  bool discount() const;
  void set_discount(bool value);

  // bool dayOnRequest = 22;
  void clear_dayonrequest();
  static const int kDayOnRequestFieldNumber = 22;
  bool dayonrequest() const;
  void set_dayonrequest(bool value);

  // bool including = 23;
  void clear_including();
  static const int kIncludingFieldNumber = 23;
  bool including() const;
  void set_including(bool value);

  // bool dailyLeftToSell = 24;
  void clear_dailylefttosell();
  static const int kDailyLeftToSellFieldNumber = 24;
  bool dailylefttosell() const;
  void set_dailylefttosell(bool value);

  // bool dailyMinStay = 25;
  void clear_dailyminstay();
  static const int kDailyMinStayFieldNumber = 25;
  bool dailyminstay() const;
  void set_dailyminstay(bool value);

  // bool leftToSell = 26;
  void clear_lefttosell();
  static const int kLeftToSellFieldNumber = 26;
  bool lefttosell() const;
  void set_lefttosell(bool value);

  // bool specials = 27;
  void clear_specials();
  static const int kSpecialsFieldNumber = 27;
  bool specials() const;
  void set_specials(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDRequest.ReturnRateData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool occupancy_;
  bool status_;
  bool ratetype_;
  bool paymentmode_;
  bool allowsextrameals_;
  bool allowsspecialrequests_;
  bool allowsbeddingpreference_;
  bool allowsspecials_;
  bool passengernamesrequiredforbooking_;
  bool allocationdetails_;
  bool minstay_;
  bool dateapplyminstay_;
  bool cancellationrules_;
  bool withincancellationdeadline_;
  bool tariffnotes_;
  bool isbookable_;
  bool onrequest_;
  bool total_;
  bool dates_;
  bool freestay_;
  bool discount_;
  bool dayonrequest_;
  bool including_;
  bool dailylefttosell_;
  bool dailyminstay_;
  bool lefttosell_;
  bool specials_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDRequest_ReturnRateDataImpl();
};
// -------------------------------------------------------------------

class HDRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDRequest) */ {
 public:
  HDRequest();
  virtual ~HDRequest();

  HDRequest(const HDRequest& from);

  inline HDRequest& operator=(const HDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDRequest(HDRequest&& from) noexcept
    : HDRequest() {
    *this = ::std::move(from);
  }

  inline HDRequest& operator=(HDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDRequest* internal_default_instance() {
    return reinterpret_cast<const HDRequest*>(
               &_HDRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(HDRequest* other);
  friend void swap(HDRequest& a, HDRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  HDRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDRequest& from);
  void MergeFrom(const HDRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HDRequest_HotelIds HotelIds;
  typedef HDRequest_ReturnHotelStaticData ReturnHotelStaticData;
  typedef HDRequest_ReturnRoomTypeStaticData ReturnRoomTypeStaticData;
  typedef HDRequest_ReturnRateData ReturnRateData;

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.HDRequest.HotelIds hotelIds = 2;
  int hotelids_size() const;
  void clear_hotelids();
  static const int kHotelIdsFieldNumber = 2;
  const ::protobuffer::dotwproto::HDRequest_HotelIds& hotelids(int index) const;
  ::protobuffer::dotwproto::HDRequest_HotelIds* mutable_hotelids(int index);
  ::protobuffer::dotwproto::HDRequest_HotelIds* add_hotelids();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDRequest_HotelIds >*
      mutable_hotelids();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDRequest_HotelIds >&
      hotelids() const;

  // string hotelDataRequest = 1;
  void clear_hoteldatarequest();
  static const int kHotelDataRequestFieldNumber = 1;
  const ::std::string& hoteldatarequest() const;
  void set_hoteldatarequest(const ::std::string& value);
  #if LANG_CXX11
  void set_hoteldatarequest(::std::string&& value);
  #endif
  void set_hoteldatarequest(const char* value);
  void set_hoteldatarequest(const char* value, size_t size);
  ::std::string* mutable_hoteldatarequest();
  ::std::string* release_hoteldatarequest();
  void set_allocated_hoteldatarequest(::std::string* hoteldatarequest);

  // .protobuffer.dotwproto.HDRequest.ReturnHotelStaticData returnHotelStaticData = 3;
  bool has_returnhotelstaticdata() const;
  void clear_returnhotelstaticdata();
  static const int kReturnHotelStaticDataFieldNumber = 3;
  const ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData& returnhotelstaticdata() const;
  ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* release_returnhotelstaticdata();
  ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* mutable_returnhotelstaticdata();
  void set_allocated_returnhotelstaticdata(::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* returnhotelstaticdata);

  // .protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData returnRoomTypeStaticData = 4;
  bool has_returnroomtypestaticdata() const;
  void clear_returnroomtypestaticdata();
  static const int kReturnRoomTypeStaticDataFieldNumber = 4;
  const ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData& returnroomtypestaticdata() const;
  ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* release_returnroomtypestaticdata();
  ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* mutable_returnroomtypestaticdata();
  void set_allocated_returnroomtypestaticdata(::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* returnroomtypestaticdata);

  // .protobuffer.dotwproto.HDRequest.ReturnRateData returnRateData = 5;
  bool has_returnratedata() const;
  void clear_returnratedata();
  static const int kReturnRateDataFieldNumber = 5;
  const ::protobuffer::dotwproto::HDRequest_ReturnRateData& returnratedata() const;
  ::protobuffer::dotwproto::HDRequest_ReturnRateData* release_returnratedata();
  ::protobuffer::dotwproto::HDRequest_ReturnRateData* mutable_returnratedata();
  void set_allocated_returnratedata(::protobuffer::dotwproto::HDRequest_ReturnRateData* returnratedata);

  // int32 languageId = 6;
  void clear_languageid();
  static const int kLanguageIdFieldNumber = 6;
  ::google::protobuf::int32 languageid() const;
  void set_languageid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDRequest_HotelIds > hotelids_;
  ::google::protobuf::internal::ArenaStringPtr hoteldatarequest_;
  ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* returnhotelstaticdata_;
  ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* returnroomtypestaticdata_;
  ::protobuffer::dotwproto::HDRequest_ReturnRateData* returnratedata_;
  ::google::protobuf::int32 languageid_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDRequestImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData_RoomName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData_RoomName();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData_RoomName();

  HDReply_HotelStaticData_RoomTypeStaticData_RoomName(const HDReply_HotelStaticData_RoomTypeStaticData_RoomName& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomName& operator=(const HDReply_HotelStaticData_RoomTypeStaticData_RoomName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData_RoomName(HDReply_HotelStaticData_RoomTypeStaticData_RoomName&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData_RoomName() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomName& operator=(HDReply_HotelStaticData_RoomTypeStaticData_RoomName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData_RoomName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData_RoomName* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData_RoomName*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_RoomName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomName* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomName& a, HDReply_HotelStaticData_RoomTypeStaticData_RoomName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomName* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData_RoomName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomName& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData_RoomName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomCode = 1;
  void clear_roomcode();
  static const int kRoomCodeFieldNumber = 1;
  const ::std::string& roomcode() const;
  void set_roomcode(const ::std::string& value);
  #if LANG_CXX11
  void set_roomcode(::std::string&& value);
  #endif
  void set_roomcode(const char* value);
  void set_roomcode(const char* value, size_t size);
  ::std::string* mutable_roomcode();
  ::std::string* release_roomcode();
  void set_allocated_roomcode(::std::string* roomcode);

  // string roomName = 2;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  #if LANG_CXX11
  void set_roomname(::std::string&& value);
  #endif
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roomcode_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNameImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData_RoomNames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData_RoomNames();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData_RoomNames();

  HDReply_HotelStaticData_RoomTypeStaticData_RoomNames(const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& operator=(const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData_RoomNames(HDReply_HotelStaticData_RoomTypeStaticData_RoomNames&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData_RoomNames() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& operator=(HDReply_HotelStaticData_RoomTypeStaticData_RoomNames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_RoomNames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& a, HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName roomName = 2;
  int roomname_size() const;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 2;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName& roomname(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName* mutable_roomname(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName* add_roomname();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName >*
      mutable_roomname();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName >&
      roomname() const;

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName > roomname_;
  ::google::protobuf::int32 key_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomNamesImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName();

  HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName(const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& operator=(const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName(HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& operator=(HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& a, HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames roomNames = 1;
  int roomnames_size() const;
  void clear_roomnames();
  static const int kRoomNamesFieldNumber = 1;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& roomnames(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* mutable_roomnames(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* add_roomnames();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames >*
      mutable_roomnames();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames >&
      roomnames() const;

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames > roomnames_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomNameImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo();

  HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo(const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& operator=(const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo(HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& operator=(HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& a, HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 maxOccupancy = 1;
  void clear_maxoccupancy();
  static const int kMaxOccupancyFieldNumber = 1;
  ::google::protobuf::int32 maxoccupancy() const;
  void set_maxoccupancy(::google::protobuf::int32 value);

  // int32 maxAdultWithChildren = 2;
  void clear_maxadultwithchildren();
  static const int kMaxAdultWithChildrenFieldNumber = 2;
  ::google::protobuf::int32 maxadultwithchildren() const;
  void set_maxadultwithchildren(::google::protobuf::int32 value);

  // int32 minChildAge = 3;
  void clear_minchildage();
  static const int kMinChildAgeFieldNumber = 3;
  ::google::protobuf::int32 minchildage() const;
  void set_minchildage(::google::protobuf::int32 value);

  // int32 maxChildAge = 4;
  void clear_maxchildage();
  static const int kMaxChildAgeFieldNumber = 4;
  ::google::protobuf::int32 maxchildage() const;
  void set_maxchildage(::google::protobuf::int32 value);

  // int32 maxAdult = 5;
  void clear_maxadult();
  static const int kMaxAdultFieldNumber = 5;
  ::google::protobuf::int32 maxadult() const;
  void set_maxadult(::google::protobuf::int32 value);

  // bool maxExtraBed = 6;
  void clear_maxextrabed();
  static const int kMaxExtraBedFieldNumber = 6;
  bool maxextrabed() const;
  void set_maxextrabed(bool value);

  // int32 maxChildren = 7;
  void clear_maxchildren();
  static const int kMaxChildrenFieldNumber = 7;
  ::google::protobuf::int32 maxchildren() const;
  void set_maxchildren(::google::protobuf::int32 value);

  // int32 children = 8;
  void clear_children();
  static const int kChildrenFieldNumber = 8;
  ::google::protobuf::int32 children() const;
  void set_children(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 maxoccupancy_;
  ::google::protobuf::int32 maxadultwithchildren_;
  ::google::protobuf::int32 minchildage_;
  ::google::protobuf::int32 maxchildage_;
  ::google::protobuf::int32 maxadult_;
  bool maxextrabed_;
  ::google::protobuf::int32 maxchildren_;
  ::google::protobuf::int32 children_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomInfoImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory();

  HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory(const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& operator=(const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory(HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& operator=(HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& a, HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticData_RoomCategoryImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_RoomTypeStaticData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData) */ {
 public:
  HDReply_HotelStaticData_RoomTypeStaticData();
  virtual ~HDReply_HotelStaticData_RoomTypeStaticData();

  HDReply_HotelStaticData_RoomTypeStaticData(const HDReply_HotelStaticData_RoomTypeStaticData& from);

  inline HDReply_HotelStaticData_RoomTypeStaticData& operator=(const HDReply_HotelStaticData_RoomTypeStaticData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_RoomTypeStaticData(HDReply_HotelStaticData_RoomTypeStaticData&& from) noexcept
    : HDReply_HotelStaticData_RoomTypeStaticData() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_RoomTypeStaticData& operator=(HDReply_HotelStaticData_RoomTypeStaticData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_RoomTypeStaticData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_RoomTypeStaticData* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_RoomTypeStaticData*>(
               &_HDReply_HotelStaticData_RoomTypeStaticData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(HDReply_HotelStaticData_RoomTypeStaticData* other);
  friend void swap(HDReply_HotelStaticData_RoomTypeStaticData& a, HDReply_HotelStaticData_RoomTypeStaticData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_RoomTypeStaticData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_RoomTypeStaticData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_RoomTypeStaticData& from);
  void MergeFrom(const HDReply_HotelStaticData_RoomTypeStaticData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_RoomTypeStaticData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HDReply_HotelStaticData_RoomTypeStaticData_RoomName RoomName;
  typedef HDReply_HotelStaticData_RoomTypeStaticData_RoomNames RoomNames;
  typedef HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName SupplierRoomName;
  typedef HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo RoomInfo;
  typedef HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory RoomCategory;

  // accessors -------------------------------------------------------

  // repeated string roomAmenities = 3;
  int roomamenities_size() const;
  void clear_roomamenities();
  static const int kRoomAmenitiesFieldNumber = 3;
  const ::std::string& roomamenities(int index) const;
  ::std::string* mutable_roomamenities(int index);
  void set_roomamenities(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_roomamenities(int index, ::std::string&& value);
  #endif
  void set_roomamenities(int index, const char* value);
  void set_roomamenities(int index, const char* value, size_t size);
  ::std::string* add_roomamenities();
  void add_roomamenities(const ::std::string& value);
  #if LANG_CXX11
  void add_roomamenities(::std::string&& value);
  #endif
  void add_roomamenities(const char* value);
  void add_roomamenities(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& roomamenities() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_roomamenities();

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName supplierRoomName = 5;
  int supplierroomname_size() const;
  void clear_supplierroomname();
  static const int kSupplierRoomNameFieldNumber = 5;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& supplierroomname(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* mutable_supplierroomname(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* add_supplierroomname();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName >*
      mutable_supplierroomname();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName >&
      supplierroomname() const;

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo roomInfo = 6;
  int roominfo_size() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 6;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& roominfo(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* mutable_roominfo(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* add_roominfo();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo >*
      mutable_roominfo();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo >&
      roominfo() const;

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory roomCategory = 7;
  int roomcategory_size() const;
  void clear_roomcategory();
  static const int kRoomCategoryFieldNumber = 7;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& roomcategory(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* mutable_roomcategory(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* add_roomcategory();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory >*
      mutable_roomcategory();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory >&
      roomcategory() const;

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // bool twin = 2;
  void clear_twin();
  static const int kTwinFieldNumber = 2;
  bool twin() const;
  void set_twin(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> roomamenities_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName > supplierroomname_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo > roominfo_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory > roomcategory_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 key_;
  bool twin_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_RoomTypeStaticDataImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_ImagesData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData) */ {
 public:
  HDReply_HotelStaticData_ImagesData();
  virtual ~HDReply_HotelStaticData_ImagesData();

  HDReply_HotelStaticData_ImagesData(const HDReply_HotelStaticData_ImagesData& from);

  inline HDReply_HotelStaticData_ImagesData& operator=(const HDReply_HotelStaticData_ImagesData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_ImagesData(HDReply_HotelStaticData_ImagesData&& from) noexcept
    : HDReply_HotelStaticData_ImagesData() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_ImagesData& operator=(HDReply_HotelStaticData_ImagesData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_ImagesData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_ImagesData* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_ImagesData*>(
               &_HDReply_HotelStaticData_ImagesData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(HDReply_HotelStaticData_ImagesData* other);
  friend void swap(HDReply_HotelStaticData_ImagesData& a, HDReply_HotelStaticData_ImagesData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_ImagesData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_ImagesData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_ImagesData& from);
  void MergeFrom(const HDReply_HotelStaticData_ImagesData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_ImagesData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string thumb = 1;
  void clear_thumb();
  static const int kThumbFieldNumber = 1;
  const ::std::string& thumb() const;
  void set_thumb(const ::std::string& value);
  #if LANG_CXX11
  void set_thumb(::std::string&& value);
  #endif
  void set_thumb(const char* value);
  void set_thumb(const char* value, size_t size);
  ::std::string* mutable_thumb();
  ::std::string* release_thumb();
  void set_allocated_thumb(::std::string* thumb);

  // string alt = 2;
  void clear_alt();
  static const int kAltFieldNumber = 2;
  const ::std::string& alt() const;
  void set_alt(const ::std::string& value);
  #if LANG_CXX11
  void set_alt(::std::string&& value);
  #endif
  void set_alt(const char* value);
  void set_alt(const char* value, size_t size);
  ::std::string* mutable_alt();
  ::std::string* release_alt();
  void set_allocated_alt(::std::string* alt);

  // string category = 3;
  void clear_category();
  static const int kCategoryFieldNumber = 3;
  const ::std::string& category() const;
  void set_category(const ::std::string& value);
  #if LANG_CXX11
  void set_category(::std::string&& value);
  #endif
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  ::std::string* mutable_category();
  ::std::string* release_category();
  void set_allocated_category(::std::string* category);

  // string url = 4;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // int32 roomTypeId = 5;
  void clear_roomtypeid();
  static const int kRoomTypeIdFieldNumber = 5;
  ::google::protobuf::int32 roomtypeid() const;
  void set_roomtypeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr thumb_;
  ::google::protobuf::internal::ArenaStringPtr alt_;
  ::google::protobuf::internal::ArenaStringPtr category_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::int32 roomtypeid_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_ImagesDataImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData_TransportationData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData) */ {
 public:
  HDReply_HotelStaticData_TransportationData();
  virtual ~HDReply_HotelStaticData_TransportationData();

  HDReply_HotelStaticData_TransportationData(const HDReply_HotelStaticData_TransportationData& from);

  inline HDReply_HotelStaticData_TransportationData& operator=(const HDReply_HotelStaticData_TransportationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData_TransportationData(HDReply_HotelStaticData_TransportationData&& from) noexcept
    : HDReply_HotelStaticData_TransportationData() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData_TransportationData& operator=(HDReply_HotelStaticData_TransportationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData_TransportationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData_TransportationData* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData_TransportationData*>(
               &_HDReply_HotelStaticData_TransportationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(HDReply_HotelStaticData_TransportationData* other);
  friend void swap(HDReply_HotelStaticData_TransportationData& a, HDReply_HotelStaticData_TransportationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData_TransportationData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData_TransportationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData_TransportationData& from);
  void MergeFrom(const HDReply_HotelStaticData_TransportationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData_TransportationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string dist = 3;
  void clear_dist();
  static const int kDistFieldNumber = 3;
  const ::std::string& dist() const;
  void set_dist(const ::std::string& value);
  #if LANG_CXX11
  void set_dist(::std::string&& value);
  #endif
  void set_dist(const char* value);
  void set_dist(const char* value, size_t size);
  ::std::string* mutable_dist();
  ::std::string* release_dist();
  void set_allocated_dist(::std::string* dist);

  // string distanceUnit = 4;
  void clear_distanceunit();
  static const int kDistanceUnitFieldNumber = 4;
  const ::std::string& distanceunit() const;
  void set_distanceunit(const ::std::string& value);
  #if LANG_CXX11
  void set_distanceunit(::std::string&& value);
  #endif
  void set_distanceunit(const char* value);
  void set_distanceunit(const char* value, size_t size);
  ::std::string* mutable_distanceunit();
  ::std::string* release_distanceunit();
  void set_allocated_distanceunit(::std::string* distanceunit);

  // string distTime = 5;
  void clear_disttime();
  static const int kDistTimeFieldNumber = 5;
  const ::std::string& disttime() const;
  void set_disttime(const ::std::string& value);
  #if LANG_CXX11
  void set_disttime(::std::string&& value);
  #endif
  void set_disttime(const char* value);
  void set_disttime(const char* value, size_t size);
  ::std::string* mutable_disttime();
  ::std::string* release_disttime();
  void set_allocated_disttime(::std::string* disttime);

  // string directions = 6;
  void clear_directions();
  static const int kDirectionsFieldNumber = 6;
  const ::std::string& directions() const;
  void set_directions(const ::std::string& value);
  #if LANG_CXX11
  void set_directions(::std::string&& value);
  #endif
  void set_directions(const char* value);
  void set_directions(const char* value, size_t size);
  ::std::string* mutable_directions();
  ::std::string* release_directions();
  void set_allocated_directions(::std::string* directions);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr dist_;
  ::google::protobuf::internal::ArenaStringPtr distanceunit_;
  ::google::protobuf::internal::ArenaStringPtr disttime_;
  ::google::protobuf::internal::ArenaStringPtr directions_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticData_TransportationDataImpl();
};
// -------------------------------------------------------------------

class HDReply_HotelStaticData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply.HotelStaticData) */ {
 public:
  HDReply_HotelStaticData();
  virtual ~HDReply_HotelStaticData();

  HDReply_HotelStaticData(const HDReply_HotelStaticData& from);

  inline HDReply_HotelStaticData& operator=(const HDReply_HotelStaticData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply_HotelStaticData(HDReply_HotelStaticData&& from) noexcept
    : HDReply_HotelStaticData() {
    *this = ::std::move(from);
  }

  inline HDReply_HotelStaticData& operator=(HDReply_HotelStaticData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply_HotelStaticData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply_HotelStaticData* internal_default_instance() {
    return reinterpret_cast<const HDReply_HotelStaticData*>(
               &_HDReply_HotelStaticData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(HDReply_HotelStaticData* other);
  friend void swap(HDReply_HotelStaticData& a, HDReply_HotelStaticData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply_HotelStaticData* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply_HotelStaticData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply_HotelStaticData& from);
  void MergeFrom(const HDReply_HotelStaticData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply_HotelStaticData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HDReply_HotelStaticData_RoomTypeStaticData RoomTypeStaticData;
  typedef HDReply_HotelStaticData_ImagesData ImagesData;
  typedef HDReply_HotelStaticData_TransportationData TransportationData;

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData roomTypeStaticDataList = 2;
  int roomtypestaticdatalist_size() const;
  void clear_roomtypestaticdatalist();
  static const int kRoomTypeStaticDataListFieldNumber = 2;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData& roomtypestaticdatalist(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData* mutable_roomtypestaticdatalist(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData* add_roomtypestaticdatalist();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData >*
      mutable_roomtypestaticdatalist();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData >&
      roomtypestaticdatalist() const;

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData images = 7;
  int images_size() const;
  void clear_images();
  static const int kImagesFieldNumber = 7;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData& images(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData* mutable_images(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData* add_images();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData >*
      mutable_images();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData >&
      images() const;

  // repeated int32 hotelPreference = 9;
  int hotelpreference_size() const;
  void clear_hotelpreference();
  static const int kHotelPreferenceFieldNumber = 9;
  ::google::protobuf::int32 hotelpreference(int index) const;
  void set_hotelpreference(int index, ::google::protobuf::int32 value);
  void add_hotelpreference(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      hotelpreference() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_hotelpreference();

  // repeated string amenitie = 32;
  int amenitie_size() const;
  void clear_amenitie();
  static const int kAmenitieFieldNumber = 32;
  const ::std::string& amenitie(int index) const;
  ::std::string* mutable_amenitie(int index);
  void set_amenitie(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_amenitie(int index, ::std::string&& value);
  #endif
  void set_amenitie(int index, const char* value);
  void set_amenitie(int index, const char* value, size_t size);
  ::std::string* add_amenitie();
  void add_amenitie(const ::std::string& value);
  #if LANG_CXX11
  void add_amenitie(::std::string&& value);
  #endif
  void add_amenitie(const char* value);
  void add_amenitie(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& amenitie() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_amenitie();

  // repeated string leisure = 33;
  int leisure_size() const;
  void clear_leisure();
  static const int kLeisureFieldNumber = 33;
  const ::std::string& leisure(int index) const;
  ::std::string* mutable_leisure(int index);
  void set_leisure(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_leisure(int index, ::std::string&& value);
  #endif
  void set_leisure(int index, const char* value);
  void set_leisure(int index, const char* value, size_t size);
  ::std::string* add_leisure();
  void add_leisure(const ::std::string& value);
  #if LANG_CXX11
  void add_leisure(::std::string&& value);
  #endif
  void add_leisure(const char* value);
  void add_leisure(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& leisure() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_leisure();

  // repeated string business = 34;
  int business_size() const;
  void clear_business();
  static const int kBusinessFieldNumber = 34;
  const ::std::string& business(int index) const;
  ::std::string* mutable_business(int index);
  void set_business(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_business(int index, ::std::string&& value);
  #endif
  void set_business(int index, const char* value);
  void set_business(int index, const char* value, size_t size);
  ::std::string* add_business();
  void add_business(const ::std::string& value);
  #if LANG_CXX11
  void add_business(::std::string&& value);
  #endif
  void add_business(const char* value);
  void add_business(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& business() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_business();

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData transportation = 35;
  int transportation_size() const;
  void clear_transportation();
  static const int kTransportationFieldNumber = 35;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData& transportation(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData* mutable_transportation(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData* add_transportation();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData >*
      mutable_transportation();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData >&
      transportation() const;

  // string description1 = 3;
  void clear_description1();
  static const int kDescription1FieldNumber = 3;
  const ::std::string& description1() const;
  void set_description1(const ::std::string& value);
  #if LANG_CXX11
  void set_description1(::std::string&& value);
  #endif
  void set_description1(const char* value);
  void set_description1(const char* value, size_t size);
  ::std::string* mutable_description1();
  ::std::string* release_description1();
  void set_allocated_description1(::std::string* description1);

  // string description2 = 4;
  void clear_description2();
  static const int kDescription2FieldNumber = 4;
  const ::std::string& description2() const;
  void set_description2(const ::std::string& value);
  #if LANG_CXX11
  void set_description2(::std::string&& value);
  #endif
  void set_description2(const char* value);
  void set_description2(const char* value, size_t size);
  ::std::string* mutable_description2();
  ::std::string* release_description2();
  void set_allocated_description2(::std::string* description2);

  // string geoPoint = 5;
  void clear_geopoint();
  static const int kGeoPointFieldNumber = 5;
  const ::std::string& geopoint() const;
  void set_geopoint(const ::std::string& value);
  #if LANG_CXX11
  void set_geopoint(::std::string&& value);
  #endif
  void set_geopoint(const char* value);
  void set_geopoint(const char* value, size_t size);
  ::std::string* mutable_geopoint();
  ::std::string* release_geopoint();
  void set_allocated_geopoint(::std::string* geopoint);

  // string ratingDescription = 6;
  void clear_ratingdescription();
  static const int kRatingDescriptionFieldNumber = 6;
  const ::std::string& ratingdescription() const;
  void set_ratingdescription(const ::std::string& value);
  #if LANG_CXX11
  void set_ratingdescription(::std::string&& value);
  #endif
  void set_ratingdescription(const char* value);
  void set_ratingdescription(const char* value, size_t size);
  ::std::string* mutable_ratingdescription();
  ::std::string* release_ratingdescription();
  void set_allocated_ratingdescription(::std::string* ratingdescription);

  // string hotelName = 16;
  void clear_hotelname();
  static const int kHotelNameFieldNumber = 16;
  const ::std::string& hotelname() const;
  void set_hotelname(const ::std::string& value);
  #if LANG_CXX11
  void set_hotelname(::std::string&& value);
  #endif
  void set_hotelname(const char* value);
  void set_hotelname(const char* value, size_t size);
  ::std::string* mutable_hotelname();
  ::std::string* release_hotelname();
  void set_allocated_hotelname(::std::string* hotelname);

  // string address = 17;
  void clear_address();
  static const int kAddressFieldNumber = 17;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string zipCode = 18;
  void clear_zipcode();
  static const int kZipCodeFieldNumber = 18;
  const ::std::string& zipcode() const;
  void set_zipcode(const ::std::string& value);
  #if LANG_CXX11
  void set_zipcode(::std::string&& value);
  #endif
  void set_zipcode(const char* value);
  void set_zipcode(const char* value, size_t size);
  ::std::string* mutable_zipcode();
  ::std::string* release_zipcode();
  void set_allocated_zipcode(::std::string* zipcode);

  // string location = 19;
  void clear_location();
  static const int kLocationFieldNumber = 19;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string location1 = 21;
  void clear_location1();
  static const int kLocation1FieldNumber = 21;
  const ::std::string& location1() const;
  void set_location1(const ::std::string& value);
  #if LANG_CXX11
  void set_location1(::std::string&& value);
  #endif
  void set_location1(const char* value);
  void set_location1(const char* value, size_t size);
  ::std::string* mutable_location1();
  ::std::string* release_location1();
  void set_allocated_location1(::std::string* location1);

  // string location2 = 22;
  void clear_location2();
  static const int kLocation2FieldNumber = 22;
  const ::std::string& location2() const;
  void set_location2(const ::std::string& value);
  #if LANG_CXX11
  void set_location2(::std::string&& value);
  #endif
  void set_location2(const char* value);
  void set_location2(const char* value, size_t size);
  ::std::string* mutable_location2();
  ::std::string* release_location2();
  void set_allocated_location2(::std::string* location2);

  // string location3 = 23;
  void clear_location3();
  static const int kLocation3FieldNumber = 23;
  const ::std::string& location3() const;
  void set_location3(const ::std::string& value);
  #if LANG_CXX11
  void set_location3(::std::string&& value);
  #endif
  void set_location3(const char* value);
  void set_location3(const char* value, size_t size);
  ::std::string* mutable_location3();
  ::std::string* release_location3();
  void set_allocated_location3(::std::string* location3);

  // string cityName = 24;
  void clear_cityname();
  static const int kCityNameFieldNumber = 24;
  const ::std::string& cityname() const;
  void set_cityname(const ::std::string& value);
  #if LANG_CXX11
  void set_cityname(::std::string&& value);
  #endif
  void set_cityname(const char* value);
  void set_cityname(const char* value, size_t size);
  ::std::string* mutable_cityname();
  ::std::string* release_cityname();
  void set_allocated_cityname(::std::string* cityname);

  // string stateName = 26;
  void clear_statename();
  static const int kStateNameFieldNumber = 26;
  const ::std::string& statename() const;
  void set_statename(const ::std::string& value);
  #if LANG_CXX11
  void set_statename(::std::string&& value);
  #endif
  void set_statename(const char* value);
  void set_statename(const char* value, size_t size);
  ::std::string* mutable_statename();
  ::std::string* release_statename();
  void set_allocated_statename(::std::string* statename);

  // string countryName = 28;
  void clear_countryname();
  static const int kCountryNameFieldNumber = 28;
  const ::std::string& countryname() const;
  void set_countryname(const ::std::string& value);
  #if LANG_CXX11
  void set_countryname(::std::string&& value);
  #endif
  void set_countryname(const char* value);
  void set_countryname(const char* value, size_t size);
  ::std::string* mutable_countryname();
  ::std::string* release_countryname();
  void set_allocated_countryname(::std::string* countryname);

  // string regionName = 30;
  void clear_regionname();
  static const int kRegionNameFieldNumber = 30;
  const ::std::string& regionname() const;
  void set_regionname(const ::std::string& value);
  #if LANG_CXX11
  void set_regionname(::std::string&& value);
  #endif
  void set_regionname(const char* value);
  void set_regionname(const char* value, size_t size);
  ::std::string* mutable_regionname();
  ::std::string* release_regionname();
  void set_allocated_regionname(::std::string* regionname);

  // string hotelPhone = 36;
  void clear_hotelphone();
  static const int kHotelPhoneFieldNumber = 36;
  const ::std::string& hotelphone() const;
  void set_hotelphone(const ::std::string& value);
  #if LANG_CXX11
  void set_hotelphone(::std::string&& value);
  #endif
  void set_hotelphone(const char* value);
  void set_hotelphone(const char* value, size_t size);
  ::std::string* mutable_hotelphone();
  ::std::string* release_hotelphone();
  void set_allocated_hotelphone(::std::string* hotelphone);

  // string lastUpdated = 43;
  void clear_lastupdated();
  static const int kLastUpdatedFieldNumber = 43;
  const ::std::string& lastupdated() const;
  void set_lastupdated(const ::std::string& value);
  #if LANG_CXX11
  void set_lastupdated(::std::string&& value);
  #endif
  void set_lastupdated(const char* value);
  void set_lastupdated(const char* value, size_t size);
  ::std::string* mutable_lastupdated();
  ::std::string* release_lastupdated();
  void set_allocated_lastupdated(::std::string* lastupdated);

  // string tariffNotes = 45;
  void clear_tariffnotes();
  static const int kTariffNotesFieldNumber = 45;
  const ::std::string& tariffnotes() const;
  void set_tariffnotes(const ::std::string& value);
  #if LANG_CXX11
  void set_tariffnotes(::std::string&& value);
  #endif
  void set_tariffnotes(const char* value);
  void set_tariffnotes(const char* value, size_t size);
  ::std::string* mutable_tariffnotes();
  ::std::string* release_tariffnotes();
  void set_allocated_tariffnotes(::std::string* tariffnotes);

  // string chainName = 46;
  void clear_chainname();
  static const int kChainNameFieldNumber = 46;
  const ::std::string& chainname() const;
  void set_chainname(const ::std::string& value);
  #if LANG_CXX11
  void set_chainname(::std::string&& value);
  #endif
  void set_chainname(const char* value);
  void set_chainname(const char* value, size_t size);
  ::std::string* mutable_chainname();
  ::std::string* release_chainname();
  void set_allocated_chainname(::std::string* chainname);

  // string fullAddress = 48;
  void clear_fulladdress();
  static const int kFullAddressFieldNumber = 48;
  const ::std::string& fulladdress() const;
  void set_fulladdress(const ::std::string& value);
  #if LANG_CXX11
  void set_fulladdress(::std::string&& value);
  #endif
  void set_fulladdress(const char* value);
  void set_fulladdress(const char* value, size_t size);
  ::std::string* mutable_fulladdress();
  ::std::string* release_fulladdress();
  void set_allocated_fulladdress(::std::string* fulladdress);

  // string attraction = 49;
  void clear_attraction();
  static const int kAttractionFieldNumber = 49;
  const ::std::string& attraction() const;
  void set_attraction(const ::std::string& value);
  #if LANG_CXX11
  void set_attraction(::std::string&& value);
  #endif
  void set_attraction(const char* value);
  void set_attraction(const char* value, size_t size);
  ::std::string* mutable_attraction();
  ::std::string* release_attraction();
  void set_allocated_attraction(::std::string* attraction);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // int32 builtYear = 11;
  void clear_builtyear();
  static const int kBuiltYearFieldNumber = 11;
  ::google::protobuf::int32 builtyear() const;
  void set_builtyear(::google::protobuf::int32 value);

  // int32 renovationYear = 12;
  void clear_renovationyear();
  static const int kRenovationYearFieldNumber = 12;
  ::google::protobuf::int32 renovationyear() const;
  void set_renovationyear(::google::protobuf::int32 value);

  // int32 floors = 13;
  void clear_floors();
  static const int kFloorsFieldNumber = 13;
  ::google::protobuf::int32 floors() const;
  void set_floors(::google::protobuf::int32 value);

  // int32 noOfRooms = 14;
  void clear_noofrooms();
  static const int kNoOfRoomsFieldNumber = 14;
  ::google::protobuf::int32 noofrooms() const;
  void set_noofrooms(::google::protobuf::int32 value);

  // bool direct = 8;
  void clear_direct();
  static const int kDirectFieldNumber = 8;
  bool direct() const;
  void set_direct(bool value);

  // bool preferred = 10;
  void clear_preferred();
  static const int kPreferredFieldNumber = 10;
  bool preferred() const;
  void set_preferred(bool value);

  // bool luxury = 15;
  void clear_luxury();
  static const int kLuxuryFieldNumber = 15;
  bool luxury() const;
  void set_luxury(bool value);

  // bool fireSafety = 41;
  void clear_firesafety();
  static const int kFireSafetyFieldNumber = 41;
  bool firesafety() const;
  void set_firesafety(bool value);

  // int32 locationId = 20;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 20;
  ::google::protobuf::int32 locationid() const;
  void set_locationid(::google::protobuf::int32 value);

  // int32 cityCode = 25;
  void clear_citycode();
  static const int kCityCodeFieldNumber = 25;
  ::google::protobuf::int32 citycode() const;
  void set_citycode(::google::protobuf::int32 value);

  // int32 stateCode = 27;
  void clear_statecode();
  static const int kStateCodeFieldNumber = 27;
  ::google::protobuf::int32 statecode() const;
  void set_statecode(::google::protobuf::int32 value);

  // int32 countryCode = 29;
  void clear_countrycode();
  static const int kCountryCodeFieldNumber = 29;
  ::google::protobuf::int32 countrycode() const;
  void set_countrycode(::google::protobuf::int32 value);

  // int32 regionCode = 31;
  void clear_regioncode();
  static const int kRegionCodeFieldNumber = 31;
  ::google::protobuf::int32 regioncode() const;
  void set_regioncode(::google::protobuf::int32 value);

  // int32 hotelCheckIn = 37;
  void clear_hotelcheckin();
  static const int kHotelCheckInFieldNumber = 37;
  ::google::protobuf::int32 hotelcheckin() const;
  void set_hotelcheckin(::google::protobuf::int32 value);

  // int32 hotelCheckOut = 38;
  void clear_hotelcheckout();
  static const int kHotelCheckOutFieldNumber = 38;
  ::google::protobuf::int32 hotelcheckout() const;
  void set_hotelcheckout(::google::protobuf::int32 value);

  // int32 minAge = 39;
  void clear_minage();
  static const int kMinAgeFieldNumber = 39;
  ::google::protobuf::int32 minage() const;
  void set_minage(::google::protobuf::int32 value);

  // int32 rating = 40;
  void clear_rating();
  static const int kRatingFieldNumber = 40;
  ::google::protobuf::int32 rating() const;
  void set_rating(::google::protobuf::int32 value);

  // int32 chain = 42;
  void clear_chain();
  static const int kChainFieldNumber = 42;
  ::google::protobuf::int32 chain() const;
  void set_chain(::google::protobuf::int32 value);

  // int32 transferMandatory = 44;
  void clear_transfermandatory();
  static const int kTransferMandatoryFieldNumber = 44;
  ::google::protobuf::int32 transfermandatory() const;
  void set_transfermandatory(::google::protobuf::int32 value);

  // int32 hotelProperty = 47;
  void clear_hotelproperty();
  static const int kHotelPropertyFieldNumber = 47;
  ::google::protobuf::int32 hotelproperty() const;
  void set_hotelproperty(::google::protobuf::int32 value);

  // bool exclusive = 50;
  void clear_exclusive();
  static const int kExclusiveFieldNumber = 50;
  bool exclusive() const;
  void set_exclusive(bool value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply.HotelStaticData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData > roomtypestaticdatalist_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData > images_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > hotelpreference_;
  mutable int _hotelpreference_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> amenitie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> leisure_;
  ::google::protobuf::RepeatedPtrField< ::std::string> business_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData > transportation_;
  ::google::protobuf::internal::ArenaStringPtr description1_;
  ::google::protobuf::internal::ArenaStringPtr description2_;
  ::google::protobuf::internal::ArenaStringPtr geopoint_;
  ::google::protobuf::internal::ArenaStringPtr ratingdescription_;
  ::google::protobuf::internal::ArenaStringPtr hotelname_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr zipcode_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr location1_;
  ::google::protobuf::internal::ArenaStringPtr location2_;
  ::google::protobuf::internal::ArenaStringPtr location3_;
  ::google::protobuf::internal::ArenaStringPtr cityname_;
  ::google::protobuf::internal::ArenaStringPtr statename_;
  ::google::protobuf::internal::ArenaStringPtr countryname_;
  ::google::protobuf::internal::ArenaStringPtr regionname_;
  ::google::protobuf::internal::ArenaStringPtr hotelphone_;
  ::google::protobuf::internal::ArenaStringPtr lastupdated_;
  ::google::protobuf::internal::ArenaStringPtr tariffnotes_;
  ::google::protobuf::internal::ArenaStringPtr chainname_;
  ::google::protobuf::internal::ArenaStringPtr fulladdress_;
  ::google::protobuf::internal::ArenaStringPtr attraction_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 builtyear_;
  ::google::protobuf::int32 renovationyear_;
  ::google::protobuf::int32 floors_;
  ::google::protobuf::int32 noofrooms_;
  bool direct_;
  bool preferred_;
  bool luxury_;
  bool firesafety_;
  ::google::protobuf::int32 locationid_;
  ::google::protobuf::int32 citycode_;
  ::google::protobuf::int32 statecode_;
  ::google::protobuf::int32 countrycode_;
  ::google::protobuf::int32 regioncode_;
  ::google::protobuf::int32 hotelcheckin_;
  ::google::protobuf::int32 hotelcheckout_;
  ::google::protobuf::int32 minage_;
  ::google::protobuf::int32 rating_;
  ::google::protobuf::int32 chain_;
  ::google::protobuf::int32 transfermandatory_;
  ::google::protobuf::int32 hotelproperty_;
  bool exclusive_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReply_HotelStaticDataImpl();
};
// -------------------------------------------------------------------

class HDReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobuffer.dotwproto.HDReply) */ {
 public:
  HDReply();
  virtual ~HDReply();

  HDReply(const HDReply& from);

  inline HDReply& operator=(const HDReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HDReply(HDReply&& from) noexcept
    : HDReply() {
    *this = ::std::move(from);
  }

  inline HDReply& operator=(HDReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HDReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HDReply* internal_default_instance() {
    return reinterpret_cast<const HDReply*>(
               &_HDReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(HDReply* other);
  friend void swap(HDReply& a, HDReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HDReply* New() const PROTOBUF_FINAL { return New(NULL); }

  HDReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HDReply& from);
  void MergeFrom(const HDReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HDReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HDReply_HotelStaticData HotelStaticData;

  // accessors -------------------------------------------------------

  // repeated .protobuffer.dotwproto.HDReply.HotelStaticData hotelStaticDataList = 2;
  int hotelstaticdatalist_size() const;
  void clear_hotelstaticdatalist();
  static const int kHotelStaticDataListFieldNumber = 2;
  const ::protobuffer::dotwproto::HDReply_HotelStaticData& hotelstaticdatalist(int index) const;
  ::protobuffer::dotwproto::HDReply_HotelStaticData* mutable_hotelstaticdatalist(int index);
  ::protobuffer::dotwproto::HDReply_HotelStaticData* add_hotelstaticdatalist();
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData >*
      mutable_hotelstaticdatalist();
  const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData >&
      hotelstaticdatalist() const;

  // string error = 3;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // string errorCode = 4;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 4;
  const ::std::string& errorcode() const;
  void set_errorcode(const ::std::string& value);
  #if LANG_CXX11
  void set_errorcode(::std::string&& value);
  #endif
  void set_errorcode(const char* value);
  void set_errorcode(const char* value, size_t size);
  ::std::string* mutable_errorcode();
  ::std::string* release_errorcode();
  void set_allocated_errorcode(::std::string* errorcode);

  // string replystring = 5;
  void clear_replystring();
  static const int kReplystringFieldNumber = 5;
  const ::std::string& replystring() const;
  void set_replystring(const ::std::string& value);
  #if LANG_CXX11
  void set_replystring(::std::string&& value);
  #endif
  void set_replystring(const char* value);
  void set_replystring(const char* value, size_t size);
  ::std::string* mutable_replystring();
  ::std::string* release_replystring();
  void set_allocated_replystring(::std::string* replystring);

  // int32 key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  ::google::protobuf::int32 key() const;
  void set_key(::google::protobuf::int32 value);

  // int32 replystringInt = 6;
  void clear_replystringint();
  static const int kReplystringIntFieldNumber = 6;
  ::google::protobuf::int32 replystringint() const;
  void set_replystringint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protobuffer.dotwproto.HDReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData > hotelstaticdatalist_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr errorcode_;
  ::google::protobuf::internal::ArenaStringPtr replystring_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 replystringint_;
  mutable int _cached_size_;
  friend struct ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::TableStruct;
  friend void ::protobuf_genProto_2fDotw_5fProtoBuf_2eproto::InitDefaultsHDReplyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PSFRequest_RoomOccupancy

// int32 adults = 1;
inline void PSFRequest_RoomOccupancy::clear_adults() {
  adults_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomOccupancy::adults() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomOccupancy.adults)
  return adults_;
}
inline void PSFRequest_RoomOccupancy::set_adults(::google::protobuf::int32 value) {
  
  adults_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomOccupancy.adults)
}

// repeated int32 children = 2;
inline int PSFRequest_RoomOccupancy::children_size() const {
  return children_.size();
}
inline void PSFRequest_RoomOccupancy::clear_children() {
  children_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_RoomOccupancy::children(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomOccupancy.children)
  return children_.Get(index);
}
inline void PSFRequest_RoomOccupancy::set_children(int index, ::google::protobuf::int32 value) {
  children_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomOccupancy.children)
}
inline void PSFRequest_RoomOccupancy::add_children(::google::protobuf::int32 value) {
  children_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.RoomOccupancy.children)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_RoomOccupancy::children() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.RoomOccupancy.children)
  return children_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_RoomOccupancy::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.RoomOccupancy.children)
  return &children_;
}

// bool twin = 3;
inline void PSFRequest_RoomOccupancy::clear_twin() {
  twin_ = false;
}
inline bool PSFRequest_RoomOccupancy::twin() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomOccupancy.twin)
  return twin_;
}
inline void PSFRequest_RoomOccupancy::set_twin(bool value) {
  
  twin_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomOccupancy.twin)
}

// bool extraBed = 4;
inline void PSFRequest_RoomOccupancy::clear_extrabed() {
  extrabed_ = false;
}
inline bool PSFRequest_RoomOccupancy::extrabed() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomOccupancy.extraBed)
  return extrabed_;
}
inline void PSFRequest_RoomOccupancy::set_extrabed(bool value) {
  
  extrabed_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomOccupancy.extraBed)
}

// -------------------------------------------------------------------

// PSFRequest_HotelFilters

// repeated int32 rating = 1;
inline int PSFRequest_HotelFilters::rating_size() const {
  return rating_.size();
}
inline void PSFRequest_HotelFilters::clear_rating() {
  rating_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::rating(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.rating)
  return rating_.Get(index);
}
inline void PSFRequest_HotelFilters::set_rating(int index, ::google::protobuf::int32 value) {
  rating_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.rating)
}
inline void PSFRequest_HotelFilters::add_rating(::google::protobuf::int32 value) {
  rating_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.rating)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::rating() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.rating)
  return rating_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_rating() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.rating)
  return &rating_;
}

// int32 luxury = 2;
inline void PSFRequest_HotelFilters::clear_luxury() {
  luxury_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::luxury() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.luxury)
  return luxury_;
}
inline void PSFRequest_HotelFilters::set_luxury(::google::protobuf::int32 value) {
  
  luxury_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.luxury)
}

// string location = 3;
inline void PSFRequest_HotelFilters::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest_HotelFilters::location() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
  return location_.GetNoArena();
}
inline void PSFRequest_HotelFilters::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
}
#if LANG_CXX11
inline void PSFRequest_HotelFilters::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
}
#endif
inline void PSFRequest_HotelFilters::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
}
inline void PSFRequest_HotelFilters::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
}
inline ::std::string* PSFRequest_HotelFilters::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest_HotelFilters::release_location() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest_HotelFilters::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.HotelFilters.location)
}

// repeated int32 locationId = 4;
inline int PSFRequest_HotelFilters::locationid_size() const {
  return locationid_.size();
}
inline void PSFRequest_HotelFilters::clear_locationid() {
  locationid_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::locationid(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.locationId)
  return locationid_.Get(index);
}
inline void PSFRequest_HotelFilters::set_locationid(int index, ::google::protobuf::int32 value) {
  locationid_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.locationId)
}
inline void PSFRequest_HotelFilters::add_locationid(::google::protobuf::int32 value) {
  locationid_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.locationId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::locationid() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.locationId)
  return locationid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_locationid() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.locationId)
  return &locationid_;
}

// repeated int32 amenitie = 5;
inline int PSFRequest_HotelFilters::amenitie_size() const {
  return amenitie_.size();
}
inline void PSFRequest_HotelFilters::clear_amenitie() {
  amenitie_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::amenitie(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.amenitie)
  return amenitie_.Get(index);
}
inline void PSFRequest_HotelFilters::set_amenitie(int index, ::google::protobuf::int32 value) {
  amenitie_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.amenitie)
}
inline void PSFRequest_HotelFilters::add_amenitie(::google::protobuf::int32 value) {
  amenitie_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.amenitie)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::amenitie() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.amenitie)
  return amenitie_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_amenitie() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.amenitie)
  return &amenitie_;
}

// repeated int32 leisure = 6;
inline int PSFRequest_HotelFilters::leisure_size() const {
  return leisure_.size();
}
inline void PSFRequest_HotelFilters::clear_leisure() {
  leisure_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::leisure(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.leisure)
  return leisure_.Get(index);
}
inline void PSFRequest_HotelFilters::set_leisure(int index, ::google::protobuf::int32 value) {
  leisure_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.leisure)
}
inline void PSFRequest_HotelFilters::add_leisure(::google::protobuf::int32 value) {
  leisure_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.leisure)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::leisure() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.leisure)
  return leisure_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_leisure() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.leisure)
  return &leisure_;
}

// repeated int32 business = 7;
inline int PSFRequest_HotelFilters::business_size() const {
  return business_.size();
}
inline void PSFRequest_HotelFilters::clear_business() {
  business_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::business(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.business)
  return business_.Get(index);
}
inline void PSFRequest_HotelFilters::set_business(int index, ::google::protobuf::int32 value) {
  business_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.business)
}
inline void PSFRequest_HotelFilters::add_business(::google::protobuf::int32 value) {
  business_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.business)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::business() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.business)
  return business_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_business() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.business)
  return &business_;
}

// repeated int32 hotelPreference = 8;
inline int PSFRequest_HotelFilters::hotelpreference_size() const {
  return hotelpreference_.size();
}
inline void PSFRequest_HotelFilters::clear_hotelpreference() {
  hotelpreference_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::hotelpreference(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelPreference)
  return hotelpreference_.Get(index);
}
inline void PSFRequest_HotelFilters::set_hotelpreference(int index, ::google::protobuf::int32 value) {
  hotelpreference_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelPreference)
}
inline void PSFRequest_HotelFilters::add_hotelpreference(::google::protobuf::int32 value) {
  hotelpreference_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelPreference)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::hotelpreference() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelPreference)
  return hotelpreference_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_hotelpreference() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelPreference)
  return &hotelpreference_;
}

// repeated int32 chain = 9;
inline int PSFRequest_HotelFilters::chain_size() const {
  return chain_.size();
}
inline void PSFRequest_HotelFilters::clear_chain() {
  chain_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::chain(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.chain)
  return chain_.Get(index);
}
inline void PSFRequest_HotelFilters::set_chain(int index, ::google::protobuf::int32 value) {
  chain_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.chain)
}
inline void PSFRequest_HotelFilters::add_chain(::google::protobuf::int32 value) {
  chain_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.HotelFilters.chain)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_HotelFilters::chain() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.HotelFilters.chain)
  return chain_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_HotelFilters::mutable_chain() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.HotelFilters.chain)
  return &chain_;
}

// string attraction = 10;
inline void PSFRequest_HotelFilters::clear_attraction() {
  attraction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest_HotelFilters::attraction() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
  return attraction_.GetNoArena();
}
inline void PSFRequest_HotelFilters::set_attraction(const ::std::string& value) {
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
}
#if LANG_CXX11
inline void PSFRequest_HotelFilters::set_attraction(::std::string&& value) {
  
  attraction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
}
#endif
inline void PSFRequest_HotelFilters::set_attraction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
}
inline void PSFRequest_HotelFilters::set_attraction(const char* value, size_t size) {
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
}
inline ::std::string* PSFRequest_HotelFilters::mutable_attraction() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
  return attraction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest_HotelFilters::release_attraction() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
  
  return attraction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest_HotelFilters::set_allocated_attraction(::std::string* attraction) {
  if (attraction != NULL) {
    
  } else {
    
  }
  attraction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attraction);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.HotelFilters.attraction)
}

// string hotelName = 11;
inline void PSFRequest_HotelFilters::clear_hotelname() {
  hotelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest_HotelFilters::hotelname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
  return hotelname_.GetNoArena();
}
inline void PSFRequest_HotelFilters::set_hotelname(const ::std::string& value) {
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
}
#if LANG_CXX11
inline void PSFRequest_HotelFilters::set_hotelname(::std::string&& value) {
  
  hotelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
}
#endif
inline void PSFRequest_HotelFilters::set_hotelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
}
inline void PSFRequest_HotelFilters::set_hotelname(const char* value, size_t size) {
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
}
inline ::std::string* PSFRequest_HotelFilters::mutable_hotelname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
  return hotelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest_HotelFilters::release_hotelname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
  
  return hotelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest_HotelFilters::set_allocated_hotelname(::std::string* hotelname) {
  if (hotelname != NULL) {
    
  } else {
    
  }
  hotelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotelname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.HotelFilters.hotelName)
}

// int32 builtYear = 12;
inline void PSFRequest_HotelFilters::clear_builtyear() {
  builtyear_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::builtyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.builtYear)
  return builtyear_;
}
inline void PSFRequest_HotelFilters::set_builtyear(::google::protobuf::int32 value) {
  
  builtyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.builtYear)
}

// int32 renovationYear = 13;
inline void PSFRequest_HotelFilters::clear_renovationyear() {
  renovationyear_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::renovationyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.renovationYear)
  return renovationyear_;
}
inline void PSFRequest_HotelFilters::set_renovationyear(::google::protobuf::int32 value) {
  
  renovationyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.renovationYear)
}

// int32 floors = 14;
inline void PSFRequest_HotelFilters::clear_floors() {
  floors_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::floors() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.floors)
  return floors_;
}
inline void PSFRequest_HotelFilters::set_floors(::google::protobuf::int32 value) {
  
  floors_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.floors)
}

// int32 noOfRooms = 15;
inline void PSFRequest_HotelFilters::clear_noofrooms() {
  noofrooms_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::noofrooms() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.noOfRooms)
  return noofrooms_;
}
inline void PSFRequest_HotelFilters::set_noofrooms(::google::protobuf::int32 value) {
  
  noofrooms_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.noOfRooms)
}

// int32 fireSafety = 16;
inline void PSFRequest_HotelFilters::clear_firesafety() {
  firesafety_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_HotelFilters::firesafety() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.fireSafety)
  return firesafety_;
}
inline void PSFRequest_HotelFilters::set_firesafety(::google::protobuf::int32 value) {
  
  firesafety_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.fireSafety)
}

// string lastUpdated = 17;
inline void PSFRequest_HotelFilters::clear_lastupdated() {
  lastupdated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest_HotelFilters::lastupdated() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
  return lastupdated_.GetNoArena();
}
inline void PSFRequest_HotelFilters::set_lastupdated(const ::std::string& value) {
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
}
#if LANG_CXX11
inline void PSFRequest_HotelFilters::set_lastupdated(::std::string&& value) {
  
  lastupdated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
}
#endif
inline void PSFRequest_HotelFilters::set_lastupdated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
}
inline void PSFRequest_HotelFilters::set_lastupdated(const char* value, size_t size) {
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
}
inline ::std::string* PSFRequest_HotelFilters::mutable_lastupdated() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
  return lastupdated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest_HotelFilters::release_lastupdated() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
  
  return lastupdated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest_HotelFilters::set_allocated_lastupdated(::std::string* lastupdated) {
  if (lastupdated != NULL) {
    
  } else {
    
  }
  lastupdated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastupdated);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.HotelFilters.lastUpdated)
}

// -------------------------------------------------------------------

// PSFRequest_RoomTypeFilters_RoomCategory

// int32 MainCategory = 1;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_maincategory() {
  maincategory_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::maincategory() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.MainCategory)
  return maincategory_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_maincategory(::google::protobuf::int32 value) {
  
  maincategory_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.MainCategory)
}

// int32 SubCategory = 2;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_subcategory() {
  subcategory_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::subcategory() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.SubCategory)
  return subcategory_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_subcategory(::google::protobuf::int32 value) {
  
  subcategory_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.SubCategory)
}

// int32 View = 3;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_view() {
  view_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::view() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.View)
  return view_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_view(::google::protobuf::int32 value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.View)
}

// int32 BeddingType = 4;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_beddingtype() {
  beddingtype_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::beddingtype() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.BeddingType)
  return beddingtype_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_beddingtype(::google::protobuf::int32 value) {
  
  beddingtype_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.BeddingType)
}

// int32 Attribute1 = 5;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_attribute1() {
  attribute1_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::attribute1() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.Attribute1)
  return attribute1_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_attribute1(::google::protobuf::int32 value) {
  
  attribute1_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.Attribute1)
}

// int32 Attribute2 = 6;
inline void PSFRequest_RoomTypeFilters_RoomCategory::clear_attribute2() {
  attribute2_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters_RoomCategory::attribute2() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.Attribute2)
  return attribute2_;
}
inline void PSFRequest_RoomTypeFilters_RoomCategory::set_attribute2(::google::protobuf::int32 value) {
  
  attribute2_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory.Attribute2)
}

// -------------------------------------------------------------------

// PSFRequest_RoomTypeFilters

// int32 suite = 1;
inline void PSFRequest_RoomTypeFilters::clear_suite() {
  suite_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters::suite() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.suite)
  return suite_;
}
inline void PSFRequest_RoomTypeFilters::set_suite(::google::protobuf::int32 value) {
  
  suite_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.suite)
}

// repeated int32 roomAmenitie = 2;
inline int PSFRequest_RoomTypeFilters::roomamenitie_size() const {
  return roomamenitie_.size();
}
inline void PSFRequest_RoomTypeFilters::clear_roomamenitie() {
  roomamenitie_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters::roomamenitie(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomAmenitie)
  return roomamenitie_.Get(index);
}
inline void PSFRequest_RoomTypeFilters::set_roomamenitie(int index, ::google::protobuf::int32 value) {
  roomamenitie_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomAmenitie)
}
inline void PSFRequest_RoomTypeFilters::add_roomamenitie(::google::protobuf::int32 value) {
  roomamenitie_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomAmenitie)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_RoomTypeFilters::roomamenitie() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomAmenitie)
  return roomamenitie_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_RoomTypeFilters::mutable_roomamenitie() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomAmenitie)
  return &roomamenitie_;
}

// repeated int32 roomId = 3;
inline int PSFRequest_RoomTypeFilters::roomid_size() const {
  return roomid_.size();
}
inline void PSFRequest_RoomTypeFilters::clear_roomid() {
  roomid_.Clear();
}
inline ::google::protobuf::int32 PSFRequest_RoomTypeFilters::roomid(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomId)
  return roomid_.Get(index);
}
inline void PSFRequest_RoomTypeFilters::set_roomid(int index, ::google::protobuf::int32 value) {
  roomid_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomId)
}
inline void PSFRequest_RoomTypeFilters::add_roomid(::google::protobuf::int32 value) {
  roomid_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest_RoomTypeFilters::roomid() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomId)
  return roomid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest_RoomTypeFilters::mutable_roomid() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomId)
  return &roomid_;
}

// string roomName = 4;
inline void PSFRequest_RoomTypeFilters::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest_RoomTypeFilters::roomname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
  return roomname_.GetNoArena();
}
inline void PSFRequest_RoomTypeFilters::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
}
#if LANG_CXX11
inline void PSFRequest_RoomTypeFilters::set_roomname(::std::string&& value) {
  
  roomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
}
#endif
inline void PSFRequest_RoomTypeFilters::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
}
inline void PSFRequest_RoomTypeFilters::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
}
inline ::std::string* PSFRequest_RoomTypeFilters::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest_RoomTypeFilters::release_roomname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest_RoomTypeFilters::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomName)
}

// repeated .protobuffer.dotwproto.PSFRequest.RoomTypeFilters.RoomCategory roomCategories = 5;
inline int PSFRequest_RoomTypeFilters::roomcategories_size() const {
  return roomcategories_.size();
}
inline void PSFRequest_RoomTypeFilters::clear_roomcategories() {
  roomcategories_.Clear();
}
inline const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory& PSFRequest_RoomTypeFilters::roomcategories(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomCategories)
  return roomcategories_.Get(index);
}
inline ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory* PSFRequest_RoomTypeFilters::mutable_roomcategories(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomCategories)
  return roomcategories_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory* PSFRequest_RoomTypeFilters::add_roomcategories() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomCategories)
  return roomcategories_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory >*
PSFRequest_RoomTypeFilters::mutable_roomcategories() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomCategories)
  return &roomcategories_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters_RoomCategory >&
PSFRequest_RoomTypeFilters::roomcategories() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.RoomTypeFilters.roomCategories)
  return roomcategories_;
}

// -------------------------------------------------------------------

// PSFRequest_AdditionalFilters

// -------------------------------------------------------------------

// PSFRequest_SearchPeriodCriteria

// int32 travelFrom = 1;
inline void PSFRequest_SearchPeriodCriteria::clear_travelfrom() {
  travelfrom_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_SearchPeriodCriteria::travelfrom() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.travelFrom)
  return travelfrom_;
}
inline void PSFRequest_SearchPeriodCriteria::set_travelfrom(::google::protobuf::int32 value) {
  
  travelfrom_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.travelFrom)
}

// int32 travelTo = 2;
inline void PSFRequest_SearchPeriodCriteria::clear_travelto() {
  travelto_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_SearchPeriodCriteria::travelto() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.travelTo)
  return travelto_;
}
inline void PSFRequest_SearchPeriodCriteria::set_travelto(::google::protobuf::int32 value) {
  
  travelto_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.travelTo)
}

// int32 bookingDateTime = 3;
inline void PSFRequest_SearchPeriodCriteria::clear_bookingdatetime() {
  bookingdatetime_ = 0;
}
inline ::google::protobuf::int32 PSFRequest_SearchPeriodCriteria::bookingdatetime() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.bookingDateTime)
  return bookingdatetime_;
}
inline void PSFRequest_SearchPeriodCriteria::set_bookingdatetime(::google::protobuf::int32 value) {
  
  bookingdatetime_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria.bookingDateTime)
}

// -------------------------------------------------------------------

// PSFRequest

// string psfilter = 1;
inline void PSFRequest::clear_psfilter() {
  psfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest::psfilter() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.psfilter)
  return psfilter_.GetNoArena();
}
inline void PSFRequest::set_psfilter(const ::std::string& value) {
  
  psfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.psfilter)
}
#if LANG_CXX11
inline void PSFRequest::set_psfilter(::std::string&& value) {
  
  psfilter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.psfilter)
}
#endif
inline void PSFRequest::set_psfilter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  psfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.psfilter)
}
inline void PSFRequest::set_psfilter(const char* value, size_t size) {
  
  psfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.psfilter)
}
inline ::std::string* PSFRequest::mutable_psfilter() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.psfilter)
  return psfilter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest::release_psfilter() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.psfilter)
  
  return psfilter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest::set_allocated_psfilter(::std::string* psfilter) {
  if (psfilter != NULL) {
    
  } else {
    
  }
  psfilter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), psfilter);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.psfilter)
}

// int32 customerId = 2;
inline void PSFRequest::clear_customerid() {
  customerid_ = 0;
}
inline ::google::protobuf::int32 PSFRequest::customerid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.customerId)
  return customerid_;
}
inline void PSFRequest::set_customerid(::google::protobuf::int32 value) {
  
  customerid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.customerId)
}

// string environment = 3;
inline void PSFRequest::clear_environment() {
  environment_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest::environment() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.environment)
  return environment_.GetNoArena();
}
inline void PSFRequest::set_environment(const ::std::string& value) {
  
  environment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.environment)
}
#if LANG_CXX11
inline void PSFRequest::set_environment(::std::string&& value) {
  
  environment_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.environment)
}
#endif
inline void PSFRequest::set_environment(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  environment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.environment)
}
inline void PSFRequest::set_environment(const char* value, size_t size) {
  
  environment_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.environment)
}
inline ::std::string* PSFRequest::mutable_environment() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.environment)
  return environment_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest::release_environment() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.environment)
  
  return environment_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest::set_allocated_environment(::std::string* environment) {
  if (environment != NULL) {
    
  } else {
    
  }
  environment_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), environment);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.environment)
}

// int32 requestSource = 4;
inline void PSFRequest::clear_requestsource() {
  requestsource_ = 0;
}
inline ::google::protobuf::int32 PSFRequest::requestsource() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.requestSource)
  return requestsource_;
}
inline void PSFRequest::set_requestsource(::google::protobuf::int32 value) {
  
  requestsource_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.requestSource)
}

// repeated int32 exceptRestrictions = 5;
inline int PSFRequest::exceptrestrictions_size() const {
  return exceptrestrictions_.size();
}
inline void PSFRequest::clear_exceptrestrictions() {
  exceptrestrictions_.Clear();
}
inline ::google::protobuf::int32 PSFRequest::exceptrestrictions(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.exceptRestrictions)
  return exceptrestrictions_.Get(index);
}
inline void PSFRequest::set_exceptrestrictions(int index, ::google::protobuf::int32 value) {
  exceptrestrictions_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.exceptRestrictions)
}
inline void PSFRequest::add_exceptrestrictions(::google::protobuf::int32 value) {
  exceptrestrictions_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.exceptRestrictions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest::exceptrestrictions() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.exceptRestrictions)
  return exceptrestrictions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest::mutable_exceptrestrictions() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.exceptRestrictions)
  return &exceptrestrictions_;
}

// bool passengerNationalityOrResidenceProvided = 6;
inline void PSFRequest::clear_passengernationalityorresidenceprovided() {
  passengernationalityorresidenceprovided_ = false;
}
inline bool PSFRequest::passengernationalityorresidenceprovided() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.passengerNationalityOrResidenceProvided)
  return passengernationalityorresidenceprovided_;
}
inline void PSFRequest::set_passengernationalityorresidenceprovided(bool value) {
  
  passengernationalityorresidenceprovided_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.passengerNationalityOrResidenceProvided)
}

// repeated int32 hotelIds = 7;
inline int PSFRequest::hotelids_size() const {
  return hotelids_.size();
}
inline void PSFRequest::clear_hotelids() {
  hotelids_.Clear();
}
inline ::google::protobuf::int32 PSFRequest::hotelids(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.hotelIds)
  return hotelids_.Get(index);
}
inline void PSFRequest::set_hotelids(int index, ::google::protobuf::int32 value) {
  hotelids_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.hotelIds)
}
inline void PSFRequest::add_hotelids(::google::protobuf::int32 value) {
  hotelids_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.hotelIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest::hotelids() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.hotelIds)
  return hotelids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest::mutable_hotelids() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.hotelIds)
  return &hotelids_;
}

// string city = 8;
inline void PSFRequest::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFRequest::city() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.city)
  return city_.GetNoArena();
}
inline void PSFRequest::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.city)
}
#if LANG_CXX11
inline void PSFRequest::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFRequest.city)
}
#endif
inline void PSFRequest::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFRequest.city)
}
inline void PSFRequest::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFRequest.city)
}
inline ::std::string* PSFRequest::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFRequest::release_city() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFRequest::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.city)
}

// int32 country = 9;
inline void PSFRequest::clear_country() {
  country_ = 0;
}
inline ::google::protobuf::int32 PSFRequest::country() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.country)
  return country_;
}
inline void PSFRequest::set_country(::google::protobuf::int32 value) {
  
  country_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.country)
}

// repeated int32 bookingChannelsWithAutoMapping = 10;
inline int PSFRequest::bookingchannelswithautomapping_size() const {
  return bookingchannelswithautomapping_.size();
}
inline void PSFRequest::clear_bookingchannelswithautomapping() {
  bookingchannelswithautomapping_.Clear();
}
inline ::google::protobuf::int32 PSFRequest::bookingchannelswithautomapping(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.bookingChannelsWithAutoMapping)
  return bookingchannelswithautomapping_.Get(index);
}
inline void PSFRequest::set_bookingchannelswithautomapping(int index, ::google::protobuf::int32 value) {
  bookingchannelswithautomapping_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.bookingChannelsWithAutoMapping)
}
inline void PSFRequest::add_bookingchannelswithautomapping(::google::protobuf::int32 value) {
  bookingchannelswithautomapping_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.bookingChannelsWithAutoMapping)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest::bookingchannelswithautomapping() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.bookingChannelsWithAutoMapping)
  return bookingchannelswithautomapping_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest::mutable_bookingchannelswithautomapping() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.bookingChannelsWithAutoMapping)
  return &bookingchannelswithautomapping_;
}

// repeated int32 bookingChannelTypes = 11;
inline int PSFRequest::bookingchanneltypes_size() const {
  return bookingchanneltypes_.size();
}
inline void PSFRequest::clear_bookingchanneltypes() {
  bookingchanneltypes_.Clear();
}
inline ::google::protobuf::int32 PSFRequest::bookingchanneltypes(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.bookingChannelTypes)
  return bookingchanneltypes_.Get(index);
}
inline void PSFRequest::set_bookingchanneltypes(int index, ::google::protobuf::int32 value) {
  bookingchanneltypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.bookingChannelTypes)
}
inline void PSFRequest::add_bookingchanneltypes(::google::protobuf::int32 value) {
  bookingchanneltypes_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.bookingChannelTypes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest::bookingchanneltypes() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.bookingChannelTypes)
  return bookingchanneltypes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest::mutable_bookingchanneltypes() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.bookingChannelTypes)
  return &bookingchanneltypes_;
}

// repeated int32 excludedBookingchannel = 12;
inline int PSFRequest::excludedbookingchannel_size() const {
  return excludedbookingchannel_.size();
}
inline void PSFRequest::clear_excludedbookingchannel() {
  excludedbookingchannel_.Clear();
}
inline ::google::protobuf::int32 PSFRequest::excludedbookingchannel(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.excludedBookingchannel)
  return excludedbookingchannel_.Get(index);
}
inline void PSFRequest::set_excludedbookingchannel(int index, ::google::protobuf::int32 value) {
  excludedbookingchannel_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.excludedBookingchannel)
}
inline void PSFRequest::add_excludedbookingchannel(::google::protobuf::int32 value) {
  excludedbookingchannel_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.excludedBookingchannel)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSFRequest::excludedbookingchannel() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.excludedBookingchannel)
  return excludedbookingchannel_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSFRequest::mutable_excludedbookingchannel() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.excludedBookingchannel)
  return &excludedbookingchannel_;
}

// bool activeForRoomCategories = 13;
inline void PSFRequest::clear_activeforroomcategories() {
  activeforroomcategories_ = false;
}
inline bool PSFRequest::activeforroomcategories() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.activeForRoomCategories)
  return activeforroomcategories_;
}
inline void PSFRequest::set_activeforroomcategories(bool value) {
  
  activeforroomcategories_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFRequest.activeForRoomCategories)
}

// repeated .protobuffer.dotwproto.PSFRequest.RoomOccupancy roomOccupancy = 14;
inline int PSFRequest::roomoccupancy_size() const {
  return roomoccupancy_.size();
}
inline void PSFRequest::clear_roomoccupancy() {
  roomoccupancy_.Clear();
}
inline const ::protobuffer::dotwproto::PSFRequest_RoomOccupancy& PSFRequest::roomoccupancy(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.roomOccupancy)
  return roomoccupancy_.Get(index);
}
inline ::protobuffer::dotwproto::PSFRequest_RoomOccupancy* PSFRequest::mutable_roomoccupancy(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.roomOccupancy)
  return roomoccupancy_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFRequest_RoomOccupancy* PSFRequest::add_roomoccupancy() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFRequest.roomOccupancy)
  return roomoccupancy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomOccupancy >*
PSFRequest::mutable_roomoccupancy() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFRequest.roomOccupancy)
  return &roomoccupancy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFRequest_RoomOccupancy >&
PSFRequest::roomoccupancy() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFRequest.roomOccupancy)
  return roomoccupancy_;
}

// .protobuffer.dotwproto.PSFRequest.HotelFilters hotelFilters = 15;
inline bool PSFRequest::has_hotelfilters() const {
  return this != internal_default_instance() && hotelfilters_ != NULL;
}
inline void PSFRequest::clear_hotelfilters() {
  if (GetArenaNoVirtual() == NULL && hotelfilters_ != NULL) {
    delete hotelfilters_;
  }
  hotelfilters_ = NULL;
}
inline const ::protobuffer::dotwproto::PSFRequest_HotelFilters& PSFRequest::hotelfilters() const {
  const ::protobuffer::dotwproto::PSFRequest_HotelFilters* p = hotelfilters_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.hotelFilters)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::PSFRequest_HotelFilters*>(
      &::protobuffer::dotwproto::_PSFRequest_HotelFilters_default_instance_);
}
inline ::protobuffer::dotwproto::PSFRequest_HotelFilters* PSFRequest::release_hotelfilters() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.hotelFilters)
  
  ::protobuffer::dotwproto::PSFRequest_HotelFilters* temp = hotelfilters_;
  hotelfilters_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::PSFRequest_HotelFilters* PSFRequest::mutable_hotelfilters() {
  
  if (hotelfilters_ == NULL) {
    hotelfilters_ = new ::protobuffer::dotwproto::PSFRequest_HotelFilters;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.hotelFilters)
  return hotelfilters_;
}
inline void PSFRequest::set_allocated_hotelfilters(::protobuffer::dotwproto::PSFRequest_HotelFilters* hotelfilters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hotelfilters_;
  }
  if (hotelfilters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hotelfilters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hotelfilters, submessage_arena);
    }
    
  } else {
    
  }
  hotelfilters_ = hotelfilters;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.hotelFilters)
}

// .protobuffer.dotwproto.PSFRequest.RoomTypeFilters roomTypeFilters = 16;
inline bool PSFRequest::has_roomtypefilters() const {
  return this != internal_default_instance() && roomtypefilters_ != NULL;
}
inline void PSFRequest::clear_roomtypefilters() {
  if (GetArenaNoVirtual() == NULL && roomtypefilters_ != NULL) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = NULL;
}
inline const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters& PSFRequest::roomtypefilters() const {
  const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* p = roomtypefilters_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.roomTypeFilters)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters*>(
      &::protobuffer::dotwproto::_PSFRequest_RoomTypeFilters_default_instance_);
}
inline ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* PSFRequest::release_roomtypefilters() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.roomTypeFilters)
  
  ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* temp = roomtypefilters_;
  roomtypefilters_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* PSFRequest::mutable_roomtypefilters() {
  
  if (roomtypefilters_ == NULL) {
    roomtypefilters_ = new ::protobuffer::dotwproto::PSFRequest_RoomTypeFilters;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.roomTypeFilters)
  return roomtypefilters_;
}
inline void PSFRequest::set_allocated_roomtypefilters(::protobuffer::dotwproto::PSFRequest_RoomTypeFilters* roomtypefilters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roomtypefilters_;
  }
  if (roomtypefilters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roomtypefilters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roomtypefilters, submessage_arena);
    }
    
  } else {
    
  }
  roomtypefilters_ = roomtypefilters;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.roomTypeFilters)
}

// .protobuffer.dotwproto.PSFRequest.AdditionalFilters additionalFilters = 17;
inline bool PSFRequest::has_additionalfilters() const {
  return this != internal_default_instance() && additionalfilters_ != NULL;
}
inline void PSFRequest::clear_additionalfilters() {
  if (GetArenaNoVirtual() == NULL && additionalfilters_ != NULL) {
    delete additionalfilters_;
  }
  additionalfilters_ = NULL;
}
inline const ::protobuffer::dotwproto::PSFRequest_AdditionalFilters& PSFRequest::additionalfilters() const {
  const ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* p = additionalfilters_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.additionalFilters)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::PSFRequest_AdditionalFilters*>(
      &::protobuffer::dotwproto::_PSFRequest_AdditionalFilters_default_instance_);
}
inline ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* PSFRequest::release_additionalfilters() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.additionalFilters)
  
  ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* temp = additionalfilters_;
  additionalfilters_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::PSFRequest_AdditionalFilters* PSFRequest::mutable_additionalfilters() {
  
  if (additionalfilters_ == NULL) {
    additionalfilters_ = new ::protobuffer::dotwproto::PSFRequest_AdditionalFilters;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.additionalFilters)
  return additionalfilters_;
}
inline void PSFRequest::set_allocated_additionalfilters(::protobuffer::dotwproto::PSFRequest_AdditionalFilters* additionalfilters) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete additionalfilters_;
  }
  if (additionalfilters) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      additionalfilters = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, additionalfilters, submessage_arena);
    }
    
  } else {
    
  }
  additionalfilters_ = additionalfilters;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.additionalFilters)
}

// .protobuffer.dotwproto.PSFRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
inline bool PSFRequest::has_searchperiodcriteria() const {
  return this != internal_default_instance() && searchperiodcriteria_ != NULL;
}
inline void PSFRequest::clear_searchperiodcriteria() {
  if (GetArenaNoVirtual() == NULL && searchperiodcriteria_ != NULL) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = NULL;
}
inline const ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria& PSFRequest::searchperiodcriteria() const {
  const ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* p = searchperiodcriteria_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFRequest.searchPeriodCriteria)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria*>(
      &::protobuffer::dotwproto::_PSFRequest_SearchPeriodCriteria_default_instance_);
}
inline ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* PSFRequest::release_searchperiodcriteria() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFRequest.searchPeriodCriteria)
  
  ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* temp = searchperiodcriteria_;
  searchperiodcriteria_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* PSFRequest::mutable_searchperiodcriteria() {
  
  if (searchperiodcriteria_ == NULL) {
    searchperiodcriteria_ = new ::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFRequest.searchPeriodCriteria)
  return searchperiodcriteria_;
}
inline void PSFRequest::set_allocated_searchperiodcriteria(::protobuffer::dotwproto::PSFRequest_SearchPeriodCriteria* searchperiodcriteria) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete searchperiodcriteria_;
  }
  if (searchperiodcriteria) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      searchperiodcriteria = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, searchperiodcriteria, submessage_arena);
    }
    
  } else {
    
  }
  searchperiodcriteria_ = searchperiodcriteria;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFRequest.searchPeriodCriteria)
}

// -------------------------------------------------------------------

// PSFReply_RoomData

// string key = 1;
inline void PSFReply_RoomData::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply_RoomData::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.RoomData.key)
  return key_.GetNoArena();
}
inline void PSFReply_RoomData::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.RoomData.key)
}
#if LANG_CXX11
inline void PSFReply_RoomData::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.RoomData.key)
}
#endif
inline void PSFReply_RoomData::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.RoomData.key)
}
inline void PSFReply_RoomData::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.RoomData.key)
}
inline ::std::string* PSFReply_RoomData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.RoomData.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply_RoomData::release_key() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.RoomData.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply_RoomData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.RoomData.key)
}

// int32 roomTypeCode = 2;
inline void PSFReply_RoomData::clear_roomtypecode() {
  roomtypecode_ = 0;
}
inline ::google::protobuf::int32 PSFReply_RoomData::roomtypecode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.RoomData.roomTypeCode)
  return roomtypecode_;
}
inline void PSFReply_RoomData::set_roomtypecode(::google::protobuf::int32 value) {
  
  roomtypecode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.RoomData.roomTypeCode)
}

// -------------------------------------------------------------------

// PSFReply_HotelCode

// string key = 1;
inline void PSFReply_HotelCode::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply_HotelCode::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.HotelCode.key)
  return key_.GetNoArena();
}
inline void PSFReply_HotelCode::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.HotelCode.key)
}
#if LANG_CXX11
inline void PSFReply_HotelCode::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.HotelCode.key)
}
#endif
inline void PSFReply_HotelCode::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.HotelCode.key)
}
inline void PSFReply_HotelCode::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.HotelCode.key)
}
inline ::std::string* PSFReply_HotelCode::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.HotelCode.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply_HotelCode::release_key() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.HotelCode.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply_HotelCode::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.HotelCode.key)
}

// string hotelCodeOriginal = 2;
inline void PSFReply_HotelCode::clear_hotelcodeoriginal() {
  hotelcodeoriginal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply_HotelCode::hotelcodeoriginal() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
  return hotelcodeoriginal_.GetNoArena();
}
inline void PSFReply_HotelCode::set_hotelcodeoriginal(const ::std::string& value) {
  
  hotelcodeoriginal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
}
#if LANG_CXX11
inline void PSFReply_HotelCode::set_hotelcodeoriginal(::std::string&& value) {
  
  hotelcodeoriginal_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
}
#endif
inline void PSFReply_HotelCode::set_hotelcodeoriginal(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotelcodeoriginal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
}
inline void PSFReply_HotelCode::set_hotelcodeoriginal(const char* value, size_t size) {
  
  hotelcodeoriginal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
}
inline ::std::string* PSFReply_HotelCode::mutable_hotelcodeoriginal() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
  return hotelcodeoriginal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply_HotelCode::release_hotelcodeoriginal() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
  
  return hotelcodeoriginal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply_HotelCode::set_allocated_hotelcodeoriginal(::std::string* hotelcodeoriginal) {
  if (hotelcodeoriginal != NULL) {
    
  } else {
    
  }
  hotelcodeoriginal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotelcodeoriginal);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.HotelCode.hotelCodeOriginal)
}

// string cityCode = 3;
inline void PSFReply_HotelCode::clear_citycode() {
  citycode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply_HotelCode::citycode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
  return citycode_.GetNoArena();
}
inline void PSFReply_HotelCode::set_citycode(const ::std::string& value) {
  
  citycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
}
#if LANG_CXX11
inline void PSFReply_HotelCode::set_citycode(::std::string&& value) {
  
  citycode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
}
#endif
inline void PSFReply_HotelCode::set_citycode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  citycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
}
inline void PSFReply_HotelCode::set_citycode(const char* value, size_t size) {
  
  citycode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
}
inline ::std::string* PSFReply_HotelCode::mutable_citycode() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
  return citycode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply_HotelCode::release_citycode() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
  
  return citycode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply_HotelCode::set_allocated_citycode(::std::string* citycode) {
  if (citycode != NULL) {
    
  } else {
    
  }
  citycode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), citycode);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.HotelCode.cityCode)
}

// repeated .protobuffer.dotwproto.PSFReply.RoomData roomData = 4;
inline int PSFReply_HotelCode::roomdata_size() const {
  return roomdata_.size();
}
inline void PSFReply_HotelCode::clear_roomdata() {
  roomdata_.Clear();
}
inline const ::protobuffer::dotwproto::PSFReply_RoomData& PSFReply_HotelCode::roomdata(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.HotelCode.roomData)
  return roomdata_.Get(index);
}
inline ::protobuffer::dotwproto::PSFReply_RoomData* PSFReply_HotelCode::mutable_roomdata(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.HotelCode.roomData)
  return roomdata_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFReply_RoomData* PSFReply_HotelCode::add_roomdata() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFReply.HotelCode.roomData)
  return roomdata_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomData >*
PSFReply_HotelCode::mutable_roomdata() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFReply.HotelCode.roomData)
  return &roomdata_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomData >&
PSFReply_HotelCode::roomdata() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFReply.HotelCode.roomData)
  return roomdata_;
}

// -------------------------------------------------------------------

// PSFReply_BookingChannelCode

// int32 key = 1;
inline void PSFReply_BookingChannelCode::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 PSFReply_BookingChannelCode::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.BookingChannelCode.key)
  return key_;
}
inline void PSFReply_BookingChannelCode::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.BookingChannelCode.key)
}

// repeated .protobuffer.dotwproto.PSFReply.HotelCode hotelCodeArray = 2;
inline int PSFReply_BookingChannelCode::hotelcodearray_size() const {
  return hotelcodearray_.size();
}
inline void PSFReply_BookingChannelCode::clear_hotelcodearray() {
  hotelcodearray_.Clear();
}
inline const ::protobuffer::dotwproto::PSFReply_HotelCode& PSFReply_BookingChannelCode::hotelcodearray(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.BookingChannelCode.hotelCodeArray)
  return hotelcodearray_.Get(index);
}
inline ::protobuffer::dotwproto::PSFReply_HotelCode* PSFReply_BookingChannelCode::mutable_hotelcodearray(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.BookingChannelCode.hotelCodeArray)
  return hotelcodearray_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFReply_HotelCode* PSFReply_BookingChannelCode::add_hotelcodearray() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFReply.BookingChannelCode.hotelCodeArray)
  return hotelcodearray_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_HotelCode >*
PSFReply_BookingChannelCode::mutable_hotelcodearray() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFReply.BookingChannelCode.hotelCodeArray)
  return &hotelcodearray_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_HotelCode >&
PSFReply_BookingChannelCode::hotelcodearray() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFReply.BookingChannelCode.hotelCodeArray)
  return hotelcodearray_;
}

// -------------------------------------------------------------------

// PSFReply_RoomIndex

// int32 key = 1;
inline void PSFReply_RoomIndex::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 PSFReply_RoomIndex::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.RoomIndex.key)
  return key_;
}
inline void PSFReply_RoomIndex::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.RoomIndex.key)
}

// repeated .protobuffer.dotwproto.PSFReply.BookingChannelCode roomIndexArray = 2;
inline int PSFReply_RoomIndex::roomindexarray_size() const {
  return roomindexarray_.size();
}
inline void PSFReply_RoomIndex::clear_roomindexarray() {
  roomindexarray_.Clear();
}
inline const ::protobuffer::dotwproto::PSFReply_BookingChannelCode& PSFReply_RoomIndex::roomindexarray(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.RoomIndex.roomIndexArray)
  return roomindexarray_.Get(index);
}
inline ::protobuffer::dotwproto::PSFReply_BookingChannelCode* PSFReply_RoomIndex::mutable_roomindexarray(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.RoomIndex.roomIndexArray)
  return roomindexarray_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFReply_BookingChannelCode* PSFReply_RoomIndex::add_roomindexarray() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFReply.RoomIndex.roomIndexArray)
  return roomindexarray_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_BookingChannelCode >*
PSFReply_RoomIndex::mutable_roomindexarray() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFReply.RoomIndex.roomIndexArray)
  return &roomindexarray_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_BookingChannelCode >&
PSFReply_RoomIndex::roomindexarray() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFReply.RoomIndex.roomIndexArray)
  return roomindexarray_;
}

// -------------------------------------------------------------------

// PSFReply

// repeated .protobuffer.dotwproto.PSFReply.RoomIndex Results = 1;
inline int PSFReply::results_size() const {
  return results_.size();
}
inline void PSFReply::clear_results() {
  results_.Clear();
}
inline const ::protobuffer::dotwproto::PSFReply_RoomIndex& PSFReply::results(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.Results)
  return results_.Get(index);
}
inline ::protobuffer::dotwproto::PSFReply_RoomIndex* PSFReply::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.Results)
  return results_.Mutable(index);
}
inline ::protobuffer::dotwproto::PSFReply_RoomIndex* PSFReply::add_results() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.PSFReply.Results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomIndex >*
PSFReply::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.PSFReply.Results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::PSFReply_RoomIndex >&
PSFReply::results() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.PSFReply.Results)
  return results_;
}

// string error = 2;
inline void PSFReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply::error() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.error)
  return error_.GetNoArena();
}
inline void PSFReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.error)
}
#if LANG_CXX11
inline void PSFReply::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.error)
}
#endif
inline void PSFReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.error)
}
inline void PSFReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.error)
}
inline ::std::string* PSFReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply::release_error() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.error)
}

// string errorCode = 3;
inline void PSFReply::clear_errorcode() {
  errorcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply::errorcode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.errorCode)
  return errorcode_.GetNoArena();
}
inline void PSFReply::set_errorcode(const ::std::string& value) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.errorCode)
}
#if LANG_CXX11
inline void PSFReply::set_errorcode(::std::string&& value) {
  
  errorcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.errorCode)
}
#endif
inline void PSFReply::set_errorcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.errorCode)
}
inline void PSFReply::set_errorcode(const char* value, size_t size) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.errorCode)
}
inline ::std::string* PSFReply::mutable_errorcode() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.errorCode)
  return errorcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply::release_errorcode() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.errorCode)
  
  return errorcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply::set_allocated_errorcode(::std::string* errorcode) {
  if (errorcode != NULL) {
    
  } else {
    
  }
  errorcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorcode);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.errorCode)
}

// string replystring = 4;
inline void PSFReply::clear_replystring() {
  replystring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PSFReply::replystring() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.replystring)
  return replystring_.GetNoArena();
}
inline void PSFReply::set_replystring(const ::std::string& value) {
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.replystring)
}
#if LANG_CXX11
inline void PSFReply::set_replystring(::std::string&& value) {
  
  replystring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.PSFReply.replystring)
}
#endif
inline void PSFReply::set_replystring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.PSFReply.replystring)
}
inline void PSFReply::set_replystring(const char* value, size_t size) {
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.PSFReply.replystring)
}
inline ::std::string* PSFReply::mutable_replystring() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.PSFReply.replystring)
  return replystring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PSFReply::release_replystring() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.PSFReply.replystring)
  
  return replystring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PSFReply::set_allocated_replystring(::std::string* replystring) {
  if (replystring != NULL) {
    
  } else {
    
  }
  replystring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replystring);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.PSFReply.replystring)
}

// int32 replystringInt = 5;
inline void PSFReply::clear_replystringint() {
  replystringint_ = 0;
}
inline ::google::protobuf::int32 PSFReply::replystringint() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.PSFReply.replystringInt)
  return replystringint_;
}
inline void PSFReply::set_replystringint(::google::protobuf::int32 value) {
  
  replystringint_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.PSFReply.replystringInt)
}

// -------------------------------------------------------------------

// HDRequest_HotelIds

// int32 hotelId = 1;
inline void HDRequest_HotelIds::clear_hotelid() {
  hotelid_ = 0;
}
inline ::google::protobuf::int32 HDRequest_HotelIds::hotelid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.HotelIds.hotelId)
  return hotelid_;
}
inline void HDRequest_HotelIds::set_hotelid(::google::protobuf::int32 value) {
  
  hotelid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.HotelIds.hotelId)
}

// repeated int32 roomTypeCodes = 2;
inline int HDRequest_HotelIds::roomtypecodes_size() const {
  return roomtypecodes_.size();
}
inline void HDRequest_HotelIds::clear_roomtypecodes() {
  roomtypecodes_.Clear();
}
inline ::google::protobuf::int32 HDRequest_HotelIds::roomtypecodes(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.HotelIds.roomTypeCodes)
  return roomtypecodes_.Get(index);
}
inline void HDRequest_HotelIds::set_roomtypecodes(int index, ::google::protobuf::int32 value) {
  roomtypecodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.HotelIds.roomTypeCodes)
}
inline void HDRequest_HotelIds::add_roomtypecodes(::google::protobuf::int32 value) {
  roomtypecodes_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDRequest.HotelIds.roomTypeCodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HDRequest_HotelIds::roomtypecodes() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDRequest.HotelIds.roomTypeCodes)
  return roomtypecodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HDRequest_HotelIds::mutable_roomtypecodes() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDRequest.HotelIds.roomTypeCodes)
  return &roomtypecodes_;
}

// -------------------------------------------------------------------

// HDRequest_ReturnHotelStaticData

// bool description1 = 1;
inline void HDRequest_ReturnHotelStaticData::clear_description1() {
  description1_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::description1() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.description1)
  return description1_;
}
inline void HDRequest_ReturnHotelStaticData::set_description1(bool value) {
  
  description1_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.description1)
}

// bool description2 = 2;
inline void HDRequest_ReturnHotelStaticData::clear_description2() {
  description2_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::description2() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.description2)
  return description2_;
}
inline void HDRequest_ReturnHotelStaticData::set_description2(bool value) {
  
  description2_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.description2)
}

// bool geoPoint = 3;
inline void HDRequest_ReturnHotelStaticData::clear_geopoint() {
  geopoint_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::geopoint() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.geoPoint)
  return geopoint_;
}
inline void HDRequest_ReturnHotelStaticData::set_geopoint(bool value) {
  
  geopoint_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.geoPoint)
}

// bool ratingDescription = 4;
inline void HDRequest_ReturnHotelStaticData::clear_ratingdescription() {
  ratingdescription_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::ratingdescription() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.ratingDescription)
  return ratingdescription_;
}
inline void HDRequest_ReturnHotelStaticData::set_ratingdescription(bool value) {
  
  ratingdescription_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.ratingDescription)
}

// bool images = 5;
inline void HDRequest_ReturnHotelStaticData::clear_images() {
  images_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::images() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.images)
  return images_;
}
inline void HDRequest_ReturnHotelStaticData::set_images(bool value) {
  
  images_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.images)
}

// bool direct = 6;
inline void HDRequest_ReturnHotelStaticData::clear_direct() {
  direct_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::direct() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.direct)
  return direct_;
}
inline void HDRequest_ReturnHotelStaticData::set_direct(bool value) {
  
  direct_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.direct)
}

// bool hotelPreference = 7;
inline void HDRequest_ReturnHotelStaticData::clear_hotelpreference() {
  hotelpreference_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::hotelpreference() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelPreference)
  return hotelpreference_;
}
inline void HDRequest_ReturnHotelStaticData::set_hotelpreference(bool value) {
  
  hotelpreference_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelPreference)
}

// bool builtYear = 8;
inline void HDRequest_ReturnHotelStaticData::clear_builtyear() {
  builtyear_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::builtyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.builtYear)
  return builtyear_;
}
inline void HDRequest_ReturnHotelStaticData::set_builtyear(bool value) {
  
  builtyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.builtYear)
}

// bool renovationYear = 9;
inline void HDRequest_ReturnHotelStaticData::clear_renovationyear() {
  renovationyear_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::renovationyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.renovationYear)
  return renovationyear_;
}
inline void HDRequest_ReturnHotelStaticData::set_renovationyear(bool value) {
  
  renovationyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.renovationYear)
}

// bool floors = 10;
inline void HDRequest_ReturnHotelStaticData::clear_floors() {
  floors_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::floors() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.floors)
  return floors_;
}
inline void HDRequest_ReturnHotelStaticData::set_floors(bool value) {
  
  floors_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.floors)
}

// bool noOfRooms = 11;
inline void HDRequest_ReturnHotelStaticData::clear_noofrooms() {
  noofrooms_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::noofrooms() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.noOfRooms)
  return noofrooms_;
}
inline void HDRequest_ReturnHotelStaticData::set_noofrooms(bool value) {
  
  noofrooms_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.noOfRooms)
}

// bool luxury = 12;
inline void HDRequest_ReturnHotelStaticData::clear_luxury() {
  luxury_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::luxury() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.luxury)
  return luxury_;
}
inline void HDRequest_ReturnHotelStaticData::set_luxury(bool value) {
  
  luxury_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.luxury)
}

// bool address = 13;
inline void HDRequest_ReturnHotelStaticData::clear_address() {
  address_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::address() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.address)
  return address_;
}
inline void HDRequest_ReturnHotelStaticData::set_address(bool value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.address)
}

// bool zipCode = 14;
inline void HDRequest_ReturnHotelStaticData::clear_zipcode() {
  zipcode_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::zipcode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.zipCode)
  return zipcode_;
}
inline void HDRequest_ReturnHotelStaticData::set_zipcode(bool value) {
  
  zipcode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.zipCode)
}

// bool location = 15;
inline void HDRequest_ReturnHotelStaticData::clear_location() {
  location_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::location() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location)
  return location_;
}
inline void HDRequest_ReturnHotelStaticData::set_location(bool value) {
  
  location_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location)
}

// bool locationId = 16;
inline void HDRequest_ReturnHotelStaticData::clear_locationid() {
  locationid_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::locationid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.locationId)
  return locationid_;
}
inline void HDRequest_ReturnHotelStaticData::set_locationid(bool value) {
  
  locationid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.locationId)
}

// bool location1 = 17;
inline void HDRequest_ReturnHotelStaticData::clear_location1() {
  location1_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::location1() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location1)
  return location1_;
}
inline void HDRequest_ReturnHotelStaticData::set_location1(bool value) {
  
  location1_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location1)
}

// bool location2 = 18;
inline void HDRequest_ReturnHotelStaticData::clear_location2() {
  location2_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::location2() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location2)
  return location2_;
}
inline void HDRequest_ReturnHotelStaticData::set_location2(bool value) {
  
  location2_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location2)
}

// bool location3 = 19;
inline void HDRequest_ReturnHotelStaticData::clear_location3() {
  location3_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::location3() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location3)
  return location3_;
}
inline void HDRequest_ReturnHotelStaticData::set_location3(bool value) {
  
  location3_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.location3)
}

// bool stateName = 20;
inline void HDRequest_ReturnHotelStaticData::clear_statename() {
  statename_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::statename() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.stateName)
  return statename_;
}
inline void HDRequest_ReturnHotelStaticData::set_statename(bool value) {
  
  statename_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.stateName)
}

// bool stateCode = 21;
inline void HDRequest_ReturnHotelStaticData::clear_statecode() {
  statecode_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::statecode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.stateCode)
  return statecode_;
}
inline void HDRequest_ReturnHotelStaticData::set_statecode(bool value) {
  
  statecode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.stateCode)
}

// bool countryName = 22;
inline void HDRequest_ReturnHotelStaticData::clear_countryname() {
  countryname_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::countryname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.countryName)
  return countryname_;
}
inline void HDRequest_ReturnHotelStaticData::set_countryname(bool value) {
  
  countryname_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.countryName)
}

// bool regionName = 23;
inline void HDRequest_ReturnHotelStaticData::clear_regionname() {
  regionname_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::regionname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.regionName)
  return regionname_;
}
inline void HDRequest_ReturnHotelStaticData::set_regionname(bool value) {
  
  regionname_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.regionName)
}

// bool regionCode = 24;
inline void HDRequest_ReturnHotelStaticData::clear_regioncode() {
  regioncode_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::regioncode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.regionCode)
  return regioncode_;
}
inline void HDRequest_ReturnHotelStaticData::set_regioncode(bool value) {
  
  regioncode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.regionCode)
}

// bool amenitie = 25;
inline void HDRequest_ReturnHotelStaticData::clear_amenitie() {
  amenitie_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::amenitie() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.amenitie)
  return amenitie_;
}
inline void HDRequest_ReturnHotelStaticData::set_amenitie(bool value) {
  
  amenitie_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.amenitie)
}

// bool leisure = 26;
inline void HDRequest_ReturnHotelStaticData::clear_leisure() {
  leisure_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::leisure() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.leisure)
  return leisure_;
}
inline void HDRequest_ReturnHotelStaticData::set_leisure(bool value) {
  
  leisure_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.leisure)
}

// bool business = 27;
inline void HDRequest_ReturnHotelStaticData::clear_business() {
  business_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::business() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.business)
  return business_;
}
inline void HDRequest_ReturnHotelStaticData::set_business(bool value) {
  
  business_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.business)
}

// bool transportation = 28;
inline void HDRequest_ReturnHotelStaticData::clear_transportation() {
  transportation_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::transportation() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.transportation)
  return transportation_;
}
inline void HDRequest_ReturnHotelStaticData::set_transportation(bool value) {
  
  transportation_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.transportation)
}

// bool hotelPhone = 29;
inline void HDRequest_ReturnHotelStaticData::clear_hotelphone() {
  hotelphone_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::hotelphone() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelPhone)
  return hotelphone_;
}
inline void HDRequest_ReturnHotelStaticData::set_hotelphone(bool value) {
  
  hotelphone_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelPhone)
}

// bool hotelCheckIn = 30;
inline void HDRequest_ReturnHotelStaticData::clear_hotelcheckin() {
  hotelcheckin_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::hotelcheckin() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelCheckIn)
  return hotelcheckin_;
}
inline void HDRequest_ReturnHotelStaticData::set_hotelcheckin(bool value) {
  
  hotelcheckin_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelCheckIn)
}

// bool hotelCheckOut = 31;
inline void HDRequest_ReturnHotelStaticData::clear_hotelcheckout() {
  hotelcheckout_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::hotelcheckout() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelCheckOut)
  return hotelcheckout_;
}
inline void HDRequest_ReturnHotelStaticData::set_hotelcheckout(bool value) {
  
  hotelcheckout_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelCheckOut)
}

// bool minAge = 32;
inline void HDRequest_ReturnHotelStaticData::clear_minage() {
  minage_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::minage() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.minAge)
  return minage_;
}
inline void HDRequest_ReturnHotelStaticData::set_minage(bool value) {
  
  minage_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.minAge)
}

// bool rating = 33;
inline void HDRequest_ReturnHotelStaticData::clear_rating() {
  rating_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::rating() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.rating)
  return rating_;
}
inline void HDRequest_ReturnHotelStaticData::set_rating(bool value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.rating)
}

// bool fireSafety = 34;
inline void HDRequest_ReturnHotelStaticData::clear_firesafety() {
  firesafety_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::firesafety() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.fireSafety)
  return firesafety_;
}
inline void HDRequest_ReturnHotelStaticData::set_firesafety(bool value) {
  
  firesafety_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.fireSafety)
}

// bool chain = 35;
inline void HDRequest_ReturnHotelStaticData::clear_chain() {
  chain_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::chain() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.chain)
  return chain_;
}
inline void HDRequest_ReturnHotelStaticData::set_chain(bool value) {
  
  chain_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.chain)
}

// bool lastUpdated = 36;
inline void HDRequest_ReturnHotelStaticData::clear_lastupdated() {
  lastupdated_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::lastupdated() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.lastUpdated)
  return lastupdated_;
}
inline void HDRequest_ReturnHotelStaticData::set_lastupdated(bool value) {
  
  lastupdated_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.lastUpdated)
}

// bool transferMandatory = 37;
inline void HDRequest_ReturnHotelStaticData::clear_transfermandatory() {
  transfermandatory_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::transfermandatory() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.transferMandatory)
  return transfermandatory_;
}
inline void HDRequest_ReturnHotelStaticData::set_transfermandatory(bool value) {
  
  transfermandatory_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.transferMandatory)
}

// bool tariffNotes = 38;
inline void HDRequest_ReturnHotelStaticData::clear_tariffnotes() {
  tariffnotes_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::tariffnotes() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.tariffNotes)
  return tariffnotes_;
}
inline void HDRequest_ReturnHotelStaticData::set_tariffnotes(bool value) {
  
  tariffnotes_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.tariffNotes)
}

// bool chainName = 39;
inline void HDRequest_ReturnHotelStaticData::clear_chainname() {
  chainname_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::chainname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.chainName)
  return chainname_;
}
inline void HDRequest_ReturnHotelStaticData::set_chainname(bool value) {
  
  chainname_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.chainName)
}

// bool hotelProperty = 40;
inline void HDRequest_ReturnHotelStaticData::clear_hotelproperty() {
  hotelproperty_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::hotelproperty() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelProperty)
  return hotelproperty_;
}
inline void HDRequest_ReturnHotelStaticData::set_hotelproperty(bool value) {
  
  hotelproperty_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.hotelProperty)
}

// bool fullAddress = 41;
inline void HDRequest_ReturnHotelStaticData::clear_fulladdress() {
  fulladdress_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::fulladdress() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.fullAddress)
  return fulladdress_;
}
inline void HDRequest_ReturnHotelStaticData::set_fulladdress(bool value) {
  
  fulladdress_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.fullAddress)
}

// bool exclusive = 42;
inline void HDRequest_ReturnHotelStaticData::clear_exclusive() {
  exclusive_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::exclusive() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.exclusive)
  return exclusive_;
}
inline void HDRequest_ReturnHotelStaticData::set_exclusive(bool value) {
  
  exclusive_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.exclusive)
}

// bool attraction = 43;
inline void HDRequest_ReturnHotelStaticData::clear_attraction() {
  attraction_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::attraction() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.attraction)
  return attraction_;
}
inline void HDRequest_ReturnHotelStaticData::set_attraction(bool value) {
  
  attraction_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.attraction)
}

// bool areaCode = 44;
inline void HDRequest_ReturnHotelStaticData::clear_areacode() {
  areacode_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::areacode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.areaCode)
  return areacode_;
}
inline void HDRequest_ReturnHotelStaticData::set_areacode(bool value) {
  
  areacode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.areaCode)
}

// bool areaName = 45;
inline void HDRequest_ReturnHotelStaticData::clear_areaname() {
  areaname_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::areaname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.areaName)
  return areaname_;
}
inline void HDRequest_ReturnHotelStaticData::set_areaname(bool value) {
  
  areaname_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.areaName)
}

// bool geoLocations = 46;
inline void HDRequest_ReturnHotelStaticData::clear_geolocations() {
  geolocations_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::geolocations() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.geoLocations)
  return geolocations_;
}
inline void HDRequest_ReturnHotelStaticData::set_geolocations(bool value) {
  
  geolocations_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.geoLocations)
}

// bool priority = 47;
inline void HDRequest_ReturnHotelStaticData::clear_priority() {
  priority_ = false;
}
inline bool HDRequest_ReturnHotelStaticData::priority() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.priority)
  return priority_;
}
inline void HDRequest_ReturnHotelStaticData::set_priority(bool value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnHotelStaticData.priority)
}

// -------------------------------------------------------------------

// HDRequest_ReturnRoomTypeStaticData

// bool roomAmenities = 1;
inline void HDRequest_ReturnRoomTypeStaticData::clear_roomamenities() {
  roomamenities_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::roomamenities() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomAmenities)
  return roomamenities_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_roomamenities(bool value) {
  
  roomamenities_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomAmenities)
}

// bool name = 2;
inline void HDRequest_ReturnRoomTypeStaticData::clear_name() {
  name_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::name() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.name)
  return name_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_name(bool value) {
  
  name_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.name)
}

// bool supplierRoomName = 3;
inline void HDRequest_ReturnRoomTypeStaticData::clear_supplierroomname() {
  supplierroomname_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::supplierroomname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.supplierRoomName)
  return supplierroomname_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_supplierroomname(bool value) {
  
  supplierroomname_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.supplierRoomName)
}

// bool twin = 4;
inline void HDRequest_ReturnRoomTypeStaticData::clear_twin() {
  twin_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::twin() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.twin)
  return twin_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_twin(bool value) {
  
  twin_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.twin)
}

// bool roomInfo = 5;
inline void HDRequest_ReturnRoomTypeStaticData::clear_roominfo() {
  roominfo_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::roominfo() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomInfo)
  return roominfo_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_roominfo(bool value) {
  
  roominfo_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomInfo)
}

// bool specials = 6;
inline void HDRequest_ReturnRoomTypeStaticData::clear_specials() {
  specials_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::specials() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.specials)
  return specials_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_specials(bool value) {
  
  specials_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.specials)
}

// bool roomImages = 7;
inline void HDRequest_ReturnRoomTypeStaticData::clear_roomimages() {
  roomimages_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::roomimages() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomImages)
  return roomimages_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_roomimages(bool value) {
  
  roomimages_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomImages)
}

// bool roomCategory = 8;
inline void HDRequest_ReturnRoomTypeStaticData::clear_roomcategory() {
  roomcategory_ = false;
}
inline bool HDRequest_ReturnRoomTypeStaticData::roomcategory() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomCategory)
  return roomcategory_;
}
inline void HDRequest_ReturnRoomTypeStaticData::set_roomcategory(bool value) {
  
  roomcategory_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData.roomCategory)
}

// -------------------------------------------------------------------

// HDRequest_ReturnRateData

// bool occupancy = 1;
inline void HDRequest_ReturnRateData::clear_occupancy() {
  occupancy_ = false;
}
inline bool HDRequest_ReturnRateData::occupancy() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.occupancy)
  return occupancy_;
}
inline void HDRequest_ReturnRateData::set_occupancy(bool value) {
  
  occupancy_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.occupancy)
}

// bool status = 2;
inline void HDRequest_ReturnRateData::clear_status() {
  status_ = false;
}
inline bool HDRequest_ReturnRateData::status() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.status)
  return status_;
}
inline void HDRequest_ReturnRateData::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.status)
}

// bool rateType = 3;
inline void HDRequest_ReturnRateData::clear_ratetype() {
  ratetype_ = false;
}
inline bool HDRequest_ReturnRateData::ratetype() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.rateType)
  return ratetype_;
}
inline void HDRequest_ReturnRateData::set_ratetype(bool value) {
  
  ratetype_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.rateType)
}

// bool paymentMode = 4;
inline void HDRequest_ReturnRateData::clear_paymentmode() {
  paymentmode_ = false;
}
inline bool HDRequest_ReturnRateData::paymentmode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.paymentMode)
  return paymentmode_;
}
inline void HDRequest_ReturnRateData::set_paymentmode(bool value) {
  
  paymentmode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.paymentMode)
}

// bool allowsExtraMeals = 5;
inline void HDRequest_ReturnRateData::clear_allowsextrameals() {
  allowsextrameals_ = false;
}
inline bool HDRequest_ReturnRateData::allowsextrameals() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsExtraMeals)
  return allowsextrameals_;
}
inline void HDRequest_ReturnRateData::set_allowsextrameals(bool value) {
  
  allowsextrameals_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsExtraMeals)
}

// bool allowsSpecialRequests = 6;
inline void HDRequest_ReturnRateData::clear_allowsspecialrequests() {
  allowsspecialrequests_ = false;
}
inline bool HDRequest_ReturnRateData::allowsspecialrequests() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsSpecialRequests)
  return allowsspecialrequests_;
}
inline void HDRequest_ReturnRateData::set_allowsspecialrequests(bool value) {
  
  allowsspecialrequests_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsSpecialRequests)
}

// bool allowsBeddingPreference = 7;
inline void HDRequest_ReturnRateData::clear_allowsbeddingpreference() {
  allowsbeddingpreference_ = false;
}
inline bool HDRequest_ReturnRateData::allowsbeddingpreference() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsBeddingPreference)
  return allowsbeddingpreference_;
}
inline void HDRequest_ReturnRateData::set_allowsbeddingpreference(bool value) {
  
  allowsbeddingpreference_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsBeddingPreference)
}

// bool allowsSpecials = 8;
inline void HDRequest_ReturnRateData::clear_allowsspecials() {
  allowsspecials_ = false;
}
inline bool HDRequest_ReturnRateData::allowsspecials() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsSpecials)
  return allowsspecials_;
}
inline void HDRequest_ReturnRateData::set_allowsspecials(bool value) {
  
  allowsspecials_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.allowsSpecials)
}

// bool passengerNamesRequiredForBooking = 9;
inline void HDRequest_ReturnRateData::clear_passengernamesrequiredforbooking() {
  passengernamesrequiredforbooking_ = false;
}
inline bool HDRequest_ReturnRateData::passengernamesrequiredforbooking() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.passengerNamesRequiredForBooking)
  return passengernamesrequiredforbooking_;
}
inline void HDRequest_ReturnRateData::set_passengernamesrequiredforbooking(bool value) {
  
  passengernamesrequiredforbooking_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.passengerNamesRequiredForBooking)
}

// bool allocationDetails = 10;
inline void HDRequest_ReturnRateData::clear_allocationdetails() {
  allocationdetails_ = false;
}
inline bool HDRequest_ReturnRateData::allocationdetails() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.allocationDetails)
  return allocationdetails_;
}
inline void HDRequest_ReturnRateData::set_allocationdetails(bool value) {
  
  allocationdetails_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.allocationDetails)
}

// bool minStay = 11;
inline void HDRequest_ReturnRateData::clear_minstay() {
  minstay_ = false;
}
inline bool HDRequest_ReturnRateData::minstay() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.minStay)
  return minstay_;
}
inline void HDRequest_ReturnRateData::set_minstay(bool value) {
  
  minstay_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.minStay)
}

// bool dateApplyMinStay = 12;
inline void HDRequest_ReturnRateData::clear_dateapplyminstay() {
  dateapplyminstay_ = false;
}
inline bool HDRequest_ReturnRateData::dateapplyminstay() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.dateApplyMinStay)
  return dateapplyminstay_;
}
inline void HDRequest_ReturnRateData::set_dateapplyminstay(bool value) {
  
  dateapplyminstay_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.dateApplyMinStay)
}

// bool cancellationRules = 13;
inline void HDRequest_ReturnRateData::clear_cancellationrules() {
  cancellationrules_ = false;
}
inline bool HDRequest_ReturnRateData::cancellationrules() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.cancellationRules)
  return cancellationrules_;
}
inline void HDRequest_ReturnRateData::set_cancellationrules(bool value) {
  
  cancellationrules_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.cancellationRules)
}

// bool withinCancellationDeadline = 14;
inline void HDRequest_ReturnRateData::clear_withincancellationdeadline() {
  withincancellationdeadline_ = false;
}
inline bool HDRequest_ReturnRateData::withincancellationdeadline() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.withinCancellationDeadline)
  return withincancellationdeadline_;
}
inline void HDRequest_ReturnRateData::set_withincancellationdeadline(bool value) {
  
  withincancellationdeadline_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.withinCancellationDeadline)
}

// bool tariffNotes = 15;
inline void HDRequest_ReturnRateData::clear_tariffnotes() {
  tariffnotes_ = false;
}
inline bool HDRequest_ReturnRateData::tariffnotes() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.tariffNotes)
  return tariffnotes_;
}
inline void HDRequest_ReturnRateData::set_tariffnotes(bool value) {
  
  tariffnotes_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.tariffNotes)
}

// bool isBookable = 16;
inline void HDRequest_ReturnRateData::clear_isbookable() {
  isbookable_ = false;
}
inline bool HDRequest_ReturnRateData::isbookable() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.isBookable)
  return isbookable_;
}
inline void HDRequest_ReturnRateData::set_isbookable(bool value) {
  
  isbookable_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.isBookable)
}

// bool onRequest = 17;
inline void HDRequest_ReturnRateData::clear_onrequest() {
  onrequest_ = false;
}
inline bool HDRequest_ReturnRateData::onrequest() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.onRequest)
  return onrequest_;
}
inline void HDRequest_ReturnRateData::set_onrequest(bool value) {
  
  onrequest_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.onRequest)
}

// bool total = 18;
inline void HDRequest_ReturnRateData::clear_total() {
  total_ = false;
}
inline bool HDRequest_ReturnRateData::total() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.total)
  return total_;
}
inline void HDRequest_ReturnRateData::set_total(bool value) {
  
  total_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.total)
}

// bool dates = 19;
inline void HDRequest_ReturnRateData::clear_dates() {
  dates_ = false;
}
inline bool HDRequest_ReturnRateData::dates() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.dates)
  return dates_;
}
inline void HDRequest_ReturnRateData::set_dates(bool value) {
  
  dates_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.dates)
}

// bool freeStay = 20;
inline void HDRequest_ReturnRateData::clear_freestay() {
  freestay_ = false;
}
inline bool HDRequest_ReturnRateData::freestay() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.freeStay)
  return freestay_;
}
inline void HDRequest_ReturnRateData::set_freestay(bool value) {
  
  freestay_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.freeStay)
}

// bool discount = 21;
inline void HDRequest_ReturnRateData::clear_discount() {
  discount_ = false;
}
inline bool HDRequest_ReturnRateData::discount() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.discount)
  return discount_;
}
inline void HDRequest_ReturnRateData::set_discount(bool value) {
  
  discount_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.discount)
}

// bool dayOnRequest = 22;
inline void HDRequest_ReturnRateData::clear_dayonrequest() {
  dayonrequest_ = false;
}
inline bool HDRequest_ReturnRateData::dayonrequest() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.dayOnRequest)
  return dayonrequest_;
}
inline void HDRequest_ReturnRateData::set_dayonrequest(bool value) {
  
  dayonrequest_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.dayOnRequest)
}

// bool including = 23;
inline void HDRequest_ReturnRateData::clear_including() {
  including_ = false;
}
inline bool HDRequest_ReturnRateData::including() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.including)
  return including_;
}
inline void HDRequest_ReturnRateData::set_including(bool value) {
  
  including_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.including)
}

// bool dailyLeftToSell = 24;
inline void HDRequest_ReturnRateData::clear_dailylefttosell() {
  dailylefttosell_ = false;
}
inline bool HDRequest_ReturnRateData::dailylefttosell() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.dailyLeftToSell)
  return dailylefttosell_;
}
inline void HDRequest_ReturnRateData::set_dailylefttosell(bool value) {
  
  dailylefttosell_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.dailyLeftToSell)
}

// bool dailyMinStay = 25;
inline void HDRequest_ReturnRateData::clear_dailyminstay() {
  dailyminstay_ = false;
}
inline bool HDRequest_ReturnRateData::dailyminstay() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.dailyMinStay)
  return dailyminstay_;
}
inline void HDRequest_ReturnRateData::set_dailyminstay(bool value) {
  
  dailyminstay_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.dailyMinStay)
}

// bool leftToSell = 26;
inline void HDRequest_ReturnRateData::clear_lefttosell() {
  lefttosell_ = false;
}
inline bool HDRequest_ReturnRateData::lefttosell() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.leftToSell)
  return lefttosell_;
}
inline void HDRequest_ReturnRateData::set_lefttosell(bool value) {
  
  lefttosell_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.leftToSell)
}

// bool specials = 27;
inline void HDRequest_ReturnRateData::clear_specials() {
  specials_ = false;
}
inline bool HDRequest_ReturnRateData::specials() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.ReturnRateData.specials)
  return specials_;
}
inline void HDRequest_ReturnRateData::set_specials(bool value) {
  
  specials_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.ReturnRateData.specials)
}

// -------------------------------------------------------------------

// HDRequest

// string hotelDataRequest = 1;
inline void HDRequest::clear_hoteldatarequest() {
  hoteldatarequest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDRequest::hoteldatarequest() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.hotelDataRequest)
  return hoteldatarequest_.GetNoArena();
}
inline void HDRequest::set_hoteldatarequest(const ::std::string& value) {
  
  hoteldatarequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.hotelDataRequest)
}
#if LANG_CXX11
inline void HDRequest::set_hoteldatarequest(::std::string&& value) {
  
  hoteldatarequest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDRequest.hotelDataRequest)
}
#endif
inline void HDRequest::set_hoteldatarequest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hoteldatarequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDRequest.hotelDataRequest)
}
inline void HDRequest::set_hoteldatarequest(const char* value, size_t size) {
  
  hoteldatarequest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDRequest.hotelDataRequest)
}
inline ::std::string* HDRequest::mutable_hoteldatarequest() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDRequest.hotelDataRequest)
  return hoteldatarequest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDRequest::release_hoteldatarequest() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDRequest.hotelDataRequest)
  
  return hoteldatarequest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDRequest::set_allocated_hoteldatarequest(::std::string* hoteldatarequest) {
  if (hoteldatarequest != NULL) {
    
  } else {
    
  }
  hoteldatarequest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hoteldatarequest);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDRequest.hotelDataRequest)
}

// repeated .protobuffer.dotwproto.HDRequest.HotelIds hotelIds = 2;
inline int HDRequest::hotelids_size() const {
  return hotelids_.size();
}
inline void HDRequest::clear_hotelids() {
  hotelids_.Clear();
}
inline const ::protobuffer::dotwproto::HDRequest_HotelIds& HDRequest::hotelids(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.hotelIds)
  return hotelids_.Get(index);
}
inline ::protobuffer::dotwproto::HDRequest_HotelIds* HDRequest::mutable_hotelids(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDRequest.hotelIds)
  return hotelids_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDRequest_HotelIds* HDRequest::add_hotelids() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDRequest.hotelIds)
  return hotelids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDRequest_HotelIds >*
HDRequest::mutable_hotelids() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDRequest.hotelIds)
  return &hotelids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDRequest_HotelIds >&
HDRequest::hotelids() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDRequest.hotelIds)
  return hotelids_;
}

// .protobuffer.dotwproto.HDRequest.ReturnHotelStaticData returnHotelStaticData = 3;
inline bool HDRequest::has_returnhotelstaticdata() const {
  return this != internal_default_instance() && returnhotelstaticdata_ != NULL;
}
inline void HDRequest::clear_returnhotelstaticdata() {
  if (GetArenaNoVirtual() == NULL && returnhotelstaticdata_ != NULL) {
    delete returnhotelstaticdata_;
  }
  returnhotelstaticdata_ = NULL;
}
inline const ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData& HDRequest::returnhotelstaticdata() const {
  const ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* p = returnhotelstaticdata_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.returnHotelStaticData)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData*>(
      &::protobuffer::dotwproto::_HDRequest_ReturnHotelStaticData_default_instance_);
}
inline ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* HDRequest::release_returnhotelstaticdata() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDRequest.returnHotelStaticData)
  
  ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* temp = returnhotelstaticdata_;
  returnhotelstaticdata_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* HDRequest::mutable_returnhotelstaticdata() {
  
  if (returnhotelstaticdata_ == NULL) {
    returnhotelstaticdata_ = new ::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDRequest.returnHotelStaticData)
  return returnhotelstaticdata_;
}
inline void HDRequest::set_allocated_returnhotelstaticdata(::protobuffer::dotwproto::HDRequest_ReturnHotelStaticData* returnhotelstaticdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returnhotelstaticdata_;
  }
  if (returnhotelstaticdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returnhotelstaticdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returnhotelstaticdata, submessage_arena);
    }
    
  } else {
    
  }
  returnhotelstaticdata_ = returnhotelstaticdata;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDRequest.returnHotelStaticData)
}

// .protobuffer.dotwproto.HDRequest.ReturnRoomTypeStaticData returnRoomTypeStaticData = 4;
inline bool HDRequest::has_returnroomtypestaticdata() const {
  return this != internal_default_instance() && returnroomtypestaticdata_ != NULL;
}
inline void HDRequest::clear_returnroomtypestaticdata() {
  if (GetArenaNoVirtual() == NULL && returnroomtypestaticdata_ != NULL) {
    delete returnroomtypestaticdata_;
  }
  returnroomtypestaticdata_ = NULL;
}
inline const ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData& HDRequest::returnroomtypestaticdata() const {
  const ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* p = returnroomtypestaticdata_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.returnRoomTypeStaticData)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData*>(
      &::protobuffer::dotwproto::_HDRequest_ReturnRoomTypeStaticData_default_instance_);
}
inline ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* HDRequest::release_returnroomtypestaticdata() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDRequest.returnRoomTypeStaticData)
  
  ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* temp = returnroomtypestaticdata_;
  returnroomtypestaticdata_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* HDRequest::mutable_returnroomtypestaticdata() {
  
  if (returnroomtypestaticdata_ == NULL) {
    returnroomtypestaticdata_ = new ::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDRequest.returnRoomTypeStaticData)
  return returnroomtypestaticdata_;
}
inline void HDRequest::set_allocated_returnroomtypestaticdata(::protobuffer::dotwproto::HDRequest_ReturnRoomTypeStaticData* returnroomtypestaticdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returnroomtypestaticdata_;
  }
  if (returnroomtypestaticdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returnroomtypestaticdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returnroomtypestaticdata, submessage_arena);
    }
    
  } else {
    
  }
  returnroomtypestaticdata_ = returnroomtypestaticdata;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDRequest.returnRoomTypeStaticData)
}

// .protobuffer.dotwproto.HDRequest.ReturnRateData returnRateData = 5;
inline bool HDRequest::has_returnratedata() const {
  return this != internal_default_instance() && returnratedata_ != NULL;
}
inline void HDRequest::clear_returnratedata() {
  if (GetArenaNoVirtual() == NULL && returnratedata_ != NULL) {
    delete returnratedata_;
  }
  returnratedata_ = NULL;
}
inline const ::protobuffer::dotwproto::HDRequest_ReturnRateData& HDRequest::returnratedata() const {
  const ::protobuffer::dotwproto::HDRequest_ReturnRateData* p = returnratedata_;
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.returnRateData)
  return p != NULL ? *p : *reinterpret_cast<const ::protobuffer::dotwproto::HDRequest_ReturnRateData*>(
      &::protobuffer::dotwproto::_HDRequest_ReturnRateData_default_instance_);
}
inline ::protobuffer::dotwproto::HDRequest_ReturnRateData* HDRequest::release_returnratedata() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDRequest.returnRateData)
  
  ::protobuffer::dotwproto::HDRequest_ReturnRateData* temp = returnratedata_;
  returnratedata_ = NULL;
  return temp;
}
inline ::protobuffer::dotwproto::HDRequest_ReturnRateData* HDRequest::mutable_returnratedata() {
  
  if (returnratedata_ == NULL) {
    returnratedata_ = new ::protobuffer::dotwproto::HDRequest_ReturnRateData;
  }
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDRequest.returnRateData)
  return returnratedata_;
}
inline void HDRequest::set_allocated_returnratedata(::protobuffer::dotwproto::HDRequest_ReturnRateData* returnratedata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete returnratedata_;
  }
  if (returnratedata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      returnratedata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, returnratedata, submessage_arena);
    }
    
  } else {
    
  }
  returnratedata_ = returnratedata;
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDRequest.returnRateData)
}

// int32 languageId = 6;
inline void HDRequest::clear_languageid() {
  languageid_ = 0;
}
inline ::google::protobuf::int32 HDRequest::languageid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDRequest.languageId)
  return languageid_;
}
inline void HDRequest::set_languageid(::google::protobuf::int32 value) {
  
  languageid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDRequest.languageId)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData_RoomName

// string roomCode = 1;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::clear_roomcode() {
  roomcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData_RoomName::roomcode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
  return roomcode_.GetNoArena();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomcode(const ::std::string& value) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomcode(::std::string&& value) {
  
  roomcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomcode(const char* value, size_t size) {
  
  roomcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomName::mutable_roomcode() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
  return roomcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomName::release_roomcode() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
  
  return roomcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_allocated_roomcode(::std::string* roomcode) {
  if (roomcode != NULL) {
    
  } else {
    
  }
  roomcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomcode);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomCode)
}

// string roomName = 2;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData_RoomName::roomname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
  return roomname_.GetNoArena();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomname(::std::string&& value) {
  
  roomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomName::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomName::release_roomname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomName::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName.roomName)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData_RoomNames

// int32 key = 1;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.key)
  return key_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.key)
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomName roomName = 2;
inline int HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::roomname_size() const {
  return roomname_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::clear_roomname() {
  roomname_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName& HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::roomname(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.roomName)
  return roomname_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName* HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::mutable_roomname(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.roomName)
  return roomname_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName* HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::add_roomname() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.roomName)
  return roomname_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName >*
HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::mutable_roomname() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.roomName)
  return &roomname_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomName >&
HDReply_HotelStaticData_RoomTypeStaticData_RoomNames::roomname() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames.roomName)
  return roomname_;
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomNames roomNames = 1;
inline int HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::roomnames_size() const {
  return roomnames_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::clear_roomnames() {
  roomnames_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames& HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::roomnames(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName.roomNames)
  return roomnames_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::mutable_roomnames(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName.roomNames)
  return roomnames_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames* HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::add_roomnames() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName.roomNames)
  return roomnames_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames >*
HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::mutable_roomnames() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName.roomNames)
  return &roomnames_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomNames >&
HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName::roomnames() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName.roomNames)
  return roomnames_;
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo

// int32 maxOccupancy = 1;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxoccupancy() {
  maxoccupancy_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxoccupancy() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxOccupancy)
  return maxoccupancy_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxoccupancy(::google::protobuf::int32 value) {
  
  maxoccupancy_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxOccupancy)
}

// int32 maxAdultWithChildren = 2;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxadultwithchildren() {
  maxadultwithchildren_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxadultwithchildren() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxAdultWithChildren)
  return maxadultwithchildren_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxadultwithchildren(::google::protobuf::int32 value) {
  
  maxadultwithchildren_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxAdultWithChildren)
}

// int32 minChildAge = 3;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_minchildage() {
  minchildage_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::minchildage() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.minChildAge)
  return minchildage_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_minchildage(::google::protobuf::int32 value) {
  
  minchildage_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.minChildAge)
}

// int32 maxChildAge = 4;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxchildage() {
  maxchildage_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxchildage() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxChildAge)
  return maxchildage_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxchildage(::google::protobuf::int32 value) {
  
  maxchildage_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxChildAge)
}

// int32 maxAdult = 5;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxadult() {
  maxadult_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxadult() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxAdult)
  return maxadult_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxadult(::google::protobuf::int32 value) {
  
  maxadult_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxAdult)
}

// bool maxExtraBed = 6;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxextrabed() {
  maxextrabed_ = false;
}
inline bool HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxextrabed() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxExtraBed)
  return maxextrabed_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxextrabed(bool value) {
  
  maxextrabed_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxExtraBed)
}

// int32 maxChildren = 7;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_maxchildren() {
  maxchildren_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::maxchildren() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxChildren)
  return maxchildren_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_maxchildren(::google::protobuf::int32 value) {
  
  maxchildren_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.maxChildren)
}

// int32 children = 8;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::clear_children() {
  children_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::children() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.children)
  return children_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo::set_children(::google::protobuf::int32 value) {
  
  children_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo.children)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory

// string code = 1;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::code() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
  return code_.GetNoArena();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::release_code() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.code)
}

// string name = 2;
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::name() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
  return name_.GetNoArena();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::release_name() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory.name)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_RoomTypeStaticData

// int32 key = 1;
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_RoomTypeStaticData::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.key)
  return key_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.key)
}

// bool twin = 2;
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_twin() {
  twin_ = false;
}
inline bool HDReply_HotelStaticData_RoomTypeStaticData::twin() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.twin)
  return twin_;
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_twin(bool value) {
  
  twin_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.twin)
}

// repeated string roomAmenities = 3;
inline int HDReply_HotelStaticData_RoomTypeStaticData::roomamenities_size() const {
  return roomamenities_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_roomamenities() {
  roomamenities_.Clear();
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData::roomamenities(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  return roomamenities_.Get(index);
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData::mutable_roomamenities(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  return roomamenities_.Mutable(index);
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_roomamenities(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  roomamenities_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_roomamenities(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  roomamenities_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_roomamenities(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roomamenities_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_roomamenities(int index, const char* value, size_t size) {
  roomamenities_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData::add_roomamenities() {
  // @@protoc_insertion_point(field_add_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  return roomamenities_.Add();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::add_roomamenities(const ::std::string& value) {
  roomamenities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData::add_roomamenities(::std::string&& value) {
  roomamenities_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData::add_roomamenities(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  roomamenities_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::add_roomamenities(const char* value, size_t size) {
  roomamenities_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HDReply_HotelStaticData_RoomTypeStaticData::roomamenities() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  return roomamenities_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HDReply_HotelStaticData_RoomTypeStaticData::mutable_roomamenities() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomAmenities)
  return &roomamenities_;
}

// string name = 4;
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_RoomTypeStaticData::name() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
  return name_.GetNoArena();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
}
#endif
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_RoomTypeStaticData::release_name() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.name)
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.SupplierRoomName supplierRoomName = 5;
inline int HDReply_HotelStaticData_RoomTypeStaticData::supplierroomname_size() const {
  return supplierroomname_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_supplierroomname() {
  supplierroomname_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName& HDReply_HotelStaticData_RoomTypeStaticData::supplierroomname(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.supplierRoomName)
  return supplierroomname_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* HDReply_HotelStaticData_RoomTypeStaticData::mutable_supplierroomname(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.supplierRoomName)
  return supplierroomname_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName* HDReply_HotelStaticData_RoomTypeStaticData::add_supplierroomname() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.supplierRoomName)
  return supplierroomname_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName >*
HDReply_HotelStaticData_RoomTypeStaticData::mutable_supplierroomname() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.supplierRoomName)
  return &supplierroomname_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_SupplierRoomName >&
HDReply_HotelStaticData_RoomTypeStaticData::supplierroomname() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.supplierRoomName)
  return supplierroomname_;
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomInfo roomInfo = 6;
inline int HDReply_HotelStaticData_RoomTypeStaticData::roominfo_size() const {
  return roominfo_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_roominfo() {
  roominfo_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo& HDReply_HotelStaticData_RoomTypeStaticData::roominfo(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomInfo)
  return roominfo_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* HDReply_HotelStaticData_RoomTypeStaticData::mutable_roominfo(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomInfo)
  return roominfo_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo* HDReply_HotelStaticData_RoomTypeStaticData::add_roominfo() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomInfo)
  return roominfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo >*
HDReply_HotelStaticData_RoomTypeStaticData::mutable_roominfo() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomInfo)
  return &roominfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomInfo >&
HDReply_HotelStaticData_RoomTypeStaticData::roominfo() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomInfo)
  return roominfo_;
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.RoomCategory roomCategory = 7;
inline int HDReply_HotelStaticData_RoomTypeStaticData::roomcategory_size() const {
  return roomcategory_.size();
}
inline void HDReply_HotelStaticData_RoomTypeStaticData::clear_roomcategory() {
  roomcategory_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory& HDReply_HotelStaticData_RoomTypeStaticData::roomcategory(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomCategory)
  return roomcategory_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* HDReply_HotelStaticData_RoomTypeStaticData::mutable_roomcategory(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomCategory)
  return roomcategory_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory* HDReply_HotelStaticData_RoomTypeStaticData::add_roomcategory() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomCategory)
  return roomcategory_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory >*
HDReply_HotelStaticData_RoomTypeStaticData::mutable_roomcategory() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomCategory)
  return &roomcategory_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData_RoomCategory >&
HDReply_HotelStaticData_RoomTypeStaticData::roomcategory() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData.roomCategory)
  return roomcategory_;
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_ImagesData

// string thumb = 1;
inline void HDReply_HotelStaticData_ImagesData::clear_thumb() {
  thumb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_ImagesData::thumb() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
  return thumb_.GetNoArena();
}
inline void HDReply_HotelStaticData_ImagesData::set_thumb(const ::std::string& value) {
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_ImagesData::set_thumb(::std::string&& value) {
  
  thumb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
}
#endif
inline void HDReply_HotelStaticData_ImagesData::set_thumb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
}
inline void HDReply_HotelStaticData_ImagesData::set_thumb(const char* value, size_t size) {
  
  thumb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::mutable_thumb() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
  return thumb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::release_thumb() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
  
  return thumb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_ImagesData::set_allocated_thumb(::std::string* thumb) {
  if (thumb != NULL) {
    
  } else {
    
  }
  thumb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumb);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.thumb)
}

// string alt = 2;
inline void HDReply_HotelStaticData_ImagesData::clear_alt() {
  alt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_ImagesData::alt() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
  return alt_.GetNoArena();
}
inline void HDReply_HotelStaticData_ImagesData::set_alt(const ::std::string& value) {
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_ImagesData::set_alt(::std::string&& value) {
  
  alt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
}
#endif
inline void HDReply_HotelStaticData_ImagesData::set_alt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
}
inline void HDReply_HotelStaticData_ImagesData::set_alt(const char* value, size_t size) {
  
  alt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::mutable_alt() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
  return alt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::release_alt() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
  
  return alt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_ImagesData::set_allocated_alt(::std::string* alt) {
  if (alt != NULL) {
    
  } else {
    
  }
  alt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alt);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.alt)
}

// string category = 3;
inline void HDReply_HotelStaticData_ImagesData::clear_category() {
  category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_ImagesData::category() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
  return category_.GetNoArena();
}
inline void HDReply_HotelStaticData_ImagesData::set_category(const ::std::string& value) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_ImagesData::set_category(::std::string&& value) {
  
  category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
}
#endif
inline void HDReply_HotelStaticData_ImagesData::set_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
}
inline void HDReply_HotelStaticData_ImagesData::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
  return category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::release_category() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
  
  return category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_ImagesData::set_allocated_category(::std::string* category) {
  if (category != NULL) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.category)
}

// string url = 4;
inline void HDReply_HotelStaticData_ImagesData::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_ImagesData::url() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
  return url_.GetNoArena();
}
inline void HDReply_HotelStaticData_ImagesData::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_ImagesData::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
}
#endif
inline void HDReply_HotelStaticData_ImagesData::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
}
inline void HDReply_HotelStaticData_ImagesData::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_ImagesData::release_url() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_ImagesData::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.url)
}

// int32 roomTypeId = 5;
inline void HDReply_HotelStaticData_ImagesData::clear_roomtypeid() {
  roomtypeid_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData_ImagesData::roomtypeid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.roomTypeId)
  return roomtypeid_;
}
inline void HDReply_HotelStaticData_ImagesData::set_roomtypeid(::google::protobuf::int32 value) {
  
  roomtypeid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData.roomTypeId)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData_TransportationData

// string type = 1;
inline void HDReply_HotelStaticData_TransportationData::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::type() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
  return type_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
}
inline void HDReply_HotelStaticData_TransportationData::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_type() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.type)
}

// string name = 2;
inline void HDReply_HotelStaticData_TransportationData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::name() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
  return name_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
}
inline void HDReply_HotelStaticData_TransportationData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_name() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.name)
}

// string dist = 3;
inline void HDReply_HotelStaticData_TransportationData::clear_dist() {
  dist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::dist() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
  return dist_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_dist(const ::std::string& value) {
  
  dist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_dist(::std::string&& value) {
  
  dist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_dist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
}
inline void HDReply_HotelStaticData_TransportationData::set_dist(const char* value, size_t size) {
  
  dist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_dist() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
  return dist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_dist() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
  
  return dist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_dist(::std::string* dist) {
  if (dist != NULL) {
    
  } else {
    
  }
  dist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dist);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.dist)
}

// string distanceUnit = 4;
inline void HDReply_HotelStaticData_TransportationData::clear_distanceunit() {
  distanceunit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::distanceunit() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
  return distanceunit_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_distanceunit(const ::std::string& value) {
  
  distanceunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_distanceunit(::std::string&& value) {
  
  distanceunit_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_distanceunit(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  distanceunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
}
inline void HDReply_HotelStaticData_TransportationData::set_distanceunit(const char* value, size_t size) {
  
  distanceunit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_distanceunit() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
  return distanceunit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_distanceunit() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
  
  return distanceunit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_distanceunit(::std::string* distanceunit) {
  if (distanceunit != NULL) {
    
  } else {
    
  }
  distanceunit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), distanceunit);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distanceUnit)
}

// string distTime = 5;
inline void HDReply_HotelStaticData_TransportationData::clear_disttime() {
  disttime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::disttime() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
  return disttime_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_disttime(const ::std::string& value) {
  
  disttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_disttime(::std::string&& value) {
  
  disttime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_disttime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  disttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
}
inline void HDReply_HotelStaticData_TransportationData::set_disttime(const char* value, size_t size) {
  
  disttime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_disttime() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
  return disttime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_disttime() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
  
  return disttime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_disttime(::std::string* disttime) {
  if (disttime != NULL) {
    
  } else {
    
  }
  disttime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disttime);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.distTime)
}

// string directions = 6;
inline void HDReply_HotelStaticData_TransportationData::clear_directions() {
  directions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData_TransportationData::directions() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
  return directions_.GetNoArena();
}
inline void HDReply_HotelStaticData_TransportationData::set_directions(const ::std::string& value) {
  
  directions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData_TransportationData::set_directions(::std::string&& value) {
  
  directions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
}
#endif
inline void HDReply_HotelStaticData_TransportationData::set_directions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
}
inline void HDReply_HotelStaticData_TransportationData::set_directions(const char* value, size_t size) {
  
  directions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::mutable_directions() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
  return directions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData_TransportationData::release_directions() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
  
  return directions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData_TransportationData::set_allocated_directions(::std::string* directions) {
  if (directions != NULL) {
    
  } else {
    
  }
  directions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directions);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData.directions)
}

// -------------------------------------------------------------------

// HDReply_HotelStaticData

// int32 key = 1;
inline void HDReply_HotelStaticData::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.key)
  return key_;
}
inline void HDReply_HotelStaticData::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.key)
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.RoomTypeStaticData roomTypeStaticDataList = 2;
inline int HDReply_HotelStaticData::roomtypestaticdatalist_size() const {
  return roomtypestaticdatalist_.size();
}
inline void HDReply_HotelStaticData::clear_roomtypestaticdatalist() {
  roomtypestaticdatalist_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData& HDReply_HotelStaticData::roomtypestaticdatalist(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.roomTypeStaticDataList)
  return roomtypestaticdatalist_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData* HDReply_HotelStaticData::mutable_roomtypestaticdatalist(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.roomTypeStaticDataList)
  return roomtypestaticdatalist_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData* HDReply_HotelStaticData::add_roomtypestaticdatalist() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.roomTypeStaticDataList)
  return roomtypestaticdatalist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData >*
HDReply_HotelStaticData::mutable_roomtypestaticdatalist() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.roomTypeStaticDataList)
  return &roomtypestaticdatalist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_RoomTypeStaticData >&
HDReply_HotelStaticData::roomtypestaticdatalist() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.roomTypeStaticDataList)
  return roomtypestaticdatalist_;
}

// string description1 = 3;
inline void HDReply_HotelStaticData::clear_description1() {
  description1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::description1() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
  return description1_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_description1(const ::std::string& value) {
  
  description1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_description1(::std::string&& value) {
  
  description1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
}
#endif
inline void HDReply_HotelStaticData::set_description1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
}
inline void HDReply_HotelStaticData::set_description1(const char* value, size_t size) {
  
  description1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
}
inline ::std::string* HDReply_HotelStaticData::mutable_description1() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
  return description1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_description1() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
  
  return description1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_description1(::std::string* description1) {
  if (description1 != NULL) {
    
  } else {
    
  }
  description1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description1);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.description1)
}

// string description2 = 4;
inline void HDReply_HotelStaticData::clear_description2() {
  description2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::description2() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
  return description2_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_description2(const ::std::string& value) {
  
  description2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_description2(::std::string&& value) {
  
  description2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
}
#endif
inline void HDReply_HotelStaticData::set_description2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
}
inline void HDReply_HotelStaticData::set_description2(const char* value, size_t size) {
  
  description2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
}
inline ::std::string* HDReply_HotelStaticData::mutable_description2() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
  return description2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_description2() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
  
  return description2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_description2(::std::string* description2) {
  if (description2 != NULL) {
    
  } else {
    
  }
  description2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description2);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.description2)
}

// string geoPoint = 5;
inline void HDReply_HotelStaticData::clear_geopoint() {
  geopoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::geopoint() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
  return geopoint_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_geopoint(const ::std::string& value) {
  
  geopoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_geopoint(::std::string&& value) {
  
  geopoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
}
#endif
inline void HDReply_HotelStaticData::set_geopoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  geopoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
}
inline void HDReply_HotelStaticData::set_geopoint(const char* value, size_t size) {
  
  geopoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
}
inline ::std::string* HDReply_HotelStaticData::mutable_geopoint() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
  return geopoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_geopoint() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
  
  return geopoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_geopoint(::std::string* geopoint) {
  if (geopoint != NULL) {
    
  } else {
    
  }
  geopoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), geopoint);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.geoPoint)
}

// string ratingDescription = 6;
inline void HDReply_HotelStaticData::clear_ratingdescription() {
  ratingdescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::ratingdescription() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
  return ratingdescription_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_ratingdescription(const ::std::string& value) {
  
  ratingdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_ratingdescription(::std::string&& value) {
  
  ratingdescription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
}
#endif
inline void HDReply_HotelStaticData::set_ratingdescription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ratingdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
}
inline void HDReply_HotelStaticData::set_ratingdescription(const char* value, size_t size) {
  
  ratingdescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
}
inline ::std::string* HDReply_HotelStaticData::mutable_ratingdescription() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
  return ratingdescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_ratingdescription() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
  
  return ratingdescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_ratingdescription(::std::string* ratingdescription) {
  if (ratingdescription != NULL) {
    
  } else {
    
  }
  ratingdescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ratingdescription);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.ratingDescription)
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.ImagesData images = 7;
inline int HDReply_HotelStaticData::images_size() const {
  return images_.size();
}
inline void HDReply_HotelStaticData::clear_images() {
  images_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData& HDReply_HotelStaticData::images(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.images)
  return images_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData* HDReply_HotelStaticData::mutable_images(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.images)
  return images_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData* HDReply_HotelStaticData::add_images() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.images)
  return images_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData >*
HDReply_HotelStaticData::mutable_images() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.images)
  return &images_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_ImagesData >&
HDReply_HotelStaticData::images() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.images)
  return images_;
}

// bool direct = 8;
inline void HDReply_HotelStaticData::clear_direct() {
  direct_ = false;
}
inline bool HDReply_HotelStaticData::direct() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.direct)
  return direct_;
}
inline void HDReply_HotelStaticData::set_direct(bool value) {
  
  direct_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.direct)
}

// repeated int32 hotelPreference = 9;
inline int HDReply_HotelStaticData::hotelpreference_size() const {
  return hotelpreference_.size();
}
inline void HDReply_HotelStaticData::clear_hotelpreference() {
  hotelpreference_.Clear();
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::hotelpreference(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPreference)
  return hotelpreference_.Get(index);
}
inline void HDReply_HotelStaticData::set_hotelpreference(int index, ::google::protobuf::int32 value) {
  hotelpreference_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPreference)
}
inline void HDReply_HotelStaticData::add_hotelpreference(::google::protobuf::int32 value) {
  hotelpreference_.Add(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPreference)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HDReply_HotelStaticData::hotelpreference() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPreference)
  return hotelpreference_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HDReply_HotelStaticData::mutable_hotelpreference() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPreference)
  return &hotelpreference_;
}

// bool preferred = 10;
inline void HDReply_HotelStaticData::clear_preferred() {
  preferred_ = false;
}
inline bool HDReply_HotelStaticData::preferred() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.preferred)
  return preferred_;
}
inline void HDReply_HotelStaticData::set_preferred(bool value) {
  
  preferred_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.preferred)
}

// int32 builtYear = 11;
inline void HDReply_HotelStaticData::clear_builtyear() {
  builtyear_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::builtyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.builtYear)
  return builtyear_;
}
inline void HDReply_HotelStaticData::set_builtyear(::google::protobuf::int32 value) {
  
  builtyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.builtYear)
}

// int32 renovationYear = 12;
inline void HDReply_HotelStaticData::clear_renovationyear() {
  renovationyear_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::renovationyear() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.renovationYear)
  return renovationyear_;
}
inline void HDReply_HotelStaticData::set_renovationyear(::google::protobuf::int32 value) {
  
  renovationyear_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.renovationYear)
}

// int32 floors = 13;
inline void HDReply_HotelStaticData::clear_floors() {
  floors_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::floors() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.floors)
  return floors_;
}
inline void HDReply_HotelStaticData::set_floors(::google::protobuf::int32 value) {
  
  floors_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.floors)
}

// int32 noOfRooms = 14;
inline void HDReply_HotelStaticData::clear_noofrooms() {
  noofrooms_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::noofrooms() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.noOfRooms)
  return noofrooms_;
}
inline void HDReply_HotelStaticData::set_noofrooms(::google::protobuf::int32 value) {
  
  noofrooms_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.noOfRooms)
}

// bool luxury = 15;
inline void HDReply_HotelStaticData::clear_luxury() {
  luxury_ = false;
}
inline bool HDReply_HotelStaticData::luxury() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.luxury)
  return luxury_;
}
inline void HDReply_HotelStaticData::set_luxury(bool value) {
  
  luxury_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.luxury)
}

// string hotelName = 16;
inline void HDReply_HotelStaticData::clear_hotelname() {
  hotelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::hotelname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
  return hotelname_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_hotelname(const ::std::string& value) {
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_hotelname(::std::string&& value) {
  
  hotelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
}
#endif
inline void HDReply_HotelStaticData::set_hotelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
}
inline void HDReply_HotelStaticData::set_hotelname(const char* value, size_t size) {
  
  hotelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_hotelname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
  return hotelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_hotelname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
  
  return hotelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_hotelname(::std::string* hotelname) {
  if (hotelname != NULL) {
    
  } else {
    
  }
  hotelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotelname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.hotelName)
}

// string address = 17;
inline void HDReply_HotelStaticData::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::address() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.address)
  return address_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.address)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.address)
}
#endif
inline void HDReply_HotelStaticData::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.address)
}
inline void HDReply_HotelStaticData::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.address)
}
inline ::std::string* HDReply_HotelStaticData::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_address() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.address)
}

// string zipCode = 18;
inline void HDReply_HotelStaticData::clear_zipcode() {
  zipcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::zipcode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
  return zipcode_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_zipcode(const ::std::string& value) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_zipcode(::std::string&& value) {
  
  zipcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
}
#endif
inline void HDReply_HotelStaticData::set_zipcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
}
inline void HDReply_HotelStaticData::set_zipcode(const char* value, size_t size) {
  
  zipcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
}
inline ::std::string* HDReply_HotelStaticData::mutable_zipcode() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
  return zipcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_zipcode() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
  
  return zipcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_zipcode(::std::string* zipcode) {
  if (zipcode != NULL) {
    
  } else {
    
  }
  zipcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zipcode);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.zipCode)
}

// string location = 19;
inline void HDReply_HotelStaticData::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::location() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.location)
  return location_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.location)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.location)
}
#endif
inline void HDReply_HotelStaticData::set_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.location)
}
inline void HDReply_HotelStaticData::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.location)
}
inline ::std::string* HDReply_HotelStaticData::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_location() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.location)
}

// int32 locationId = 20;
inline void HDReply_HotelStaticData::clear_locationid() {
  locationid_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::locationid() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.locationId)
  return locationid_;
}
inline void HDReply_HotelStaticData::set_locationid(::google::protobuf::int32 value) {
  
  locationid_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.locationId)
}

// string location1 = 21;
inline void HDReply_HotelStaticData::clear_location1() {
  location1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::location1() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
  return location1_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_location1(const ::std::string& value) {
  
  location1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_location1(::std::string&& value) {
  
  location1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
}
#endif
inline void HDReply_HotelStaticData::set_location1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
}
inline void HDReply_HotelStaticData::set_location1(const char* value, size_t size) {
  
  location1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
}
inline ::std::string* HDReply_HotelStaticData::mutable_location1() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
  return location1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_location1() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
  
  return location1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_location1(::std::string* location1) {
  if (location1 != NULL) {
    
  } else {
    
  }
  location1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location1);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.location1)
}

// string location2 = 22;
inline void HDReply_HotelStaticData::clear_location2() {
  location2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::location2() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
  return location2_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_location2(const ::std::string& value) {
  
  location2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_location2(::std::string&& value) {
  
  location2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
}
#endif
inline void HDReply_HotelStaticData::set_location2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
}
inline void HDReply_HotelStaticData::set_location2(const char* value, size_t size) {
  
  location2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
}
inline ::std::string* HDReply_HotelStaticData::mutable_location2() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
  return location2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_location2() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
  
  return location2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_location2(::std::string* location2) {
  if (location2 != NULL) {
    
  } else {
    
  }
  location2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location2);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.location2)
}

// string location3 = 23;
inline void HDReply_HotelStaticData::clear_location3() {
  location3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::location3() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
  return location3_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_location3(const ::std::string& value) {
  
  location3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_location3(::std::string&& value) {
  
  location3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
}
#endif
inline void HDReply_HotelStaticData::set_location3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  location3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
}
inline void HDReply_HotelStaticData::set_location3(const char* value, size_t size) {
  
  location3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
}
inline ::std::string* HDReply_HotelStaticData::mutable_location3() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
  return location3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_location3() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
  
  return location3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_location3(::std::string* location3) {
  if (location3 != NULL) {
    
  } else {
    
  }
  location3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location3);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.location3)
}

// string cityName = 24;
inline void HDReply_HotelStaticData::clear_cityname() {
  cityname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::cityname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
  return cityname_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_cityname(const ::std::string& value) {
  
  cityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_cityname(::std::string&& value) {
  
  cityname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
}
#endif
inline void HDReply_HotelStaticData::set_cityname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
}
inline void HDReply_HotelStaticData::set_cityname(const char* value, size_t size) {
  
  cityname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_cityname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
  return cityname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_cityname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
  
  return cityname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_cityname(::std::string* cityname) {
  if (cityname != NULL) {
    
  } else {
    
  }
  cityname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cityname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.cityName)
}

// int32 cityCode = 25;
inline void HDReply_HotelStaticData::clear_citycode() {
  citycode_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::citycode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.cityCode)
  return citycode_;
}
inline void HDReply_HotelStaticData::set_citycode(::google::protobuf::int32 value) {
  
  citycode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.cityCode)
}

// string stateName = 26;
inline void HDReply_HotelStaticData::clear_statename() {
  statename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::statename() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
  return statename_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_statename(const ::std::string& value) {
  
  statename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_statename(::std::string&& value) {
  
  statename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
}
#endif
inline void HDReply_HotelStaticData::set_statename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  statename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
}
inline void HDReply_HotelStaticData::set_statename(const char* value, size_t size) {
  
  statename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_statename() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
  return statename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_statename() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
  
  return statename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_statename(::std::string* statename) {
  if (statename != NULL) {
    
  } else {
    
  }
  statename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), statename);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.stateName)
}

// int32 stateCode = 27;
inline void HDReply_HotelStaticData::clear_statecode() {
  statecode_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::statecode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.stateCode)
  return statecode_;
}
inline void HDReply_HotelStaticData::set_statecode(::google::protobuf::int32 value) {
  
  statecode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.stateCode)
}

// string countryName = 28;
inline void HDReply_HotelStaticData::clear_countryname() {
  countryname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::countryname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
  return countryname_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_countryname(const ::std::string& value) {
  
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_countryname(::std::string&& value) {
  
  countryname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
}
#endif
inline void HDReply_HotelStaticData::set_countryname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
}
inline void HDReply_HotelStaticData::set_countryname(const char* value, size_t size) {
  
  countryname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_countryname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
  return countryname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_countryname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
  
  return countryname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_countryname(::std::string* countryname) {
  if (countryname != NULL) {
    
  } else {
    
  }
  countryname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), countryname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.countryName)
}

// int32 countryCode = 29;
inline void HDReply_HotelStaticData::clear_countrycode() {
  countrycode_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::countrycode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.countryCode)
  return countrycode_;
}
inline void HDReply_HotelStaticData::set_countrycode(::google::protobuf::int32 value) {
  
  countrycode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.countryCode)
}

// string regionName = 30;
inline void HDReply_HotelStaticData::clear_regionname() {
  regionname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::regionname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
  return regionname_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_regionname(const ::std::string& value) {
  
  regionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_regionname(::std::string&& value) {
  
  regionname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
}
#endif
inline void HDReply_HotelStaticData::set_regionname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  regionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
}
inline void HDReply_HotelStaticData::set_regionname(const char* value, size_t size) {
  
  regionname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_regionname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
  return regionname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_regionname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
  
  return regionname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_regionname(::std::string* regionname) {
  if (regionname != NULL) {
    
  } else {
    
  }
  regionname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), regionname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.regionName)
}

// int32 regionCode = 31;
inline void HDReply_HotelStaticData::clear_regioncode() {
  regioncode_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::regioncode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.regionCode)
  return regioncode_;
}
inline void HDReply_HotelStaticData::set_regioncode(::google::protobuf::int32 value) {
  
  regioncode_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.regionCode)
}

// repeated string amenitie = 32;
inline int HDReply_HotelStaticData::amenitie_size() const {
  return amenitie_.size();
}
inline void HDReply_HotelStaticData::clear_amenitie() {
  amenitie_.Clear();
}
inline const ::std::string& HDReply_HotelStaticData::amenitie(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  return amenitie_.Get(index);
}
inline ::std::string* HDReply_HotelStaticData::mutable_amenitie(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  return amenitie_.Mutable(index);
}
inline void HDReply_HotelStaticData::set_amenitie(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  amenitie_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_amenitie(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  amenitie_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HDReply_HotelStaticData::set_amenitie(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  amenitie_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
inline void HDReply_HotelStaticData::set_amenitie(int index, const char* value, size_t size) {
  amenitie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
inline ::std::string* HDReply_HotelStaticData::add_amenitie() {
  // @@protoc_insertion_point(field_add_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  return amenitie_.Add();
}
inline void HDReply_HotelStaticData::add_amenitie(const ::std::string& value) {
  amenitie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::add_amenitie(::std::string&& value) {
  amenitie_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
#endif
inline void HDReply_HotelStaticData::add_amenitie(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  amenitie_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
inline void HDReply_HotelStaticData::add_amenitie(const char* value, size_t size) {
  amenitie_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HDReply_HotelStaticData::amenitie() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  return amenitie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HDReply_HotelStaticData::mutable_amenitie() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.amenitie)
  return &amenitie_;
}

// repeated string leisure = 33;
inline int HDReply_HotelStaticData::leisure_size() const {
  return leisure_.size();
}
inline void HDReply_HotelStaticData::clear_leisure() {
  leisure_.Clear();
}
inline const ::std::string& HDReply_HotelStaticData::leisure(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  return leisure_.Get(index);
}
inline ::std::string* HDReply_HotelStaticData::mutable_leisure(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  return leisure_.Mutable(index);
}
inline void HDReply_HotelStaticData::set_leisure(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  leisure_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_leisure(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  leisure_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HDReply_HotelStaticData::set_leisure(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leisure_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
inline void HDReply_HotelStaticData::set_leisure(int index, const char* value, size_t size) {
  leisure_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
inline ::std::string* HDReply_HotelStaticData::add_leisure() {
  // @@protoc_insertion_point(field_add_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  return leisure_.Add();
}
inline void HDReply_HotelStaticData::add_leisure(const ::std::string& value) {
  leisure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::add_leisure(::std::string&& value) {
  leisure_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
#endif
inline void HDReply_HotelStaticData::add_leisure(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  leisure_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
inline void HDReply_HotelStaticData::add_leisure(const char* value, size_t size) {
  leisure_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HDReply_HotelStaticData::leisure() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  return leisure_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HDReply_HotelStaticData::mutable_leisure() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.leisure)
  return &leisure_;
}

// repeated string business = 34;
inline int HDReply_HotelStaticData::business_size() const {
  return business_.size();
}
inline void HDReply_HotelStaticData::clear_business() {
  business_.Clear();
}
inline const ::std::string& HDReply_HotelStaticData::business(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  return business_.Get(index);
}
inline ::std::string* HDReply_HotelStaticData::mutable_business(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  return business_.Mutable(index);
}
inline void HDReply_HotelStaticData::set_business(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  business_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_business(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  business_.Mutable(index)->assign(std::move(value));
}
#endif
inline void HDReply_HotelStaticData::set_business(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  business_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
inline void HDReply_HotelStaticData::set_business(int index, const char* value, size_t size) {
  business_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
inline ::std::string* HDReply_HotelStaticData::add_business() {
  // @@protoc_insertion_point(field_add_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  return business_.Add();
}
inline void HDReply_HotelStaticData::add_business(const ::std::string& value) {
  business_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::add_business(::std::string&& value) {
  business_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
#endif
inline void HDReply_HotelStaticData::add_business(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  business_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
inline void HDReply_HotelStaticData::add_business(const char* value, size_t size) {
  business_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.business)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
HDReply_HotelStaticData::business() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  return business_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
HDReply_HotelStaticData::mutable_business() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.business)
  return &business_;
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData.TransportationData transportation = 35;
inline int HDReply_HotelStaticData::transportation_size() const {
  return transportation_.size();
}
inline void HDReply_HotelStaticData::clear_transportation() {
  transportation_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData& HDReply_HotelStaticData::transportation(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.transportation)
  return transportation_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData* HDReply_HotelStaticData::mutable_transportation(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.transportation)
  return transportation_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData* HDReply_HotelStaticData::add_transportation() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.HotelStaticData.transportation)
  return transportation_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData >*
HDReply_HotelStaticData::mutable_transportation() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.HotelStaticData.transportation)
  return &transportation_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData_TransportationData >&
HDReply_HotelStaticData::transportation() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.HotelStaticData.transportation)
  return transportation_;
}

// string hotelPhone = 36;
inline void HDReply_HotelStaticData::clear_hotelphone() {
  hotelphone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::hotelphone() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
  return hotelphone_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_hotelphone(const ::std::string& value) {
  
  hotelphone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_hotelphone(::std::string&& value) {
  
  hotelphone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
}
#endif
inline void HDReply_HotelStaticData::set_hotelphone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hotelphone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
}
inline void HDReply_HotelStaticData::set_hotelphone(const char* value, size_t size) {
  
  hotelphone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
}
inline ::std::string* HDReply_HotelStaticData::mutable_hotelphone() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
  return hotelphone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_hotelphone() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
  
  return hotelphone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_hotelphone(::std::string* hotelphone) {
  if (hotelphone != NULL) {
    
  } else {
    
  }
  hotelphone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotelphone);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.hotelPhone)
}

// int32 hotelCheckIn = 37;
inline void HDReply_HotelStaticData::clear_hotelcheckin() {
  hotelcheckin_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::hotelcheckin() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelCheckIn)
  return hotelcheckin_;
}
inline void HDReply_HotelStaticData::set_hotelcheckin(::google::protobuf::int32 value) {
  
  hotelcheckin_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelCheckIn)
}

// int32 hotelCheckOut = 38;
inline void HDReply_HotelStaticData::clear_hotelcheckout() {
  hotelcheckout_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::hotelcheckout() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelCheckOut)
  return hotelcheckout_;
}
inline void HDReply_HotelStaticData::set_hotelcheckout(::google::protobuf::int32 value) {
  
  hotelcheckout_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelCheckOut)
}

// int32 minAge = 39;
inline void HDReply_HotelStaticData::clear_minage() {
  minage_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::minage() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.minAge)
  return minage_;
}
inline void HDReply_HotelStaticData::set_minage(::google::protobuf::int32 value) {
  
  minage_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.minAge)
}

// int32 rating = 40;
inline void HDReply_HotelStaticData::clear_rating() {
  rating_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::rating() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.rating)
  return rating_;
}
inline void HDReply_HotelStaticData::set_rating(::google::protobuf::int32 value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.rating)
}

// bool fireSafety = 41;
inline void HDReply_HotelStaticData::clear_firesafety() {
  firesafety_ = false;
}
inline bool HDReply_HotelStaticData::firesafety() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.fireSafety)
  return firesafety_;
}
inline void HDReply_HotelStaticData::set_firesafety(bool value) {
  
  firesafety_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.fireSafety)
}

// int32 chain = 42;
inline void HDReply_HotelStaticData::clear_chain() {
  chain_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::chain() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.chain)
  return chain_;
}
inline void HDReply_HotelStaticData::set_chain(::google::protobuf::int32 value) {
  
  chain_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.chain)
}

// string lastUpdated = 43;
inline void HDReply_HotelStaticData::clear_lastupdated() {
  lastupdated_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::lastupdated() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
  return lastupdated_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_lastupdated(const ::std::string& value) {
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_lastupdated(::std::string&& value) {
  
  lastupdated_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
}
#endif
inline void HDReply_HotelStaticData::set_lastupdated(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
}
inline void HDReply_HotelStaticData::set_lastupdated(const char* value, size_t size) {
  
  lastupdated_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
}
inline ::std::string* HDReply_HotelStaticData::mutable_lastupdated() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
  return lastupdated_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_lastupdated() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
  
  return lastupdated_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_lastupdated(::std::string* lastupdated) {
  if (lastupdated != NULL) {
    
  } else {
    
  }
  lastupdated_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lastupdated);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.lastUpdated)
}

// int32 transferMandatory = 44;
inline void HDReply_HotelStaticData::clear_transfermandatory() {
  transfermandatory_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::transfermandatory() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.transferMandatory)
  return transfermandatory_;
}
inline void HDReply_HotelStaticData::set_transfermandatory(::google::protobuf::int32 value) {
  
  transfermandatory_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.transferMandatory)
}

// string tariffNotes = 45;
inline void HDReply_HotelStaticData::clear_tariffnotes() {
  tariffnotes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::tariffnotes() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
  return tariffnotes_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_tariffnotes(const ::std::string& value) {
  
  tariffnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_tariffnotes(::std::string&& value) {
  
  tariffnotes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
}
#endif
inline void HDReply_HotelStaticData::set_tariffnotes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tariffnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
}
inline void HDReply_HotelStaticData::set_tariffnotes(const char* value, size_t size) {
  
  tariffnotes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
}
inline ::std::string* HDReply_HotelStaticData::mutable_tariffnotes() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
  return tariffnotes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_tariffnotes() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
  
  return tariffnotes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_tariffnotes(::std::string* tariffnotes) {
  if (tariffnotes != NULL) {
    
  } else {
    
  }
  tariffnotes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tariffnotes);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.tariffNotes)
}

// string chainName = 46;
inline void HDReply_HotelStaticData::clear_chainname() {
  chainname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::chainname() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
  return chainname_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_chainname(const ::std::string& value) {
  
  chainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_chainname(::std::string&& value) {
  
  chainname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
}
#endif
inline void HDReply_HotelStaticData::set_chainname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
}
inline void HDReply_HotelStaticData::set_chainname(const char* value, size_t size) {
  
  chainname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
}
inline ::std::string* HDReply_HotelStaticData::mutable_chainname() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
  return chainname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_chainname() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
  
  return chainname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_chainname(::std::string* chainname) {
  if (chainname != NULL) {
    
  } else {
    
  }
  chainname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chainname);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.chainName)
}

// int32 hotelProperty = 47;
inline void HDReply_HotelStaticData::clear_hotelproperty() {
  hotelproperty_ = 0;
}
inline ::google::protobuf::int32 HDReply_HotelStaticData::hotelproperty() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.hotelProperty)
  return hotelproperty_;
}
inline void HDReply_HotelStaticData::set_hotelproperty(::google::protobuf::int32 value) {
  
  hotelproperty_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.hotelProperty)
}

// string fullAddress = 48;
inline void HDReply_HotelStaticData::clear_fulladdress() {
  fulladdress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::fulladdress() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
  return fulladdress_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_fulladdress(const ::std::string& value) {
  
  fulladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_fulladdress(::std::string&& value) {
  
  fulladdress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
}
#endif
inline void HDReply_HotelStaticData::set_fulladdress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fulladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
}
inline void HDReply_HotelStaticData::set_fulladdress(const char* value, size_t size) {
  
  fulladdress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
}
inline ::std::string* HDReply_HotelStaticData::mutable_fulladdress() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
  return fulladdress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_fulladdress() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
  
  return fulladdress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_fulladdress(::std::string* fulladdress) {
  if (fulladdress != NULL) {
    
  } else {
    
  }
  fulladdress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fulladdress);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.fullAddress)
}

// string attraction = 49;
inline void HDReply_HotelStaticData::clear_attraction() {
  attraction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply_HotelStaticData::attraction() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
  return attraction_.GetNoArena();
}
inline void HDReply_HotelStaticData::set_attraction(const ::std::string& value) {
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
}
#if LANG_CXX11
inline void HDReply_HotelStaticData::set_attraction(::std::string&& value) {
  
  attraction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
}
#endif
inline void HDReply_HotelStaticData::set_attraction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
}
inline void HDReply_HotelStaticData::set_attraction(const char* value, size_t size) {
  
  attraction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
}
inline ::std::string* HDReply_HotelStaticData::mutable_attraction() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
  return attraction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply_HotelStaticData::release_attraction() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
  
  return attraction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply_HotelStaticData::set_allocated_attraction(::std::string* attraction) {
  if (attraction != NULL) {
    
  } else {
    
  }
  attraction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attraction);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.HotelStaticData.attraction)
}

// bool exclusive = 50;
inline void HDReply_HotelStaticData::clear_exclusive() {
  exclusive_ = false;
}
inline bool HDReply_HotelStaticData::exclusive() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.HotelStaticData.exclusive)
  return exclusive_;
}
inline void HDReply_HotelStaticData::set_exclusive(bool value) {
  
  exclusive_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.HotelStaticData.exclusive)
}

// -------------------------------------------------------------------

// HDReply

// int32 key = 1;
inline void HDReply::clear_key() {
  key_ = 0;
}
inline ::google::protobuf::int32 HDReply::key() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.key)
  return key_;
}
inline void HDReply::set_key(::google::protobuf::int32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.key)
}

// repeated .protobuffer.dotwproto.HDReply.HotelStaticData hotelStaticDataList = 2;
inline int HDReply::hotelstaticdatalist_size() const {
  return hotelstaticdatalist_.size();
}
inline void HDReply::clear_hotelstaticdatalist() {
  hotelstaticdatalist_.Clear();
}
inline const ::protobuffer::dotwproto::HDReply_HotelStaticData& HDReply::hotelstaticdatalist(int index) const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.hotelStaticDataList)
  return hotelstaticdatalist_.Get(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData* HDReply::mutable_hotelstaticdatalist(int index) {
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.hotelStaticDataList)
  return hotelstaticdatalist_.Mutable(index);
}
inline ::protobuffer::dotwproto::HDReply_HotelStaticData* HDReply::add_hotelstaticdatalist() {
  // @@protoc_insertion_point(field_add:protobuffer.dotwproto.HDReply.hotelStaticDataList)
  return hotelstaticdatalist_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData >*
HDReply::mutable_hotelstaticdatalist() {
  // @@protoc_insertion_point(field_mutable_list:protobuffer.dotwproto.HDReply.hotelStaticDataList)
  return &hotelstaticdatalist_;
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuffer::dotwproto::HDReply_HotelStaticData >&
HDReply::hotelstaticdatalist() const {
  // @@protoc_insertion_point(field_list:protobuffer.dotwproto.HDReply.hotelStaticDataList)
  return hotelstaticdatalist_;
}

// string error = 3;
inline void HDReply::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply::error() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.error)
  return error_.GetNoArena();
}
inline void HDReply::set_error(const ::std::string& value) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.error)
}
#if LANG_CXX11
inline void HDReply::set_error(::std::string&& value) {
  
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.error)
}
#endif
inline void HDReply::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.error)
}
inline void HDReply::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.error)
}
inline ::std::string* HDReply::mutable_error() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply::release_error() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.error)
  
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.error)
}

// string errorCode = 4;
inline void HDReply::clear_errorcode() {
  errorcode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply::errorcode() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.errorCode)
  return errorcode_.GetNoArena();
}
inline void HDReply::set_errorcode(const ::std::string& value) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.errorCode)
}
#if LANG_CXX11
inline void HDReply::set_errorcode(::std::string&& value) {
  
  errorcode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.errorCode)
}
#endif
inline void HDReply::set_errorcode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.errorCode)
}
inline void HDReply::set_errorcode(const char* value, size_t size) {
  
  errorcode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.errorCode)
}
inline ::std::string* HDReply::mutable_errorcode() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.errorCode)
  return errorcode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply::release_errorcode() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.errorCode)
  
  return errorcode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply::set_allocated_errorcode(::std::string* errorcode) {
  if (errorcode != NULL) {
    
  } else {
    
  }
  errorcode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorcode);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.errorCode)
}

// string replystring = 5;
inline void HDReply::clear_replystring() {
  replystring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HDReply::replystring() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.replystring)
  return replystring_.GetNoArena();
}
inline void HDReply::set_replystring(const ::std::string& value) {
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.replystring)
}
#if LANG_CXX11
inline void HDReply::set_replystring(::std::string&& value) {
  
  replystring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobuffer.dotwproto.HDReply.replystring)
}
#endif
inline void HDReply::set_replystring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuffer.dotwproto.HDReply.replystring)
}
inline void HDReply::set_replystring(const char* value, size_t size) {
  
  replystring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuffer.dotwproto.HDReply.replystring)
}
inline ::std::string* HDReply::mutable_replystring() {
  
  // @@protoc_insertion_point(field_mutable:protobuffer.dotwproto.HDReply.replystring)
  return replystring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HDReply::release_replystring() {
  // @@protoc_insertion_point(field_release:protobuffer.dotwproto.HDReply.replystring)
  
  return replystring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HDReply::set_allocated_replystring(::std::string* replystring) {
  if (replystring != NULL) {
    
  } else {
    
  }
  replystring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replystring);
  // @@protoc_insertion_point(field_set_allocated:protobuffer.dotwproto.HDReply.replystring)
}

// int32 replystringInt = 6;
inline void HDReply::clear_replystringint() {
  replystringint_ = 0;
}
inline ::google::protobuf::int32 HDReply::replystringint() const {
  // @@protoc_insertion_point(field_get:protobuffer.dotwproto.HDReply.replystringInt)
  return replystringint_;
}
inline void HDReply::set_replystringint(::google::protobuf::int32 value) {
  
  replystringint_ = value;
  // @@protoc_insertion_point(field_set:protobuffer.dotwproto.HDReply.replystringInt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dotwproto
}  // namespace protobuffer

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genProto_2fDotw_5fProtoBuf_2eproto__INCLUDED
