// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/dotw.proto

#include "proto/dotw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_RoomCategory_proto_2fdotw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdotw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto;
namespace dotw {
namespace proto {
class PsfilterRequest_RoomCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_RoomCategory> _instance;
} _PsfilterRequest_RoomCategory_default_instance_;
class PsfilterRequest_RoomTypeFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_RoomTypeFilters> _instance;
} _PsfilterRequest_RoomTypeFilters_default_instance_;
class PsfilterRequest_RoomOccupancyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_RoomOccupancy> _instance;
} _PsfilterRequest_RoomOccupancy_default_instance_;
class PsfilterRequest_HotelFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_HotelFilters> _instance;
} _PsfilterRequest_HotelFilters_default_instance_;
class PsfilterRequest_AdditionalFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_AdditionalFilters> _instance;
} _PsfilterRequest_AdditionalFilters_default_instance_;
class PsfilterRequest_SearchPeriodCriteriaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest_SearchPeriodCriteria> _instance;
} _PsfilterRequest_SearchPeriodCriteria_default_instance_;
class PsfilterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterRequest> _instance;
} _PsfilterRequest_default_instance_;
class PsfilterReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsfilterReply> _instance;
} _PsfilterReply_default_instance_;
}  // namespace proto
}  // namespace dotw
static void InitDefaultsPsfilterRequest_RoomCategory_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_RoomCategory_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_RoomCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_RoomCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_RoomCategory_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterRequest_RoomCategory_proto_2fdotw_2eproto}, {}};

static void InitDefaultsPsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_RoomTypeFilters_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_RoomTypeFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_RoomTypeFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto}, {
      &scc_info_PsfilterRequest_RoomCategory_proto_2fdotw_2eproto.base,}};

static void InitDefaultsPsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_RoomOccupancy_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_RoomOccupancy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_RoomOccupancy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto}, {}};

static void InitDefaultsPsfilterRequest_HotelFilters_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_HotelFilters_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_HotelFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_HotelFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterRequest_HotelFilters_proto_2fdotw_2eproto}, {}};

static void InitDefaultsPsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_AdditionalFilters_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_AdditionalFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_AdditionalFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto}, {}};

static void InitDefaultsPsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_SearchPeriodCriteria_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest_SearchPeriodCriteria();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest_SearchPeriodCriteria::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto}, {}};

static void InitDefaultsPsfilterRequest_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterRequest_default_instance_;
    new (ptr) ::dotw::proto::PsfilterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_PsfilterRequest_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsPsfilterRequest_proto_2fdotw_2eproto}, {
      &scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto.base,
      &scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto.base,
      &scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto.base,
      &scc_info_PsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto.base,
      &scc_info_PsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto.base,}};

static void InitDefaultsPsfilterReply_proto_2fdotw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_PsfilterReply_default_instance_;
    new (ptr) ::dotw::proto::PsfilterReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::PsfilterReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsfilterReply_proto_2fdotw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPsfilterReply_proto_2fdotw_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdotw_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fdotw_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdotw_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdotw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, maincategory_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, subcategory_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, view_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, beddingtype_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, attribute1_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomCategory, attribute2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, suite_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, roomamenitie_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, roomid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, roomname_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomTypeFilters, roomcategories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomOccupancy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomOccupancy, adults_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomOccupancy, children_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomOccupancy, twin_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_RoomOccupancy, extrabed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, rating_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, luxury_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, location_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, locationid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, amenitie_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, leisure_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, business_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, hotelpreference_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, chain_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, attraction_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, hotelname_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, builtyear_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, renovationyear_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, floors_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, noofrooms_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, firesafety_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_HotelFilters, lastupdated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_AdditionalFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_SearchPeriodCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_SearchPeriodCriteria, travelfrom_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_SearchPeriodCriteria, travelto_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest_SearchPeriodCriteria, bookingdatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, psfilter_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, customerid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, environment_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, requestsource_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, exceptrestrictions_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, passengernationalityorresidenceprovided_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, hotelids_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, city_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, country_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, bookingchannelswithautomapping_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, bookingchanneltypes_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, excludedbookingchannel_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, activeforroomcategories_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, roomocupancy_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, hotelfilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, roomtypefilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, additionalfilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterRequest, searchperiodcriteria_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::PsfilterReply, replystring_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dotw::proto::PsfilterRequest_RoomCategory)},
  { 11, -1, sizeof(::dotw::proto::PsfilterRequest_RoomTypeFilters)},
  { 21, -1, sizeof(::dotw::proto::PsfilterRequest_RoomOccupancy)},
  { 30, -1, sizeof(::dotw::proto::PsfilterRequest_HotelFilters)},
  { 52, -1, sizeof(::dotw::proto::PsfilterRequest_AdditionalFilters)},
  { 57, -1, sizeof(::dotw::proto::PsfilterRequest_SearchPeriodCriteria)},
  { 65, -1, sizeof(::dotw::proto::PsfilterRequest)},
  { 88, -1, sizeof(::dotw::proto::PsfilterReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_RoomCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_RoomTypeFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_RoomOccupancy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_HotelFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_AdditionalFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_SearchPeriodCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_PsfilterReply_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_proto_2fdotw_2eproto = {
  {}, AddDescriptors_proto_2fdotw_2eproto, "proto/dotw.proto", schemas,
  file_default_instances, TableStruct_proto_2fdotw_2eproto::offsets,
  file_level_metadata_proto_2fdotw_2eproto, 8, file_level_enum_descriptors_proto_2fdotw_2eproto, file_level_service_descriptors_proto_2fdotw_2eproto,
};

const char descriptor_table_protodef_proto_2fdotw_2eproto[] =
  "\n\020proto/dotw.proto\022\ndotw.proto\"\375\013\n\017Psfil"
  "terRequest\022\020\n\010psfilter\030\001 \001(\t\022\022\n\ncustomer"
  "Id\030\002 \001(\005\022\023\n\013environment\030\003 \001(\t\022\025\n\rrequest"
  "Source\030\004 \001(\005\022\032\n\022exceptRestrictions\030\005 \003(\005"
  "\022/\n\'passengerNationalityOrResidenceProvi"
  "ded\030\006 \001(\010\022\020\n\010hotelIds\030\007 \003(\005\022\014\n\004city\030\010 \001("
  "\005\022\017\n\007country\030\t \001(\005\022&\n\036bookingChannelsWit"
  "hAutoMapping\030\n \003(\005\022\033\n\023bookingChannelType"
  "s\030\013 \003(\005\022\036\n\026excludedBookingchannel\030\014 \003(\005\022"
  "\037\n\027activeForRoomCategories\030\r \001(\010\022\?\n\014room"
  "Ocupancy\030\016 \003(\0132).dotw.proto.PsfilterRequ"
  "est.RoomOccupancy\022>\n\014hotelFilters\030\017 \001(\0132"
  "(.dotw.proto.PsfilterRequest.HotelFilter"
  "s\022D\n\017roomTypeFilters\030\020 \001(\0132+.dotw.proto."
  "PsfilterRequest.RoomTypeFilters\022H\n\021addit"
  "ionalFilters\030\021 \001(\0132-.dotw.proto.Psfilter"
  "Request.AdditionalFilters\022N\n\024searchPerio"
  "dCriteria\030\022 \001(\01320.dotw.proto.PsfilterReq"
  "uest.SearchPeriodCriteria\032\204\001\n\014RoomCatego"
  "ry\022\024\n\014MainCategory\030\001 \001(\005\022\023\n\013SubCategory\030"
  "\002 \001(\005\022\014\n\004View\030\003 \001(\005\022\023\n\013BeddingType\030\004 \001(\005"
  "\022\022\n\nAttribute1\030\005 \001(\005\022\022\n\nAttribute2\030\006 \001(\005"
  "\032\232\001\n\017RoomTypeFilters\022\r\n\005suite\030\001 \001(\005\022\024\n\014r"
  "oomAmenitie\030\002 \001(\t\022\016\n\006roomId\030\003 \001(\t\022\020\n\010roo"
  "mName\030\004 \001(\t\022@\n\016roomCategories\030\005 \003(\0132(.do"
  "tw.proto.PsfilterRequest.RoomCategory\032Q\n"
  "\rRoomOccupancy\022\016\n\006adults\030\001 \001(\005\022\020\n\010childr"
  "en\030\002 \001(\t\022\014\n\004twin\030\003 \001(\010\022\020\n\010extraBed\030\004 \001(\010"
  "\032\317\002\n\014HotelFilters\022\016\n\006rating\030\001 \001(\t\022\016\n\006lux"
  "ury\030\002 \001(\005\022\020\n\010location\030\003 \001(\t\022\022\n\nlocationI"
  "d\030\004 \001(\t\022\020\n\010amenitie\030\005 \001(\t\022\017\n\007leisure\030\006 \001"
  "(\t\022\020\n\010business\030\007 \001(\t\022\027\n\017hotelPreference\030"
  "\010 \001(\t\022\r\n\005chain\030\t \001(\t\022\022\n\nattraction\030\n \001(\t"
  "\022\021\n\thotelName\030\013 \001(\t\022\021\n\tbuiltYear\030\014 \001(\005\022\026"
  "\n\016renovationYear\030\r \001(\005\022\016\n\006floors\030\016 \001(\005\022\021"
  "\n\tnoOfRooms\030\017 \001(\005\022\022\n\nfireSafety\030\020 \001(\005\022\023\n"
  "\013lastUpdated\030\021 \001(\t\032\023\n\021AdditionalFilters\032"
  "U\n\024SearchPeriodCriteria\022\022\n\ntravelFrom\030\001 "
  "\001(\005\022\020\n\010travelTo\030\002 \001(\005\022\027\n\017bookingDateTime"
  "\030\003 \001(\005\"$\n\rPsfilterReply\022\023\n\013replystring\030\001"
  " \001(\t2R\n\nServerDotw\022D\n\010psfilter\022\033.dotw.pr"
  "oto.PsfilterRequest\032\031.dotw.proto.Psfilte"
  "rReply\"\000B\006\370\001\001\320\002\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdotw_2eproto = {
  false, descriptor_table_protodef_proto_2fdotw_2eproto,
  "proto/dotw.proto", &assign_descriptors_table_proto_2fdotw_2eproto, 1704,
};

void AddDescriptors_proto_2fdotw_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_RoomCategory_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterRequest_proto_2fdotw_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsfilterReply_proto_2fdotw_2eproto.base);
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fdotw_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fdotw_2eproto = []() { AddDescriptors_proto_2fdotw_2eproto(); return true; }();
namespace dotw {
namespace proto {

// ===================================================================

void PsfilterRequest_RoomCategory::InitAsDefaultInstance() {
}
class PsfilterRequest_RoomCategory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest_RoomCategory::kMainCategoryFieldNumber;
const int PsfilterRequest_RoomCategory::kSubCategoryFieldNumber;
const int PsfilterRequest_RoomCategory::kViewFieldNumber;
const int PsfilterRequest_RoomCategory::kBeddingTypeFieldNumber;
const int PsfilterRequest_RoomCategory::kAttribute1FieldNumber;
const int PsfilterRequest_RoomCategory::kAttribute2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_RoomCategory::PsfilterRequest_RoomCategory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.RoomCategory)
}
PsfilterRequest_RoomCategory::PsfilterRequest_RoomCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.RoomCategory)
}
PsfilterRequest_RoomCategory::PsfilterRequest_RoomCategory(const PsfilterRequest_RoomCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maincategory_, &from.maincategory_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute2_) -
    reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.RoomCategory)
}

void PsfilterRequest_RoomCategory::SharedCtor() {
  ::memset(&maincategory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attribute2_) -
      reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
}

PsfilterRequest_RoomCategory::~PsfilterRequest_RoomCategory() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.RoomCategory)
  SharedDtor();
}

void PsfilterRequest_RoomCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PsfilterRequest_RoomCategory::ArenaDtor(void* object) {
  PsfilterRequest_RoomCategory* _this = reinterpret_cast< PsfilterRequest_RoomCategory* >(object);
  (void)_this;
}
void PsfilterRequest_RoomCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_RoomCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_RoomCategory& PsfilterRequest_RoomCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_RoomCategory_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_RoomCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maincategory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attribute2_) -
      reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_RoomCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MainCategory = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        maincategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 SubCategory = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        subcategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 View = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 BeddingType = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        beddingtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 Attribute1 = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        attribute1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 Attribute2 = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        attribute2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_RoomCategory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.RoomCategory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 MainCategory = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maincategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SubCategory = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 View = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BeddingType = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &beddingtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Attribute1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Attribute2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.RoomCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.RoomCategory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_RoomCategory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->maincategory(), output);
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->subcategory(), output);
  }

  // int32 View = 3;
  if (this->view() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->view(), output);
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->beddingtype(), output);
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->attribute1(), output);
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->attribute2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.RoomCategory)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_RoomCategory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->maincategory(), target);
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->subcategory(), target);
  }

  // int32 View = 3;
  if (this->view() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->view(), target);
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->beddingtype(), target);
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->attribute1(), target);
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->attribute2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.RoomCategory)
  return target;
}

size_t PsfilterRequest_RoomCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.RoomCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maincategory());
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subcategory());
  }

  // int32 View = 3;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view());
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->beddingtype());
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->attribute1());
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->attribute2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_RoomCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.RoomCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_RoomCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_RoomCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.RoomCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.RoomCategory)
    MergeFrom(*source);
  }
}

void PsfilterRequest_RoomCategory::MergeFrom(const PsfilterRequest_RoomCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.RoomCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maincategory() != 0) {
    set_maincategory(from.maincategory());
  }
  if (from.subcategory() != 0) {
    set_subcategory(from.subcategory());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.beddingtype() != 0) {
    set_beddingtype(from.beddingtype());
  }
  if (from.attribute1() != 0) {
    set_attribute1(from.attribute1());
  }
  if (from.attribute2() != 0) {
    set_attribute2(from.attribute2());
  }
}

void PsfilterRequest_RoomCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.RoomCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_RoomCategory::CopyFrom(const PsfilterRequest_RoomCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.RoomCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_RoomCategory::IsInitialized() const {
  return true;
}

void PsfilterRequest_RoomCategory::Swap(PsfilterRequest_RoomCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_RoomCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_RoomCategory::UnsafeArenaSwap(PsfilterRequest_RoomCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_RoomCategory::InternalSwap(PsfilterRequest_RoomCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maincategory_, other->maincategory_);
  swap(subcategory_, other->subcategory_);
  swap(view_, other->view_);
  swap(beddingtype_, other->beddingtype_);
  swap(attribute1_, other->attribute1_);
  swap(attribute2_, other->attribute2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_RoomCategory::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest_RoomTypeFilters::InitAsDefaultInstance() {
}
class PsfilterRequest_RoomTypeFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest_RoomTypeFilters::kSuiteFieldNumber;
const int PsfilterRequest_RoomTypeFilters::kRoomAmenitieFieldNumber;
const int PsfilterRequest_RoomTypeFilters::kRoomIdFieldNumber;
const int PsfilterRequest_RoomTypeFilters::kRoomNameFieldNumber;
const int PsfilterRequest_RoomTypeFilters::kRoomCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_RoomTypeFilters::PsfilterRequest_RoomTypeFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.RoomTypeFilters)
}
PsfilterRequest_RoomTypeFilters::PsfilterRequest_RoomTypeFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  roomcategories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.RoomTypeFilters)
}
PsfilterRequest_RoomTypeFilters::PsfilterRequest_RoomTypeFilters(const PsfilterRequest_RoomTypeFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roomcategories_(from.roomcategories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomamenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomamenitie().size() > 0) {
    roomamenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomamenitie(),
      GetArenaNoVirtual());
  }
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomid().size() > 0) {
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid(),
      GetArenaNoVirtual());
  }
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname(),
      GetArenaNoVirtual());
  }
  suite_ = from.suite_;
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.RoomTypeFilters)
}

void PsfilterRequest_RoomTypeFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto.base);
  roomamenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suite_ = 0;
}

PsfilterRequest_RoomTypeFilters::~PsfilterRequest_RoomTypeFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.RoomTypeFilters)
  SharedDtor();
}

void PsfilterRequest_RoomTypeFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  roomamenitie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PsfilterRequest_RoomTypeFilters::ArenaDtor(void* object) {
  PsfilterRequest_RoomTypeFilters* _this = reinterpret_cast< PsfilterRequest_RoomTypeFilters* >(object);
  (void)_this;
}
void PsfilterRequest_RoomTypeFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_RoomTypeFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_RoomTypeFilters& PsfilterRequest_RoomTypeFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_RoomTypeFilters_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_RoomTypeFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomcategories_.Clear();
  roomamenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  roomid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  suite_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_RoomTypeFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 suite = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        suite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string roomAmenitie = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomamenitie(), ptr, ctx, "dotw.proto.PsfilterRequest.RoomTypeFilters.roomAmenitie");
        CHK_(ptr);
        break;
      }
      // string roomId = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomid(), ptr, ctx, "dotw.proto.PsfilterRequest.RoomTypeFilters.roomId");
        CHK_(ptr);
        break;
      }
      // string roomName = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomname(), ptr, ctx, "dotw.proto.PsfilterRequest.RoomTypeFilters.roomName");
        CHK_(ptr);
        break;
      }
      // repeated .dotw.proto.PsfilterRequest.RoomCategory roomCategories = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_roomcategories(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 42) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_RoomTypeFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 suite = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &suite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomAmenitie = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomamenitie()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.RoomTypeFilters.roomAmenitie"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), static_cast<int>(this->roomid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.RoomTypeFilters.roomId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomName = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.RoomTypeFilters.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dotw.proto.PsfilterRequest.RoomCategory roomCategories = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_roomcategories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.RoomTypeFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.RoomTypeFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_RoomTypeFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 suite = 1;
  if (this->suite() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->suite(), output);
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomAmenitie");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomamenitie(), output);
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // repeated .dotw.proto.PsfilterRequest.RoomCategory roomCategories = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomcategories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roomcategories(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.RoomTypeFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_RoomTypeFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 suite = 1;
  if (this->suite() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->suite(), target);
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomAmenitie");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->roomamenitie(), target);
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->roomid(), target);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomTypeFilters.roomName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // repeated .dotw.proto.PsfilterRequest.RoomCategory roomCategories = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomcategories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roomcategories(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.RoomTypeFilters)
  return target;
}

size_t PsfilterRequest_RoomTypeFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dotw.proto.PsfilterRequest.RoomCategory roomCategories = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roomcategories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->roomcategories(static_cast<int>(i)));
    }
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomamenitie());
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // int32 suite = 1;
  if (this->suite() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->suite());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_RoomTypeFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_RoomTypeFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_RoomTypeFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.RoomTypeFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.RoomTypeFilters)
    MergeFrom(*source);
  }
}

void PsfilterRequest_RoomTypeFilters::MergeFrom(const PsfilterRequest_RoomTypeFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roomcategories_.MergeFrom(from.roomcategories_);
  if (from.roomamenitie().size() > 0) {
    set_roomamenitie(from.roomamenitie());
  }
  if (from.roomid().size() > 0) {
    set_roomid(from.roomid());
  }
  if (from.roomname().size() > 0) {
    set_roomname(from.roomname());
  }
  if (from.suite() != 0) {
    set_suite(from.suite());
  }
}

void PsfilterRequest_RoomTypeFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_RoomTypeFilters::CopyFrom(const PsfilterRequest_RoomTypeFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.RoomTypeFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_RoomTypeFilters::IsInitialized() const {
  return true;
}

void PsfilterRequest_RoomTypeFilters::Swap(PsfilterRequest_RoomTypeFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_RoomTypeFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_RoomTypeFilters::UnsafeArenaSwap(PsfilterRequest_RoomTypeFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_RoomTypeFilters::InternalSwap(PsfilterRequest_RoomTypeFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&roomcategories_)->InternalSwap(CastToBase(&other->roomcategories_));
  roomamenitie_.Swap(&other->roomamenitie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(suite_, other->suite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_RoomTypeFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest_RoomOccupancy::InitAsDefaultInstance() {
}
class PsfilterRequest_RoomOccupancy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest_RoomOccupancy::kAdultsFieldNumber;
const int PsfilterRequest_RoomOccupancy::kChildrenFieldNumber;
const int PsfilterRequest_RoomOccupancy::kTwinFieldNumber;
const int PsfilterRequest_RoomOccupancy::kExtraBedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_RoomOccupancy::PsfilterRequest_RoomOccupancy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.RoomOccupancy)
}
PsfilterRequest_RoomOccupancy::PsfilterRequest_RoomOccupancy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.RoomOccupancy)
}
PsfilterRequest_RoomOccupancy::PsfilterRequest_RoomOccupancy(const PsfilterRequest_RoomOccupancy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  children_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.children().size() > 0) {
    children_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.children(),
      GetArenaNoVirtual());
  }
  ::memcpy(&adults_, &from.adults_,
    static_cast<size_t>(reinterpret_cast<char*>(&extrabed_) -
    reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.RoomOccupancy)
}

void PsfilterRequest_RoomOccupancy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto.base);
  children_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&adults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrabed_) -
      reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
}

PsfilterRequest_RoomOccupancy::~PsfilterRequest_RoomOccupancy() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.RoomOccupancy)
  SharedDtor();
}

void PsfilterRequest_RoomOccupancy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  children_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PsfilterRequest_RoomOccupancy::ArenaDtor(void* object) {
  PsfilterRequest_RoomOccupancy* _this = reinterpret_cast< PsfilterRequest_RoomOccupancy* >(object);
  (void)_this;
}
void PsfilterRequest_RoomOccupancy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_RoomOccupancy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_RoomOccupancy& PsfilterRequest_RoomOccupancy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_RoomOccupancy_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_RoomOccupancy::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&adults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrabed_) -
      reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_RoomOccupancy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 adults = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        adults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string children = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_children(), ptr, ctx, "dotw.proto.PsfilterRequest.RoomOccupancy.children");
        CHK_(ptr);
        break;
      }
      // bool twin = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        twin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // bool extraBed = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        extrabed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_RoomOccupancy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 adults = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &adults_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string children = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_children()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->children().data(), static_cast<int>(this->children().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.RoomOccupancy.children"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool twin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &twin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extraBed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extrabed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.RoomOccupancy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.RoomOccupancy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_RoomOccupancy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 adults = 1;
  if (this->adults() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->adults(), output);
  }

  // string children = 2;
  if (this->children().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->children().data(), static_cast<int>(this->children().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomOccupancy.children");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->children(), output);
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->twin(), output);
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->extrabed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.RoomOccupancy)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_RoomOccupancy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 adults = 1;
  if (this->adults() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->adults(), target);
  }

  // string children = 2;
  if (this->children().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->children().data(), static_cast<int>(this->children().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.RoomOccupancy.children");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->children(), target);
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->twin(), target);
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->extrabed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.RoomOccupancy)
  return target;
}

size_t PsfilterRequest_RoomOccupancy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string children = 2;
  if (this->children().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->children());
  }

  // int32 adults = 1;
  if (this->adults() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->adults());
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    total_size += 1 + 1;
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_RoomOccupancy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_RoomOccupancy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_RoomOccupancy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.RoomOccupancy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.RoomOccupancy)
    MergeFrom(*source);
  }
}

void PsfilterRequest_RoomOccupancy::MergeFrom(const PsfilterRequest_RoomOccupancy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.children().size() > 0) {
    set_children(from.children());
  }
  if (from.adults() != 0) {
    set_adults(from.adults());
  }
  if (from.twin() != 0) {
    set_twin(from.twin());
  }
  if (from.extrabed() != 0) {
    set_extrabed(from.extrabed());
  }
}

void PsfilterRequest_RoomOccupancy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_RoomOccupancy::CopyFrom(const PsfilterRequest_RoomOccupancy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.RoomOccupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_RoomOccupancy::IsInitialized() const {
  return true;
}

void PsfilterRequest_RoomOccupancy::Swap(PsfilterRequest_RoomOccupancy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_RoomOccupancy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_RoomOccupancy::UnsafeArenaSwap(PsfilterRequest_RoomOccupancy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_RoomOccupancy::InternalSwap(PsfilterRequest_RoomOccupancy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.Swap(&other->children_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(adults_, other->adults_);
  swap(twin_, other->twin_);
  swap(extrabed_, other->extrabed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_RoomOccupancy::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest_HotelFilters::InitAsDefaultInstance() {
}
class PsfilterRequest_HotelFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest_HotelFilters::kRatingFieldNumber;
const int PsfilterRequest_HotelFilters::kLuxuryFieldNumber;
const int PsfilterRequest_HotelFilters::kLocationFieldNumber;
const int PsfilterRequest_HotelFilters::kLocationIdFieldNumber;
const int PsfilterRequest_HotelFilters::kAmenitieFieldNumber;
const int PsfilterRequest_HotelFilters::kLeisureFieldNumber;
const int PsfilterRequest_HotelFilters::kBusinessFieldNumber;
const int PsfilterRequest_HotelFilters::kHotelPreferenceFieldNumber;
const int PsfilterRequest_HotelFilters::kChainFieldNumber;
const int PsfilterRequest_HotelFilters::kAttractionFieldNumber;
const int PsfilterRequest_HotelFilters::kHotelNameFieldNumber;
const int PsfilterRequest_HotelFilters::kBuiltYearFieldNumber;
const int PsfilterRequest_HotelFilters::kRenovationYearFieldNumber;
const int PsfilterRequest_HotelFilters::kFloorsFieldNumber;
const int PsfilterRequest_HotelFilters::kNoOfRoomsFieldNumber;
const int PsfilterRequest_HotelFilters::kFireSafetyFieldNumber;
const int PsfilterRequest_HotelFilters::kLastUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_HotelFilters::PsfilterRequest_HotelFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.HotelFilters)
}
PsfilterRequest_HotelFilters::PsfilterRequest_HotelFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.HotelFilters)
}
PsfilterRequest_HotelFilters::PsfilterRequest_HotelFilters(const PsfilterRequest_HotelFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.rating().size() > 0) {
    rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rating(),
      GetArenaNoVirtual());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  locationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.locationid().size() > 0) {
    locationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locationid(),
      GetArenaNoVirtual());
  }
  amenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.amenitie().size() > 0) {
    amenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amenitie(),
      GetArenaNoVirtual());
  }
  leisure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.leisure().size() > 0) {
    leisure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leisure(),
      GetArenaNoVirtual());
  }
  business_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.business().size() > 0) {
    business_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.business(),
      GetArenaNoVirtual());
  }
  hotelpreference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hotelpreference().size() > 0) {
    hotelpreference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotelpreference(),
      GetArenaNoVirtual());
  }
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.chain().size() > 0) {
    chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain(),
      GetArenaNoVirtual());
  }
  attraction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.attraction().size() > 0) {
    attraction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attraction(),
      GetArenaNoVirtual());
  }
  hotelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hotelname().size() > 0) {
    hotelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotelname(),
      GetArenaNoVirtual());
  }
  lastupdated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lastupdated().size() > 0) {
    lastupdated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastupdated(),
      GetArenaNoVirtual());
  }
  ::memcpy(&luxury_, &from.luxury_,
    static_cast<size_t>(reinterpret_cast<char*>(&firesafety_) -
    reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.HotelFilters)
}

void PsfilterRequest_HotelFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto.base);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leisure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelpreference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attraction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastupdated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&luxury_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firesafety_) -
      reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
}

PsfilterRequest_HotelFilters::~PsfilterRequest_HotelFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.HotelFilters)
  SharedDtor();
}

void PsfilterRequest_HotelFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  rating_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amenitie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leisure_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelpreference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attraction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastupdated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PsfilterRequest_HotelFilters::ArenaDtor(void* object) {
  PsfilterRequest_HotelFilters* _this = reinterpret_cast< PsfilterRequest_HotelFilters* >(object);
  (void)_this;
}
void PsfilterRequest_HotelFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_HotelFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_HotelFilters& PsfilterRequest_HotelFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_HotelFilters_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_HotelFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rating_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  locationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  amenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  leisure_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  business_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hotelpreference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  chain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  attraction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hotelname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lastupdated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&luxury_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firesafety_) -
      reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_HotelFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rating = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_rating(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.rating");
        CHK_(ptr);
        break;
      }
      // int32 luxury = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        luxury_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string location = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_location(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.location");
        CHK_(ptr);
        break;
      }
      // string locationId = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_locationid(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.locationId");
        CHK_(ptr);
        break;
      }
      // string amenitie = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_amenitie(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.amenitie");
        CHK_(ptr);
        break;
      }
      // string leisure = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_leisure(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.leisure");
        CHK_(ptr);
        break;
      }
      // string business = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_business(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.business");
        CHK_(ptr);
        break;
      }
      // string hotelPreference = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hotelpreference(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.hotelPreference");
        CHK_(ptr);
        break;
      }
      // string chain = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_chain(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.chain");
        CHK_(ptr);
        break;
      }
      // string attraction = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_attraction(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.attraction");
        CHK_(ptr);
        break;
      }
      // string hotelName = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hotelname(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.hotelName");
        CHK_(ptr);
        break;
      }
      // int32 builtYear = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        builtyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 renovationYear = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        renovationyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 floors = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        floors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 noOfRooms = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        noofrooms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 fireSafety = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 128) goto handle_unusual;
        firesafety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string lastUpdated = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lastupdated(), ptr, ctx, "dotw.proto.PsfilterRequest.HotelFilters.lastUpdated");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_HotelFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.HotelFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rating = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rating()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->rating().data(), static_cast<int>(this->rating().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.rating"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 luxury = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &luxury_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string locationId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locationid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->locationid().data(), static_cast<int>(this->locationid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.locationId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amenitie = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_amenitie()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->amenitie().data(), static_cast<int>(this->amenitie().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.amenitie"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leisure = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_leisure()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->leisure().data(), static_cast<int>(this->leisure().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.leisure"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string business = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_business()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->business().data(), static_cast<int>(this->business().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.business"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hotelPreference = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelpreference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.hotelPreference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_chain()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->chain().data(), static_cast<int>(this->chain().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.chain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string attraction = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_attraction()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->attraction().data(), static_cast<int>(this->attraction().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.attraction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hotelName = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hotelname().data(), static_cast<int>(this->hotelname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.hotelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 builtYear = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &builtyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 renovationYear = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &renovationyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 floors = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &floors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 noOfRooms = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &noofrooms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fireSafety = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &firesafety_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lastUpdated = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lastupdated()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.HotelFilters.lastUpdated"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.HotelFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.HotelFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_HotelFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rating().data(), static_cast<int>(this->rating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.rating");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rating(), output);
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->luxury(), output);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->location(), output);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.locationId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locationid(), output);
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->amenitie().data(), static_cast<int>(this->amenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.amenitie");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amenitie(), output);
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->leisure().data(), static_cast<int>(this->leisure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.leisure");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leisure(), output);
  }

  // string business = 7;
  if (this->business().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->business().data(), static_cast<int>(this->business().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.business");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->business(), output);
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.hotelPreference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hotelpreference(), output);
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chain().data(), static_cast<int>(this->chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.chain");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->chain(), output);
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attraction().data(), static_cast<int>(this->attraction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.attraction");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->attraction(), output);
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelname().data(), static_cast<int>(this->hotelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.hotelName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hotelname(), output);
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->builtyear(), output);
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->renovationyear(), output);
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->floors(), output);
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->noofrooms(), output);
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->firesafety(), output);
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.lastUpdated");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->lastupdated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.HotelFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_HotelFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rating().data(), static_cast<int>(this->rating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.rating");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->rating(), target);
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->luxury(), target);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->location(), target);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.locationId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->locationid(), target);
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->amenitie().data(), static_cast<int>(this->amenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.amenitie");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->amenitie(), target);
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->leisure().data(), static_cast<int>(this->leisure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.leisure");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->leisure(), target);
  }

  // string business = 7;
  if (this->business().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->business().data(), static_cast<int>(this->business().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.business");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->business(), target);
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.hotelPreference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->hotelpreference(), target);
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chain().data(), static_cast<int>(this->chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.chain");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->chain(), target);
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attraction().data(), static_cast<int>(this->attraction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.attraction");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->attraction(), target);
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelname().data(), static_cast<int>(this->hotelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.hotelName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->hotelname(), target);
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->builtyear(), target);
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->renovationyear(), target);
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->floors(), target);
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->noofrooms(), target);
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->firesafety(), target);
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.HotelFilters.lastUpdated");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->lastupdated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.HotelFilters)
  return target;
}

size_t PsfilterRequest_HotelFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.HotelFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->rating());
  }

  // string location = 3;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->locationid());
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->amenitie());
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->leisure());
  }

  // string business = 7;
  if (this->business().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->business());
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hotelpreference());
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->chain());
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->attraction());
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hotelname());
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lastupdated());
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->luxury());
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->builtyear());
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->renovationyear());
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->floors());
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->noofrooms());
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->firesafety());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_HotelFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.HotelFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_HotelFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_HotelFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.HotelFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.HotelFilters)
    MergeFrom(*source);
  }
}

void PsfilterRequest_HotelFilters::MergeFrom(const PsfilterRequest_HotelFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.HotelFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rating().size() > 0) {
    set_rating(from.rating());
  }
  if (from.location().size() > 0) {
    set_location(from.location());
  }
  if (from.locationid().size() > 0) {
    set_locationid(from.locationid());
  }
  if (from.amenitie().size() > 0) {
    set_amenitie(from.amenitie());
  }
  if (from.leisure().size() > 0) {
    set_leisure(from.leisure());
  }
  if (from.business().size() > 0) {
    set_business(from.business());
  }
  if (from.hotelpreference().size() > 0) {
    set_hotelpreference(from.hotelpreference());
  }
  if (from.chain().size() > 0) {
    set_chain(from.chain());
  }
  if (from.attraction().size() > 0) {
    set_attraction(from.attraction());
  }
  if (from.hotelname().size() > 0) {
    set_hotelname(from.hotelname());
  }
  if (from.lastupdated().size() > 0) {
    set_lastupdated(from.lastupdated());
  }
  if (from.luxury() != 0) {
    set_luxury(from.luxury());
  }
  if (from.builtyear() != 0) {
    set_builtyear(from.builtyear());
  }
  if (from.renovationyear() != 0) {
    set_renovationyear(from.renovationyear());
  }
  if (from.floors() != 0) {
    set_floors(from.floors());
  }
  if (from.noofrooms() != 0) {
    set_noofrooms(from.noofrooms());
  }
  if (from.firesafety() != 0) {
    set_firesafety(from.firesafety());
  }
}

void PsfilterRequest_HotelFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.HotelFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_HotelFilters::CopyFrom(const PsfilterRequest_HotelFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.HotelFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_HotelFilters::IsInitialized() const {
  return true;
}

void PsfilterRequest_HotelFilters::Swap(PsfilterRequest_HotelFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_HotelFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_HotelFilters::UnsafeArenaSwap(PsfilterRequest_HotelFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_HotelFilters::InternalSwap(PsfilterRequest_HotelFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rating_.Swap(&other->rating_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locationid_.Swap(&other->locationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amenitie_.Swap(&other->amenitie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leisure_.Swap(&other->leisure_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  business_.Swap(&other->business_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotelpreference_.Swap(&other->hotelpreference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chain_.Swap(&other->chain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attraction_.Swap(&other->attraction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotelname_.Swap(&other->hotelname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastupdated_.Swap(&other->lastupdated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(luxury_, other->luxury_);
  swap(builtyear_, other->builtyear_);
  swap(renovationyear_, other->renovationyear_);
  swap(floors_, other->floors_);
  swap(noofrooms_, other->noofrooms_);
  swap(firesafety_, other->firesafety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_HotelFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest_AdditionalFilters::InitAsDefaultInstance() {
}
class PsfilterRequest_AdditionalFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_AdditionalFilters::PsfilterRequest_AdditionalFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.AdditionalFilters)
}
PsfilterRequest_AdditionalFilters::PsfilterRequest_AdditionalFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.AdditionalFilters)
}
PsfilterRequest_AdditionalFilters::PsfilterRequest_AdditionalFilters(const PsfilterRequest_AdditionalFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.AdditionalFilters)
}

void PsfilterRequest_AdditionalFilters::SharedCtor() {
}

PsfilterRequest_AdditionalFilters::~PsfilterRequest_AdditionalFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.AdditionalFilters)
  SharedDtor();
}

void PsfilterRequest_AdditionalFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PsfilterRequest_AdditionalFilters::ArenaDtor(void* object) {
  PsfilterRequest_AdditionalFilters* _this = reinterpret_cast< PsfilterRequest_AdditionalFilters* >(object);
  (void)_this;
}
void PsfilterRequest_AdditionalFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_AdditionalFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_AdditionalFilters& PsfilterRequest_AdditionalFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_AdditionalFilters_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_AdditionalFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_AdditionalFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_AdditionalFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.AdditionalFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.AdditionalFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_AdditionalFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.AdditionalFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_AdditionalFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.AdditionalFilters)
  return target;
}

size_t PsfilterRequest_AdditionalFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_AdditionalFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_AdditionalFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_AdditionalFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.AdditionalFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.AdditionalFilters)
    MergeFrom(*source);
  }
}

void PsfilterRequest_AdditionalFilters::MergeFrom(const PsfilterRequest_AdditionalFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PsfilterRequest_AdditionalFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_AdditionalFilters::CopyFrom(const PsfilterRequest_AdditionalFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.AdditionalFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_AdditionalFilters::IsInitialized() const {
  return true;
}

void PsfilterRequest_AdditionalFilters::Swap(PsfilterRequest_AdditionalFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_AdditionalFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_AdditionalFilters::UnsafeArenaSwap(PsfilterRequest_AdditionalFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_AdditionalFilters::InternalSwap(PsfilterRequest_AdditionalFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_AdditionalFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest_SearchPeriodCriteria::InitAsDefaultInstance() {
}
class PsfilterRequest_SearchPeriodCriteria::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest_SearchPeriodCriteria::kTravelFromFieldNumber;
const int PsfilterRequest_SearchPeriodCriteria::kTravelToFieldNumber;
const int PsfilterRequest_SearchPeriodCriteria::kBookingDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest_SearchPeriodCriteria::PsfilterRequest_SearchPeriodCriteria()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
}
PsfilterRequest_SearchPeriodCriteria::PsfilterRequest_SearchPeriodCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
}
PsfilterRequest_SearchPeriodCriteria::PsfilterRequest_SearchPeriodCriteria(const PsfilterRequest_SearchPeriodCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&travelfrom_, &from.travelfrom_,
    static_cast<size_t>(reinterpret_cast<char*>(&bookingdatetime_) -
    reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
}

void PsfilterRequest_SearchPeriodCriteria::SharedCtor() {
  ::memset(&travelfrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bookingdatetime_) -
      reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
}

PsfilterRequest_SearchPeriodCriteria::~PsfilterRequest_SearchPeriodCriteria() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  SharedDtor();
}

void PsfilterRequest_SearchPeriodCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PsfilterRequest_SearchPeriodCriteria::ArenaDtor(void* object) {
  PsfilterRequest_SearchPeriodCriteria* _this = reinterpret_cast< PsfilterRequest_SearchPeriodCriteria* >(object);
  (void)_this;
}
void PsfilterRequest_SearchPeriodCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest_SearchPeriodCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest_SearchPeriodCriteria& PsfilterRequest_SearchPeriodCriteria::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_SearchPeriodCriteria_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest_SearchPeriodCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&travelfrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bookingdatetime_) -
      reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest_SearchPeriodCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 travelFrom = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        travelfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 travelTo = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        travelto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 bookingDateTime = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        bookingdatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest_SearchPeriodCriteria::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 travelFrom = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &travelfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 travelTo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &travelto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bookingDateTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookingdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest_SearchPeriodCriteria::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->travelfrom(), output);
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->travelto(), output);
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->bookingdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest_SearchPeriodCriteria::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->travelfrom(), target);
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->travelto(), target);
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->bookingdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  return target;
}

size_t PsfilterRequest_SearchPeriodCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->travelfrom());
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->travelto());
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bookingdatetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest_SearchPeriodCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest_SearchPeriodCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest_SearchPeriodCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
    MergeFrom(*source);
  }
}

void PsfilterRequest_SearchPeriodCriteria::MergeFrom(const PsfilterRequest_SearchPeriodCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.travelfrom() != 0) {
    set_travelfrom(from.travelfrom());
  }
  if (from.travelto() != 0) {
    set_travelto(from.travelto());
  }
  if (from.bookingdatetime() != 0) {
    set_bookingdatetime(from.bookingdatetime());
  }
}

void PsfilterRequest_SearchPeriodCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest_SearchPeriodCriteria::CopyFrom(const PsfilterRequest_SearchPeriodCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest.SearchPeriodCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest_SearchPeriodCriteria::IsInitialized() const {
  return true;
}

void PsfilterRequest_SearchPeriodCriteria::Swap(PsfilterRequest_SearchPeriodCriteria* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest_SearchPeriodCriteria* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest_SearchPeriodCriteria::UnsafeArenaSwap(PsfilterRequest_SearchPeriodCriteria* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest_SearchPeriodCriteria::InternalSwap(PsfilterRequest_SearchPeriodCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(travelfrom_, other->travelfrom_);
  swap(travelto_, other->travelto_);
  swap(bookingdatetime_, other->bookingdatetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest_SearchPeriodCriteria::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterRequest::InitAsDefaultInstance() {
  ::dotw::proto::_PsfilterRequest_default_instance_._instance.get_mutable()->hotelfilters_ = const_cast< ::dotw::proto::PsfilterRequest_HotelFilters*>(
      ::dotw::proto::PsfilterRequest_HotelFilters::internal_default_instance());
  ::dotw::proto::_PsfilterRequest_default_instance_._instance.get_mutable()->roomtypefilters_ = const_cast< ::dotw::proto::PsfilterRequest_RoomTypeFilters*>(
      ::dotw::proto::PsfilterRequest_RoomTypeFilters::internal_default_instance());
  ::dotw::proto::_PsfilterRequest_default_instance_._instance.get_mutable()->additionalfilters_ = const_cast< ::dotw::proto::PsfilterRequest_AdditionalFilters*>(
      ::dotw::proto::PsfilterRequest_AdditionalFilters::internal_default_instance());
  ::dotw::proto::_PsfilterRequest_default_instance_._instance.get_mutable()->searchperiodcriteria_ = const_cast< ::dotw::proto::PsfilterRequest_SearchPeriodCriteria*>(
      ::dotw::proto::PsfilterRequest_SearchPeriodCriteria::internal_default_instance());
}
class PsfilterRequest::HasBitSetters {
 public:
  static const ::dotw::proto::PsfilterRequest_HotelFilters& hotelfilters(const PsfilterRequest* msg);
  static const ::dotw::proto::PsfilterRequest_RoomTypeFilters& roomtypefilters(const PsfilterRequest* msg);
  static const ::dotw::proto::PsfilterRequest_AdditionalFilters& additionalfilters(const PsfilterRequest* msg);
  static const ::dotw::proto::PsfilterRequest_SearchPeriodCriteria& searchperiodcriteria(const PsfilterRequest* msg);
};

const ::dotw::proto::PsfilterRequest_HotelFilters&
PsfilterRequest::HasBitSetters::hotelfilters(const PsfilterRequest* msg) {
  return *msg->hotelfilters_;
}
const ::dotw::proto::PsfilterRequest_RoomTypeFilters&
PsfilterRequest::HasBitSetters::roomtypefilters(const PsfilterRequest* msg) {
  return *msg->roomtypefilters_;
}
const ::dotw::proto::PsfilterRequest_AdditionalFilters&
PsfilterRequest::HasBitSetters::additionalfilters(const PsfilterRequest* msg) {
  return *msg->additionalfilters_;
}
const ::dotw::proto::PsfilterRequest_SearchPeriodCriteria&
PsfilterRequest::HasBitSetters::searchperiodcriteria(const PsfilterRequest* msg) {
  return *msg->searchperiodcriteria_;
}
void PsfilterRequest::unsafe_arena_set_allocated_hotelfilters(
    ::dotw::proto::PsfilterRequest_HotelFilters* hotelfilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete hotelfilters_;
  }
  hotelfilters_ = hotelfilters;
  if (hotelfilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.PsfilterRequest.hotelFilters)
}
void PsfilterRequest::unsafe_arena_set_allocated_roomtypefilters(
    ::dotw::proto::PsfilterRequest_RoomTypeFilters* roomtypefilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = roomtypefilters;
  if (roomtypefilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.PsfilterRequest.roomTypeFilters)
}
void PsfilterRequest::unsafe_arena_set_allocated_additionalfilters(
    ::dotw::proto::PsfilterRequest_AdditionalFilters* additionalfilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete additionalfilters_;
  }
  additionalfilters_ = additionalfilters;
  if (additionalfilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.PsfilterRequest.additionalFilters)
}
void PsfilterRequest::unsafe_arena_set_allocated_searchperiodcriteria(
    ::dotw::proto::PsfilterRequest_SearchPeriodCriteria* searchperiodcriteria) {
  if (GetArenaNoVirtual() == nullptr) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = searchperiodcriteria;
  if (searchperiodcriteria) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.PsfilterRequest.searchPeriodCriteria)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterRequest::kPsfilterFieldNumber;
const int PsfilterRequest::kCustomerIdFieldNumber;
const int PsfilterRequest::kEnvironmentFieldNumber;
const int PsfilterRequest::kRequestSourceFieldNumber;
const int PsfilterRequest::kExceptRestrictionsFieldNumber;
const int PsfilterRequest::kPassengerNationalityOrResidenceProvidedFieldNumber;
const int PsfilterRequest::kHotelIdsFieldNumber;
const int PsfilterRequest::kCityFieldNumber;
const int PsfilterRequest::kCountryFieldNumber;
const int PsfilterRequest::kBookingChannelsWithAutoMappingFieldNumber;
const int PsfilterRequest::kBookingChannelTypesFieldNumber;
const int PsfilterRequest::kExcludedBookingchannelFieldNumber;
const int PsfilterRequest::kActiveForRoomCategoriesFieldNumber;
const int PsfilterRequest::kRoomOcupancyFieldNumber;
const int PsfilterRequest::kHotelFiltersFieldNumber;
const int PsfilterRequest::kRoomTypeFiltersFieldNumber;
const int PsfilterRequest::kAdditionalFiltersFieldNumber;
const int PsfilterRequest::kSearchPeriodCriteriaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterRequest::PsfilterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterRequest)
}
PsfilterRequest::PsfilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  exceptrestrictions_(arena),
  hotelids_(arena),
  bookingchannelswithautomapping_(arena),
  bookingchanneltypes_(arena),
  excludedbookingchannel_(arena),
  roomocupancy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterRequest)
}
PsfilterRequest::PsfilterRequest(const PsfilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      exceptrestrictions_(from.exceptrestrictions_),
      hotelids_(from.hotelids_),
      bookingchannelswithautomapping_(from.bookingchannelswithautomapping_),
      bookingchanneltypes_(from.bookingchanneltypes_),
      excludedbookingchannel_(from.excludedbookingchannel_),
      roomocupancy_(from.roomocupancy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  psfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.psfilter().size() > 0) {
    psfilter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psfilter(),
      GetArenaNoVirtual());
  }
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.environment().size() > 0) {
    environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.environment(),
      GetArenaNoVirtual());
  }
  if (from.has_hotelfilters()) {
    hotelfilters_ = new ::dotw::proto::PsfilterRequest_HotelFilters(*from.hotelfilters_);
  } else {
    hotelfilters_ = nullptr;
  }
  if (from.has_roomtypefilters()) {
    roomtypefilters_ = new ::dotw::proto::PsfilterRequest_RoomTypeFilters(*from.roomtypefilters_);
  } else {
    roomtypefilters_ = nullptr;
  }
  if (from.has_additionalfilters()) {
    additionalfilters_ = new ::dotw::proto::PsfilterRequest_AdditionalFilters(*from.additionalfilters_);
  } else {
    additionalfilters_ = nullptr;
  }
  if (from.has_searchperiodcriteria()) {
    searchperiodcriteria_ = new ::dotw::proto::PsfilterRequest_SearchPeriodCriteria(*from.searchperiodcriteria_);
  } else {
    searchperiodcriteria_ = nullptr;
  }
  ::memcpy(&customerid_, &from.customerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&activeforroomcategories_) -
    reinterpret_cast<char*>(&customerid_)) + sizeof(activeforroomcategories_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterRequest)
}

void PsfilterRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PsfilterRequest_proto_2fdotw_2eproto.base);
  psfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hotelfilters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeforroomcategories_) -
      reinterpret_cast<char*>(&hotelfilters_)) + sizeof(activeforroomcategories_));
}

PsfilterRequest::~PsfilterRequest() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterRequest)
  SharedDtor();
}

void PsfilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  psfilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hotelfilters_;
  if (this != internal_default_instance()) delete roomtypefilters_;
  if (this != internal_default_instance()) delete additionalfilters_;
  if (this != internal_default_instance()) delete searchperiodcriteria_;
}

void PsfilterRequest::ArenaDtor(void* object) {
  PsfilterRequest* _this = reinterpret_cast< PsfilterRequest* >(object);
  (void)_this;
}
void PsfilterRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterRequest& PsfilterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterRequest_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exceptrestrictions_.Clear();
  hotelids_.Clear();
  bookingchannelswithautomapping_.Clear();
  bookingchanneltypes_.Clear();
  excludedbookingchannel_.Clear();
  roomocupancy_.Clear();
  psfilter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  environment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && hotelfilters_ != nullptr) {
    delete hotelfilters_;
  }
  hotelfilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && roomtypefilters_ != nullptr) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && additionalfilters_ != nullptr) {
    delete additionalfilters_;
  }
  additionalfilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && searchperiodcriteria_ != nullptr) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = nullptr;
  ::memset(&customerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeforroomcategories_) -
      reinterpret_cast<char*>(&customerid_)) + sizeof(activeforroomcategories_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string psfilter = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_psfilter(), ptr, ctx, "dotw.proto.PsfilterRequest.psfilter");
        CHK_(ptr);
        break;
      }
      // int32 customerId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        customerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string environment = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_environment(), ptr, ctx, "dotw.proto.PsfilterRequest.environment");
        CHK_(ptr);
        break;
      }
      // int32 requestSource = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        requestsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated int32 exceptRestrictions = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_exceptrestrictions(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        while (true) {
          add_exceptrestrictions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 40) break;
          ptr += 1;
        }
        break;
      }
      // bool passengerNationalityOrResidenceProvided = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        passengernationalityorresidenceprovided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated int32 hotelIds = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_hotelids(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 56) goto handle_unusual;
        while (true) {
          add_hotelids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 56) break;
          ptr += 1;
        }
        break;
      }
      // int32 city = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 64) goto handle_unusual;
        city_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 country = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 72) goto handle_unusual;
        country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated int32 bookingChannelsWithAutoMapping = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_bookingchannelswithautomapping(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 80) goto handle_unusual;
        while (true) {
          add_bookingchannelswithautomapping(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 80) break;
          ptr += 1;
        }
        break;
      }
      // repeated int32 bookingChannelTypes = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_bookingchanneltypes(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 88) goto handle_unusual;
        while (true) {
          add_bookingchanneltypes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 88) break;
          ptr += 1;
        }
        break;
      }
      // repeated int32 excludedBookingchannel = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_excludedbookingchannel(), ptr, ctx);
          CHK_(ptr);
          break;
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        while (true) {
          add_excludedbookingchannel(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 96) break;
          ptr += 1;
        }
        break;
      }
      // bool activeForRoomCategories = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        activeforroomcategories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated .dotw.proto.PsfilterRequest.RoomOccupancy roomOcupancy = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 114) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_roomocupancy(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 114) break;
          ptr += 1;
        }
        break;
      }
      // .dotw.proto.PsfilterRequest.HotelFilters hotelFilters = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 122) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_hotelfilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.PsfilterRequest.RoomTypeFilters roomTypeFilters = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 130) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_roomtypefilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.PsfilterRequest.AdditionalFilters additionalFilters = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_additionalfilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.PsfilterRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 146) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_searchperiodcriteria(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string psfilter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_psfilter()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->psfilter().data(), static_cast<int>(this->psfilter().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.psfilter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 customerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &customerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string environment = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_environment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->environment().data(), static_cast<int>(this->environment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterRequest.environment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 requestSource = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestsource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 exceptRestrictions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exceptrestrictions())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_exceptrestrictions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool passengerNationalityOrResidenceProvided = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passengernationalityorresidenceprovided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 hotelIds = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hotelids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_hotelids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 city = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 country = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bookingChannelsWithAutoMapping = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bookingchannelswithautomapping())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 82u, input, this->mutable_bookingchannelswithautomapping())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bookingChannelTypes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bookingchanneltypes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 90u, input, this->mutable_bookingchanneltypes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 excludedBookingchannel = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_excludedbookingchannel())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 98u, input, this->mutable_excludedbookingchannel())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool activeForRoomCategories = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activeforroomcategories_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dotw.proto.PsfilterRequest.RoomOccupancy roomOcupancy = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_roomocupancy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.PsfilterRequest.HotelFilters hotelFilters = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hotelfilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.PsfilterRequest.RoomTypeFilters roomTypeFilters = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roomtypefilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.PsfilterRequest.AdditionalFilters additionalFilters = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_additionalfilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.PsfilterRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_searchperiodcriteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->psfilter().data(), static_cast<int>(this->psfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.psfilter");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->psfilter(), output);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->customerid(), output);
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.environment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->environment(), output);
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->requestsource(), output);
  }

  // repeated int32 exceptRestrictions = 5;
  if (this->exceptrestrictions_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_exceptrestrictions_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->exceptrestrictions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->exceptrestrictions(i), output);
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->passengernationalityorresidenceprovided(), output);
  }

  // repeated int32 hotelIds = 7;
  if (this->hotelids_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hotelids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->hotelids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->hotelids(i), output);
  }

  // int32 city = 8;
  if (this->city() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->city(), output);
  }

  // int32 country = 9;
  if (this->country() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->country(), output);
  }

  // repeated int32 bookingChannelsWithAutoMapping = 10;
  if (this->bookingchannelswithautomapping_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(10, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bookingchannelswithautomapping_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bookingchannelswithautomapping_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->bookingchannelswithautomapping(i), output);
  }

  // repeated int32 bookingChannelTypes = 11;
  if (this->bookingchanneltypes_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(11, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bookingchanneltypes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bookingchanneltypes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->bookingchanneltypes(i), output);
  }

  // repeated int32 excludedBookingchannel = 12;
  if (this->excludedbookingchannel_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_excludedbookingchannel_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->excludedbookingchannel_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->excludedbookingchannel(i), output);
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->activeforroomcategories(), output);
  }

  // repeated .dotw.proto.PsfilterRequest.RoomOccupancy roomOcupancy = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomocupancy_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->roomocupancy(static_cast<int>(i)),
      output);
  }

  // .dotw.proto.PsfilterRequest.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::hotelfilters(this), output);
  }

  // .dotw.proto.PsfilterRequest.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::roomtypefilters(this), output);
  }

  // .dotw.proto.PsfilterRequest.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::additionalfilters(this), output);
  }

  // .dotw.proto.PsfilterRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::searchperiodcriteria(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->psfilter().data(), static_cast<int>(this->psfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.psfilter");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->psfilter(), target);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->customerid(), target);
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterRequest.environment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->environment(), target);
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->requestsource(), target);
  }

  // repeated int32 exceptRestrictions = 5;
  if (this->exceptrestrictions_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _exceptrestrictions_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->exceptrestrictions_, target);
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->passengernationalityorresidenceprovided(), target);
  }

  // repeated int32 hotelIds = 7;
  if (this->hotelids_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _hotelids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->hotelids_, target);
  }

  // int32 city = 8;
  if (this->city() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->city(), target);
  }

  // int32 country = 9;
  if (this->country() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->country(), target);
  }

  // repeated int32 bookingChannelsWithAutoMapping = 10;
  if (this->bookingchannelswithautomapping_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      10,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bookingchannelswithautomapping_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bookingchannelswithautomapping_, target);
  }

  // repeated int32 bookingChannelTypes = 11;
  if (this->bookingchanneltypes_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      11,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bookingchanneltypes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bookingchanneltypes_, target);
  }

  // repeated int32 excludedBookingchannel = 12;
  if (this->excludedbookingchannel_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _excludedbookingchannel_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->excludedbookingchannel_, target);
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->activeforroomcategories(), target);
  }

  // repeated .dotw.proto.PsfilterRequest.RoomOccupancy roomOcupancy = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomocupancy_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->roomocupancy(static_cast<int>(i)), target);
  }

  // .dotw.proto.PsfilterRequest.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::hotelfilters(this), target);
  }

  // .dotw.proto.PsfilterRequest.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::roomtypefilters(this), target);
  }

  // .dotw.proto.PsfilterRequest.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::additionalfilters(this), target);
  }

  // .dotw.proto.PsfilterRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::searchperiodcriteria(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterRequest)
  return target;
}

size_t PsfilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 exceptRestrictions = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->exceptrestrictions_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _exceptrestrictions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 hotelIds = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->hotelids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hotelids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bookingChannelsWithAutoMapping = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bookingchannelswithautomapping_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bookingchannelswithautomapping_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 bookingChannelTypes = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bookingchanneltypes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bookingchanneltypes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 excludedBookingchannel = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->excludedbookingchannel_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _excludedbookingchannel_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .dotw.proto.PsfilterRequest.RoomOccupancy roomOcupancy = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->roomocupancy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->roomocupancy(static_cast<int>(i)));
    }
  }

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->psfilter());
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->environment());
  }

  // .dotw.proto.PsfilterRequest.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hotelfilters_);
  }

  // .dotw.proto.PsfilterRequest.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomtypefilters_);
  }

  // .dotw.proto.PsfilterRequest.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additionalfilters_);
  }

  // .dotw.proto.PsfilterRequest.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *searchperiodcriteria_);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->customerid());
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->requestsource());
  }

  // int32 city = 8;
  if (this->city() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->city());
  }

  // int32 country = 9;
  if (this->country() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->country());
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    total_size += 1 + 1;
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterRequest)
    MergeFrom(*source);
  }
}

void PsfilterRequest::MergeFrom(const PsfilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exceptrestrictions_.MergeFrom(from.exceptrestrictions_);
  hotelids_.MergeFrom(from.hotelids_);
  bookingchannelswithautomapping_.MergeFrom(from.bookingchannelswithautomapping_);
  bookingchanneltypes_.MergeFrom(from.bookingchanneltypes_);
  excludedbookingchannel_.MergeFrom(from.excludedbookingchannel_);
  roomocupancy_.MergeFrom(from.roomocupancy_);
  if (from.psfilter().size() > 0) {
    set_psfilter(from.psfilter());
  }
  if (from.environment().size() > 0) {
    set_environment(from.environment());
  }
  if (from.has_hotelfilters()) {
    mutable_hotelfilters()->::dotw::proto::PsfilterRequest_HotelFilters::MergeFrom(from.hotelfilters());
  }
  if (from.has_roomtypefilters()) {
    mutable_roomtypefilters()->::dotw::proto::PsfilterRequest_RoomTypeFilters::MergeFrom(from.roomtypefilters());
  }
  if (from.has_additionalfilters()) {
    mutable_additionalfilters()->::dotw::proto::PsfilterRequest_AdditionalFilters::MergeFrom(from.additionalfilters());
  }
  if (from.has_searchperiodcriteria()) {
    mutable_searchperiodcriteria()->::dotw::proto::PsfilterRequest_SearchPeriodCriteria::MergeFrom(from.searchperiodcriteria());
  }
  if (from.customerid() != 0) {
    set_customerid(from.customerid());
  }
  if (from.requestsource() != 0) {
    set_requestsource(from.requestsource());
  }
  if (from.city() != 0) {
    set_city(from.city());
  }
  if (from.country() != 0) {
    set_country(from.country());
  }
  if (from.passengernationalityorresidenceprovided() != 0) {
    set_passengernationalityorresidenceprovided(from.passengernationalityorresidenceprovided());
  }
  if (from.activeforroomcategories() != 0) {
    set_activeforroomcategories(from.activeforroomcategories());
  }
}

void PsfilterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterRequest::CopyFrom(const PsfilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterRequest::IsInitialized() const {
  return true;
}

void PsfilterRequest::Swap(PsfilterRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterRequest::UnsafeArenaSwap(PsfilterRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterRequest::InternalSwap(PsfilterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exceptrestrictions_.InternalSwap(&other->exceptrestrictions_);
  hotelids_.InternalSwap(&other->hotelids_);
  bookingchannelswithautomapping_.InternalSwap(&other->bookingchannelswithautomapping_);
  bookingchanneltypes_.InternalSwap(&other->bookingchanneltypes_);
  excludedbookingchannel_.InternalSwap(&other->excludedbookingchannel_);
  CastToBase(&roomocupancy_)->InternalSwap(CastToBase(&other->roomocupancy_));
  psfilter_.Swap(&other->psfilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  environment_.Swap(&other->environment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hotelfilters_, other->hotelfilters_);
  swap(roomtypefilters_, other->roomtypefilters_);
  swap(additionalfilters_, other->additionalfilters_);
  swap(searchperiodcriteria_, other->searchperiodcriteria_);
  swap(customerid_, other->customerid_);
  swap(requestsource_, other->requestsource_);
  swap(city_, other->city_);
  swap(country_, other->country_);
  swap(passengernationalityorresidenceprovided_, other->passengernationalityorresidenceprovided_);
  swap(activeforroomcategories_, other->activeforroomcategories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterRequest::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// ===================================================================

void PsfilterReply::InitAsDefaultInstance() {
}
class PsfilterReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PsfilterReply::kReplystringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PsfilterReply::PsfilterReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.PsfilterReply)
}
PsfilterReply::PsfilterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.PsfilterReply)
}
PsfilterReply::PsfilterReply(const PsfilterReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  replystring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.replystring().size() > 0) {
    replystring_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.replystring(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:dotw.proto.PsfilterReply)
}

void PsfilterReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_PsfilterReply_proto_2fdotw_2eproto.base);
  replystring_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PsfilterReply::~PsfilterReply() {
  // @@protoc_insertion_point(destructor:dotw.proto.PsfilterReply)
  SharedDtor();
}

void PsfilterReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  replystring_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PsfilterReply::ArenaDtor(void* object) {
  PsfilterReply* _this = reinterpret_cast< PsfilterReply* >(object);
  (void)_this;
}
void PsfilterReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PsfilterReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsfilterReply& PsfilterReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsfilterReply_proto_2fdotw_2eproto.base);
  return *internal_default_instance();
}


void PsfilterReply::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.PsfilterReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replystring_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PsfilterReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string replystring = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_replystring(), ptr, ctx, "dotw.proto.PsfilterReply.replystring");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PsfilterReply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.PsfilterReply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string replystring = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_replystring()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->replystring().data(), static_cast<int>(this->replystring().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.PsfilterReply.replystring"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.PsfilterReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.PsfilterReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PsfilterReply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.PsfilterReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string replystring = 1;
  if (this->replystring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->replystring().data(), static_cast<int>(this->replystring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterReply.replystring");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->replystring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.PsfilterReply)
}

::PROTOBUF_NAMESPACE_ID::uint8* PsfilterReply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.PsfilterReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string replystring = 1;
  if (this->replystring().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->replystring().data(), static_cast<int>(this->replystring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.PsfilterReply.replystring");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->replystring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.PsfilterReply)
  return target;
}

size_t PsfilterReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.PsfilterReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string replystring = 1;
  if (this->replystring().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->replystring());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsfilterReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.PsfilterReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PsfilterReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsfilterReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.PsfilterReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.PsfilterReply)
    MergeFrom(*source);
  }
}

void PsfilterReply::MergeFrom(const PsfilterReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.PsfilterReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.replystring().size() > 0) {
    set_replystring(from.replystring());
  }
}

void PsfilterReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.PsfilterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsfilterReply::CopyFrom(const PsfilterReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.PsfilterReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsfilterReply::IsInitialized() const {
  return true;
}

void PsfilterReply::Swap(PsfilterReply* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PsfilterReply* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void PsfilterReply::UnsafeArenaSwap(PsfilterReply* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PsfilterReply::InternalSwap(PsfilterReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  replystring_.Swap(&other->replystring_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PsfilterReply::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_proto_2fdotw_2eproto);
  return ::file_level_metadata_proto_2fdotw_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace dotw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_RoomCategory* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_RoomCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_RoomCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_RoomTypeFilters* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_RoomTypeFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_RoomTypeFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_RoomOccupancy* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_RoomOccupancy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_RoomOccupancy >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_HotelFilters* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_HotelFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_HotelFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_AdditionalFilters* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_AdditionalFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_AdditionalFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest_SearchPeriodCriteria* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest_SearchPeriodCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest_SearchPeriodCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterRequest* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::PsfilterReply* Arena::CreateMaybeMessage< ::dotw::proto::PsfilterReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::PsfilterReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
