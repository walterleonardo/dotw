// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dotw_Input.proto

#include "dotw_Input.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_AdditionalFilters_dotw_5fInput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_HotelFilters_dotw_5fInput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_RoomCategory_dotw_5fInput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_SearchPeriodCriteria_dotw_5fInput_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto;
namespace dotw {
namespace proto {
class Input_RoomCategoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_RoomCategory> _instance;
} _Input_RoomCategory_default_instance_;
class Input_RoomTypeFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_RoomTypeFilters> _instance;
} _Input_RoomTypeFilters_default_instance_;
class Input_RoomOccupancyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_RoomOccupancy> _instance;
} _Input_RoomOccupancy_default_instance_;
class Input_HotelFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_HotelFilters> _instance;
} _Input_HotelFilters_default_instance_;
class Input_AdditionalFiltersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_AdditionalFilters> _instance;
} _Input_AdditionalFilters_default_instance_;
class Input_SearchPeriodCriteriaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input_SearchPeriodCriteria> _instance;
} _Input_SearchPeriodCriteria_default_instance_;
class InputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Input> _instance;
} _Input_default_instance_;
}  // namespace proto
}  // namespace dotw
static void InitDefaultsInput_RoomCategory_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_RoomCategory_default_instance_;
    new (ptr) ::dotw::proto::Input_RoomCategory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_RoomCategory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_RoomCategory_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_RoomCategory_dotw_5fInput_2eproto}, {}};

static void InitDefaultsInput_RoomTypeFilters_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_RoomTypeFilters_default_instance_;
    new (ptr) ::dotw::proto::Input_RoomTypeFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_RoomTypeFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInput_RoomTypeFilters_dotw_5fInput_2eproto}, {
      &scc_info_Input_RoomCategory_dotw_5fInput_2eproto.base,}};

static void InitDefaultsInput_RoomOccupancy_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_RoomOccupancy_default_instance_;
    new (ptr) ::dotw::proto::Input_RoomOccupancy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_RoomOccupancy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_RoomOccupancy_dotw_5fInput_2eproto}, {}};

static void InitDefaultsInput_HotelFilters_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_HotelFilters_default_instance_;
    new (ptr) ::dotw::proto::Input_HotelFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_HotelFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_HotelFilters_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_HotelFilters_dotw_5fInput_2eproto}, {}};

static void InitDefaultsInput_AdditionalFilters_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_AdditionalFilters_default_instance_;
    new (ptr) ::dotw::proto::Input_AdditionalFilters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_AdditionalFilters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_AdditionalFilters_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_AdditionalFilters_dotw_5fInput_2eproto}, {}};

static void InitDefaultsInput_SearchPeriodCriteria_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_SearchPeriodCriteria_default_instance_;
    new (ptr) ::dotw::proto::Input_SearchPeriodCriteria();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input_SearchPeriodCriteria::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Input_SearchPeriodCriteria_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInput_SearchPeriodCriteria_dotw_5fInput_2eproto}, {}};

static void InitDefaultsInput_dotw_5fInput_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dotw::proto::_Input_default_instance_;
    new (ptr) ::dotw::proto::Input();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dotw::proto::Input::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Input_dotw_5fInput_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsInput_dotw_5fInput_2eproto}, {
      &scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto.base,
      &scc_info_Input_HotelFilters_dotw_5fInput_2eproto.base,
      &scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto.base,
      &scc_info_Input_AdditionalFilters_dotw_5fInput_2eproto.base,
      &scc_info_Input_SearchPeriodCriteria_dotw_5fInput_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dotw_5fInput_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dotw_5fInput_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dotw_5fInput_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dotw_5fInput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, maincategory_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, subcategory_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, view_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, beddingtype_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, attribute1_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomCategory, attribute2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, suite_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, roomamenitie_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, roomid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, roomname_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomTypeFilters, roomcategories_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomOccupancy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomOccupancy, adults_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomOccupancy, children_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomOccupancy, twin_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_RoomOccupancy, extrabed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, rating_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, luxury_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, location_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, locationid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, amenitie_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, leisure_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, business_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, hotelpreference_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, chain_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, attraction_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, hotelname_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, builtyear_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, renovationyear_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, floors_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, noofrooms_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, firesafety_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_HotelFilters, lastupdated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_AdditionalFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_SearchPeriodCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_SearchPeriodCriteria, travelfrom_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_SearchPeriodCriteria, travelto_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input_SearchPeriodCriteria, bookingdatetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, psfilter_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, customerid_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, environment_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, requestsource_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, exceptrestrictions_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, passengernationalityorresidenceprovided_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, hotelids_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, city_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, country_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, bookingchannelswithautomapping_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, bookingchanneltypes_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, excludedbookingchannel_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, activeforroomcategories_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, roomocupancy_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, hotelfilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, roomtypefilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, additionalfilters_),
  PROTOBUF_FIELD_OFFSET(::dotw::proto::Input, searchperiodcriteria_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dotw::proto::Input_RoomCategory)},
  { 11, -1, sizeof(::dotw::proto::Input_RoomTypeFilters)},
  { 21, -1, sizeof(::dotw::proto::Input_RoomOccupancy)},
  { 30, -1, sizeof(::dotw::proto::Input_HotelFilters)},
  { 52, -1, sizeof(::dotw::proto::Input_AdditionalFilters)},
  { 57, -1, sizeof(::dotw::proto::Input_SearchPeriodCriteria)},
  { 65, -1, sizeof(::dotw::proto::Input)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_RoomCategory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_RoomTypeFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_RoomOccupancy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_HotelFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_AdditionalFilters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_SearchPeriodCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dotw::proto::_Input_default_instance_),
};

static ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptorsTable assign_descriptors_table_dotw_5fInput_2eproto = {
  {}, AddDescriptors_dotw_5fInput_2eproto, "dotw_Input.proto", schemas,
  file_default_instances, TableStruct_dotw_5fInput_2eproto::offsets,
  file_level_metadata_dotw_5fInput_2eproto, 7, file_level_enum_descriptors_dotw_5fInput_2eproto, file_level_service_descriptors_dotw_5fInput_2eproto,
};

const char descriptor_table_protodef_dotw_5fInput_2eproto[] =
  "\n\020dotw_Input.proto\022\ndotw.proto\"\267\013\n\005Input"
  "\022\020\n\010psfilter\030\001 \001(\t\022\022\n\ncustomerId\030\002 \001(\005\022\023"
  "\n\013environment\030\003 \001(\t\022\025\n\rrequestSource\030\004 \001"
  "(\005\022\032\n\022exceptRestrictions\030\005 \001(\t\022/\n\'passen"
  "gerNationalityOrResidenceProvided\030\006 \001(\010\022"
  "\020\n\010hotelIds\030\007 \001(\t\022\014\n\004city\030\010 \001(\t\022\017\n\007count"
  "ry\030\t \001(\t\022&\n\036bookingChannelsWithAutoMappi"
  "ng\030\n \001(\t\022\033\n\023bookingChannelTypes\030\013 \001(\t\022\036\n"
  "\026excludedBookingchannel\030\014 \001(\t\022\037\n\027activeF"
  "orRoomCategories\030\r \001(\010\0225\n\014roomOcupancy\030\016"
  " \003(\0132\037.dotw.proto.Input.RoomOccupancy\0224\n"
  "\014hotelFilters\030\017 \001(\0132\036.dotw.proto.Input.H"
  "otelFilters\022:\n\017roomTypeFilters\030\020 \001(\0132!.d"
  "otw.proto.Input.RoomTypeFilters\022>\n\021addit"
  "ionalFilters\030\021 \001(\0132#.dotw.proto.Input.Ad"
  "ditionalFilters\022D\n\024searchPeriodCriteria\030"
  "\022 \001(\0132&.dotw.proto.Input.SearchPeriodCri"
  "teria\032\204\001\n\014RoomCategory\022\024\n\014MainCategory\030\001"
  " \001(\005\022\023\n\013SubCategory\030\002 \001(\005\022\014\n\004View\030\003 \001(\005\022"
  "\023\n\013BeddingType\030\004 \001(\005\022\022\n\nAttribute1\030\005 \001(\005"
  "\022\022\n\nAttribute2\030\006 \001(\005\032\220\001\n\017RoomTypeFilters"
  "\022\r\n\005suite\030\001 \001(\005\022\024\n\014roomAmenitie\030\002 \001(\t\022\016\n"
  "\006roomId\030\003 \001(\t\022\020\n\010roomName\030\004 \001(\t\0226\n\016roomC"
  "ategories\030\005 \003(\0132\036.dotw.proto.Input.RoomC"
  "ategory\032Q\n\rRoomOccupancy\022\016\n\006adults\030\001 \001(\005"
  "\022\020\n\010children\030\002 \001(\t\022\014\n\004twin\030\003 \001(\010\022\020\n\010extr"
  "aBed\030\004 \001(\010\032\317\002\n\014HotelFilters\022\016\n\006rating\030\001 "
  "\001(\t\022\016\n\006luxury\030\002 \001(\005\022\020\n\010location\030\003 \001(\t\022\022\n"
  "\nlocationId\030\004 \001(\t\022\020\n\010amenitie\030\005 \001(\t\022\017\n\007l"
  "eisure\030\006 \001(\t\022\020\n\010business\030\007 \001(\t\022\027\n\017hotelP"
  "reference\030\010 \001(\t\022\r\n\005chain\030\t \001(\t\022\022\n\nattrac"
  "tion\030\n \001(\t\022\021\n\thotelName\030\013 \001(\t\022\021\n\tbuiltYe"
  "ar\030\014 \001(\005\022\026\n\016renovationYear\030\r \001(\005\022\016\n\006floo"
  "rs\030\016 \001(\005\022\021\n\tnoOfRooms\030\017 \001(\005\022\022\n\nfireSafet"
  "y\030\020 \001(\005\022\023\n\013lastUpdated\030\021 \001(\t\032\023\n\021Addition"
  "alFilters\032U\n\024SearchPeriodCriteria\022\022\n\ntra"
  "velFrom\030\001 \001(\005\022\020\n\010travelTo\030\002 \001(\005\022\027\n\017booki"
  "ngDateTime\030\003 \001(\005B\006\370\001\001\320\002\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dotw_5fInput_2eproto = {
  false, descriptor_table_protodef_dotw_5fInput_2eproto,
  "dotw_Input.proto", &assign_descriptors_table_dotw_5fInput_2eproto, 1512,
};

void AddDescriptors_dotw_5fInput_2eproto() {
  static constexpr ::PROTOBUF_NAMESPACE_ID::internal::InitFunc deps[1] =
  {
  };
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_RoomCategory_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_HotelFilters_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_AdditionalFilters_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_SearchPeriodCriteria_dotw_5fInput_2eproto.base);
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Input_dotw_5fInput_2eproto.base);
 ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dotw_5fInput_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dotw_5fInput_2eproto = []() { AddDescriptors_dotw_5fInput_2eproto(); return true; }();
namespace dotw {
namespace proto {

// ===================================================================

void Input_RoomCategory::InitAsDefaultInstance() {
}
class Input_RoomCategory::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_RoomCategory::kMainCategoryFieldNumber;
const int Input_RoomCategory::kSubCategoryFieldNumber;
const int Input_RoomCategory::kViewFieldNumber;
const int Input_RoomCategory::kBeddingTypeFieldNumber;
const int Input_RoomCategory::kAttribute1FieldNumber;
const int Input_RoomCategory::kAttribute2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_RoomCategory::Input_RoomCategory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.RoomCategory)
}
Input_RoomCategory::Input_RoomCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.RoomCategory)
}
Input_RoomCategory::Input_RoomCategory(const Input_RoomCategory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maincategory_, &from.maincategory_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute2_) -
    reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.RoomCategory)
}

void Input_RoomCategory::SharedCtor() {
  ::memset(&maincategory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attribute2_) -
      reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
}

Input_RoomCategory::~Input_RoomCategory() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.RoomCategory)
  SharedDtor();
}

void Input_RoomCategory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Input_RoomCategory::ArenaDtor(void* object) {
  Input_RoomCategory* _this = reinterpret_cast< Input_RoomCategory* >(object);
  (void)_this;
}
void Input_RoomCategory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_RoomCategory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_RoomCategory& Input_RoomCategory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_RoomCategory_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_RoomCategory::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&maincategory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attribute2_) -
      reinterpret_cast<char*>(&maincategory_)) + sizeof(attribute2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_RoomCategory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 MainCategory = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        maincategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 SubCategory = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        subcategory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 View = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 BeddingType = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        beddingtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 Attribute1 = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 40) goto handle_unusual;
        attribute1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 Attribute2 = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        attribute2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_RoomCategory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.RoomCategory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 MainCategory = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maincategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 SubCategory = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcategory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 View = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 BeddingType = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &beddingtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Attribute1 = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Attribute2 = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &attribute2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.RoomCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.RoomCategory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_RoomCategory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->maincategory(), output);
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->subcategory(), output);
  }

  // int32 View = 3;
  if (this->view() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->view(), output);
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->beddingtype(), output);
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->attribute1(), output);
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->attribute2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.RoomCategory)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_RoomCategory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.RoomCategory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->maincategory(), target);
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->subcategory(), target);
  }

  // int32 View = 3;
  if (this->view() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->view(), target);
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->beddingtype(), target);
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->attribute1(), target);
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->attribute2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.RoomCategory)
  return target;
}

size_t Input_RoomCategory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.RoomCategory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 MainCategory = 1;
  if (this->maincategory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maincategory());
  }

  // int32 SubCategory = 2;
  if (this->subcategory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subcategory());
  }

  // int32 View = 3;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->view());
  }

  // int32 BeddingType = 4;
  if (this->beddingtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->beddingtype());
  }

  // int32 Attribute1 = 5;
  if (this->attribute1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->attribute1());
  }

  // int32 Attribute2 = 6;
  if (this->attribute2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->attribute2());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_RoomCategory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.RoomCategory)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_RoomCategory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_RoomCategory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.RoomCategory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.RoomCategory)
    MergeFrom(*source);
  }
}

void Input_RoomCategory::MergeFrom(const Input_RoomCategory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.RoomCategory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.maincategory() != 0) {
    set_maincategory(from.maincategory());
  }
  if (from.subcategory() != 0) {
    set_subcategory(from.subcategory());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.beddingtype() != 0) {
    set_beddingtype(from.beddingtype());
  }
  if (from.attribute1() != 0) {
    set_attribute1(from.attribute1());
  }
  if (from.attribute2() != 0) {
    set_attribute2(from.attribute2());
  }
}

void Input_RoomCategory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.RoomCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_RoomCategory::CopyFrom(const Input_RoomCategory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.RoomCategory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_RoomCategory::IsInitialized() const {
  return true;
}

void Input_RoomCategory::Swap(Input_RoomCategory* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_RoomCategory* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_RoomCategory::UnsafeArenaSwap(Input_RoomCategory* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_RoomCategory::InternalSwap(Input_RoomCategory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(maincategory_, other->maincategory_);
  swap(subcategory_, other->subcategory_);
  swap(view_, other->view_);
  swap(beddingtype_, other->beddingtype_);
  swap(attribute1_, other->attribute1_);
  swap(attribute2_, other->attribute2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_RoomCategory::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input_RoomTypeFilters::InitAsDefaultInstance() {
}
class Input_RoomTypeFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_RoomTypeFilters::kSuiteFieldNumber;
const int Input_RoomTypeFilters::kRoomAmenitieFieldNumber;
const int Input_RoomTypeFilters::kRoomIdFieldNumber;
const int Input_RoomTypeFilters::kRoomNameFieldNumber;
const int Input_RoomTypeFilters::kRoomCategoriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_RoomTypeFilters::Input_RoomTypeFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.RoomTypeFilters)
}
Input_RoomTypeFilters::Input_RoomTypeFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  roomcategories_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.RoomTypeFilters)
}
Input_RoomTypeFilters::Input_RoomTypeFilters(const Input_RoomTypeFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roomcategories_(from.roomcategories_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomamenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomamenitie().size() > 0) {
    roomamenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomamenitie(),
      GetArenaNoVirtual());
  }
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomid().size() > 0) {
    roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomid(),
      GetArenaNoVirtual());
  }
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.roomname().size() > 0) {
    roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.roomname(),
      GetArenaNoVirtual());
  }
  suite_ = from.suite_;
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.RoomTypeFilters)
}

void Input_RoomTypeFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto.base);
  roomamenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  suite_ = 0;
}

Input_RoomTypeFilters::~Input_RoomTypeFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.RoomTypeFilters)
  SharedDtor();
}

void Input_RoomTypeFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  roomamenitie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  roomname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Input_RoomTypeFilters::ArenaDtor(void* object) {
  Input_RoomTypeFilters* _this = reinterpret_cast< Input_RoomTypeFilters* >(object);
  (void)_this;
}
void Input_RoomTypeFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_RoomTypeFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_RoomTypeFilters& Input_RoomTypeFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_RoomTypeFilters_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_RoomTypeFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomcategories_.Clear();
  roomamenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  roomid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  suite_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_RoomTypeFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 suite = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        suite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string roomAmenitie = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomamenitie(), ptr, ctx, "dotw.proto.Input.RoomTypeFilters.roomAmenitie");
        CHK_(ptr);
        break;
      }
      // string roomId = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomid(), ptr, ctx, "dotw.proto.Input.RoomTypeFilters.roomId");
        CHK_(ptr);
        break;
      }
      // string roomName = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_roomname(), ptr, ctx, "dotw.proto.Input.RoomTypeFilters.roomName");
        CHK_(ptr);
        break;
      }
      // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_roomcategories(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 42) break;
          ptr += 1;
        }
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_RoomTypeFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.RoomTypeFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 suite = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &suite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomAmenitie = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomamenitie()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.RoomTypeFilters.roomAmenitie"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomId = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomid().data(), static_cast<int>(this->roomid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.RoomTypeFilters.roomId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string roomName = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->roomname().data(), static_cast<int>(this->roomname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.RoomTypeFilters.roomName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_roomcategories()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.RoomTypeFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.RoomTypeFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_RoomTypeFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 suite = 1;
  if (this->suite() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->suite(), output);
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomAmenitie");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->roomamenitie(), output);
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomid(), output);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->roomname(), output);
  }

  // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomcategories_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->roomcategories(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.RoomTypeFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_RoomTypeFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.RoomTypeFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 suite = 1;
  if (this->suite() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->suite(), target);
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomamenitie().data(), static_cast<int>(this->roomamenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomAmenitie");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->roomamenitie(), target);
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomid().data(), static_cast<int>(this->roomid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->roomid(), target);
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->roomname().data(), static_cast<int>(this->roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomTypeFilters.roomName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->roomname(), target);
  }

  // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomcategories_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->roomcategories(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.RoomTypeFilters)
  return target;
}

size_t Input_RoomTypeFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.RoomTypeFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->roomcategories_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->roomcategories(static_cast<int>(i)));
    }
  }

  // string roomAmenitie = 2;
  if (this->roomamenitie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomamenitie());
  }

  // string roomId = 3;
  if (this->roomid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomid());
  }

  // string roomName = 4;
  if (this->roomname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->roomname());
  }

  // int32 suite = 1;
  if (this->suite() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->suite());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_RoomTypeFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.RoomTypeFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_RoomTypeFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_RoomTypeFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.RoomTypeFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.RoomTypeFilters)
    MergeFrom(*source);
  }
}

void Input_RoomTypeFilters::MergeFrom(const Input_RoomTypeFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.RoomTypeFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roomcategories_.MergeFrom(from.roomcategories_);
  if (from.roomamenitie().size() > 0) {
    set_roomamenitie(from.roomamenitie());
  }
  if (from.roomid().size() > 0) {
    set_roomid(from.roomid());
  }
  if (from.roomname().size() > 0) {
    set_roomname(from.roomname());
  }
  if (from.suite() != 0) {
    set_suite(from.suite());
  }
}

void Input_RoomTypeFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.RoomTypeFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_RoomTypeFilters::CopyFrom(const Input_RoomTypeFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.RoomTypeFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_RoomTypeFilters::IsInitialized() const {
  return true;
}

void Input_RoomTypeFilters::Swap(Input_RoomTypeFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_RoomTypeFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_RoomTypeFilters::UnsafeArenaSwap(Input_RoomTypeFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_RoomTypeFilters::InternalSwap(Input_RoomTypeFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&roomcategories_)->InternalSwap(CastToBase(&other->roomcategories_));
  roomamenitie_.Swap(&other->roomamenitie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomid_.Swap(&other->roomid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  roomname_.Swap(&other->roomname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(suite_, other->suite_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_RoomTypeFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input_RoomOccupancy::InitAsDefaultInstance() {
}
class Input_RoomOccupancy::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_RoomOccupancy::kAdultsFieldNumber;
const int Input_RoomOccupancy::kChildrenFieldNumber;
const int Input_RoomOccupancy::kTwinFieldNumber;
const int Input_RoomOccupancy::kExtraBedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_RoomOccupancy::Input_RoomOccupancy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.RoomOccupancy)
}
Input_RoomOccupancy::Input_RoomOccupancy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.RoomOccupancy)
}
Input_RoomOccupancy::Input_RoomOccupancy(const Input_RoomOccupancy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  children_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.children().size() > 0) {
    children_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.children(),
      GetArenaNoVirtual());
  }
  ::memcpy(&adults_, &from.adults_,
    static_cast<size_t>(reinterpret_cast<char*>(&extrabed_) -
    reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.RoomOccupancy)
}

void Input_RoomOccupancy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto.base);
  children_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&adults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrabed_) -
      reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
}

Input_RoomOccupancy::~Input_RoomOccupancy() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.RoomOccupancy)
  SharedDtor();
}

void Input_RoomOccupancy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  children_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Input_RoomOccupancy::ArenaDtor(void* object) {
  Input_RoomOccupancy* _this = reinterpret_cast< Input_RoomOccupancy* >(object);
  (void)_this;
}
void Input_RoomOccupancy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_RoomOccupancy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_RoomOccupancy& Input_RoomOccupancy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_RoomOccupancy_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_RoomOccupancy::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&adults_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extrabed_) -
      reinterpret_cast<char*>(&adults_)) + sizeof(extrabed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_RoomOccupancy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 adults = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        adults_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string children = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_children(), ptr, ctx, "dotw.proto.Input.RoomOccupancy.children");
        CHK_(ptr);
        break;
      }
      // bool twin = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        twin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // bool extraBed = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        extrabed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_RoomOccupancy::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.RoomOccupancy)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 adults = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &adults_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string children = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_children()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->children().data(), static_cast<int>(this->children().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.RoomOccupancy.children"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool twin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &twin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool extraBed = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &extrabed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.RoomOccupancy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.RoomOccupancy)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_RoomOccupancy::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 adults = 1;
  if (this->adults() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->adults(), output);
  }

  // string children = 2;
  if (this->children().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->children().data(), static_cast<int>(this->children().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomOccupancy.children");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->children(), output);
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->twin(), output);
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->extrabed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.RoomOccupancy)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_RoomOccupancy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.RoomOccupancy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 adults = 1;
  if (this->adults() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->adults(), target);
  }

  // string children = 2;
  if (this->children().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->children().data(), static_cast<int>(this->children().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.RoomOccupancy.children");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->children(), target);
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->twin(), target);
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->extrabed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.RoomOccupancy)
  return target;
}

size_t Input_RoomOccupancy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.RoomOccupancy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string children = 2;
  if (this->children().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->children());
  }

  // int32 adults = 1;
  if (this->adults() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->adults());
  }

  // bool twin = 3;
  if (this->twin() != 0) {
    total_size += 1 + 1;
  }

  // bool extraBed = 4;
  if (this->extrabed() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_RoomOccupancy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.RoomOccupancy)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_RoomOccupancy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_RoomOccupancy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.RoomOccupancy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.RoomOccupancy)
    MergeFrom(*source);
  }
}

void Input_RoomOccupancy::MergeFrom(const Input_RoomOccupancy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.RoomOccupancy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.children().size() > 0) {
    set_children(from.children());
  }
  if (from.adults() != 0) {
    set_adults(from.adults());
  }
  if (from.twin() != 0) {
    set_twin(from.twin());
  }
  if (from.extrabed() != 0) {
    set_extrabed(from.extrabed());
  }
}

void Input_RoomOccupancy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.RoomOccupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_RoomOccupancy::CopyFrom(const Input_RoomOccupancy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.RoomOccupancy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_RoomOccupancy::IsInitialized() const {
  return true;
}

void Input_RoomOccupancy::Swap(Input_RoomOccupancy* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_RoomOccupancy* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_RoomOccupancy::UnsafeArenaSwap(Input_RoomOccupancy* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_RoomOccupancy::InternalSwap(Input_RoomOccupancy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  children_.Swap(&other->children_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(adults_, other->adults_);
  swap(twin_, other->twin_);
  swap(extrabed_, other->extrabed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_RoomOccupancy::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input_HotelFilters::InitAsDefaultInstance() {
}
class Input_HotelFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_HotelFilters::kRatingFieldNumber;
const int Input_HotelFilters::kLuxuryFieldNumber;
const int Input_HotelFilters::kLocationFieldNumber;
const int Input_HotelFilters::kLocationIdFieldNumber;
const int Input_HotelFilters::kAmenitieFieldNumber;
const int Input_HotelFilters::kLeisureFieldNumber;
const int Input_HotelFilters::kBusinessFieldNumber;
const int Input_HotelFilters::kHotelPreferenceFieldNumber;
const int Input_HotelFilters::kChainFieldNumber;
const int Input_HotelFilters::kAttractionFieldNumber;
const int Input_HotelFilters::kHotelNameFieldNumber;
const int Input_HotelFilters::kBuiltYearFieldNumber;
const int Input_HotelFilters::kRenovationYearFieldNumber;
const int Input_HotelFilters::kFloorsFieldNumber;
const int Input_HotelFilters::kNoOfRoomsFieldNumber;
const int Input_HotelFilters::kFireSafetyFieldNumber;
const int Input_HotelFilters::kLastUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_HotelFilters::Input_HotelFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.HotelFilters)
}
Input_HotelFilters::Input_HotelFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.HotelFilters)
}
Input_HotelFilters::Input_HotelFilters(const Input_HotelFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.rating().size() > 0) {
    rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rating(),
      GetArenaNoVirtual());
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location(),
      GetArenaNoVirtual());
  }
  locationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.locationid().size() > 0) {
    locationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locationid(),
      GetArenaNoVirtual());
  }
  amenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.amenitie().size() > 0) {
    amenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.amenitie(),
      GetArenaNoVirtual());
  }
  leisure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.leisure().size() > 0) {
    leisure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.leisure(),
      GetArenaNoVirtual());
  }
  business_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.business().size() > 0) {
    business_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.business(),
      GetArenaNoVirtual());
  }
  hotelpreference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hotelpreference().size() > 0) {
    hotelpreference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotelpreference(),
      GetArenaNoVirtual());
  }
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.chain().size() > 0) {
    chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain(),
      GetArenaNoVirtual());
  }
  attraction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.attraction().size() > 0) {
    attraction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.attraction(),
      GetArenaNoVirtual());
  }
  hotelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hotelname().size() > 0) {
    hotelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotelname(),
      GetArenaNoVirtual());
  }
  lastupdated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.lastupdated().size() > 0) {
    lastupdated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastupdated(),
      GetArenaNoVirtual());
  }
  ::memcpy(&luxury_, &from.luxury_,
    static_cast<size_t>(reinterpret_cast<char*>(&firesafety_) -
    reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.HotelFilters)
}

void Input_HotelFilters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Input_HotelFilters_dotw_5fInput_2eproto.base);
  rating_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amenitie_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leisure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelpreference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attraction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastupdated_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&luxury_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firesafety_) -
      reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
}

Input_HotelFilters::~Input_HotelFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.HotelFilters)
  SharedDtor();
}

void Input_HotelFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  rating_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amenitie_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  leisure_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  business_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelpreference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attraction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lastupdated_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Input_HotelFilters::ArenaDtor(void* object) {
  Input_HotelFilters* _this = reinterpret_cast< Input_HotelFilters* >(object);
  (void)_this;
}
void Input_HotelFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_HotelFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_HotelFilters& Input_HotelFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_HotelFilters_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_HotelFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rating_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  locationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  amenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  leisure_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  business_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hotelpreference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  chain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  attraction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hotelname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lastupdated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&luxury_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&firesafety_) -
      reinterpret_cast<char*>(&luxury_)) + sizeof(firesafety_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_HotelFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rating = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_rating(), ptr, ctx, "dotw.proto.Input.HotelFilters.rating");
        CHK_(ptr);
        break;
      }
      // int32 luxury = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        luxury_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string location = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_location(), ptr, ctx, "dotw.proto.Input.HotelFilters.location");
        CHK_(ptr);
        break;
      }
      // string locationId = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_locationid(), ptr, ctx, "dotw.proto.Input.HotelFilters.locationId");
        CHK_(ptr);
        break;
      }
      // string amenitie = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_amenitie(), ptr, ctx, "dotw.proto.Input.HotelFilters.amenitie");
        CHK_(ptr);
        break;
      }
      // string leisure = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_leisure(), ptr, ctx, "dotw.proto.Input.HotelFilters.leisure");
        CHK_(ptr);
        break;
      }
      // string business = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_business(), ptr, ctx, "dotw.proto.Input.HotelFilters.business");
        CHK_(ptr);
        break;
      }
      // string hotelPreference = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hotelpreference(), ptr, ctx, "dotw.proto.Input.HotelFilters.hotelPreference");
        CHK_(ptr);
        break;
      }
      // string chain = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_chain(), ptr, ctx, "dotw.proto.Input.HotelFilters.chain");
        CHK_(ptr);
        break;
      }
      // string attraction = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_attraction(), ptr, ctx, "dotw.proto.Input.HotelFilters.attraction");
        CHK_(ptr);
        break;
      }
      // string hotelName = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hotelname(), ptr, ctx, "dotw.proto.Input.HotelFilters.hotelName");
        CHK_(ptr);
        break;
      }
      // int32 builtYear = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 96) goto handle_unusual;
        builtyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 renovationYear = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        renovationyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 floors = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 112) goto handle_unusual;
        floors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 noOfRooms = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 120) goto handle_unusual;
        noofrooms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 fireSafety = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 128) goto handle_unusual;
        firesafety_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string lastUpdated = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lastupdated(), ptr, ctx, "dotw.proto.Input.HotelFilters.lastUpdated");
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_HotelFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.HotelFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string rating = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rating()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->rating().data(), static_cast<int>(this->rating().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.rating"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 luxury = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &luxury_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), static_cast<int>(this->location().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string locationId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locationid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->locationid().data(), static_cast<int>(this->locationid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.locationId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string amenitie = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_amenitie()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->amenitie().data(), static_cast<int>(this->amenitie().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.amenitie"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leisure = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_leisure()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->leisure().data(), static_cast<int>(this->leisure().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.leisure"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string business = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_business()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->business().data(), static_cast<int>(this->business().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.business"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hotelPreference = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelpreference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.hotelPreference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string chain = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_chain()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->chain().data(), static_cast<int>(this->chain().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.chain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string attraction = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_attraction()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->attraction().data(), static_cast<int>(this->attraction().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.attraction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hotelName = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hotelname().data(), static_cast<int>(this->hotelname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.hotelName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 builtYear = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &builtyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 renovationYear = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &renovationyear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 floors = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &floors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 noOfRooms = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &noofrooms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fireSafety = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &firesafety_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lastUpdated = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lastupdated()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.HotelFilters.lastUpdated"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.HotelFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.HotelFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_HotelFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rating().data(), static_cast<int>(this->rating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.rating");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rating(), output);
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->luxury(), output);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.location");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->location(), output);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.locationId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->locationid(), output);
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->amenitie().data(), static_cast<int>(this->amenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.amenitie");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->amenitie(), output);
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->leisure().data(), static_cast<int>(this->leisure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.leisure");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leisure(), output);
  }

  // string business = 7;
  if (this->business().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->business().data(), static_cast<int>(this->business().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.business");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->business(), output);
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.hotelPreference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->hotelpreference(), output);
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chain().data(), static_cast<int>(this->chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.chain");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->chain(), output);
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attraction().data(), static_cast<int>(this->attraction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.attraction");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->attraction(), output);
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelname().data(), static_cast<int>(this->hotelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.hotelName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->hotelname(), output);
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->builtyear(), output);
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->renovationyear(), output);
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->floors(), output);
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->noofrooms(), output);
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->firesafety(), output);
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.lastUpdated");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->lastupdated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.HotelFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_HotelFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.HotelFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rating().data(), static_cast<int>(this->rating().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.rating");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->rating(), target);
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->luxury(), target);
  }

  // string location = 3;
  if (this->location().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), static_cast<int>(this->location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.location");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->location(), target);
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->locationid().data(), static_cast<int>(this->locationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.locationId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->locationid(), target);
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->amenitie().data(), static_cast<int>(this->amenitie().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.amenitie");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->amenitie(), target);
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->leisure().data(), static_cast<int>(this->leisure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.leisure");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->leisure(), target);
  }

  // string business = 7;
  if (this->business().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->business().data(), static_cast<int>(this->business().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.business");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->business(), target);
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelpreference().data(), static_cast<int>(this->hotelpreference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.hotelPreference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->hotelpreference(), target);
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->chain().data(), static_cast<int>(this->chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.chain");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->chain(), target);
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->attraction().data(), static_cast<int>(this->attraction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.attraction");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->attraction(), target);
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelname().data(), static_cast<int>(this->hotelname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.hotelName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->hotelname(), target);
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->builtyear(), target);
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->renovationyear(), target);
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->floors(), target);
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->noofrooms(), target);
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->firesafety(), target);
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastupdated().data(), static_cast<int>(this->lastupdated().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.HotelFilters.lastUpdated");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->lastupdated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.HotelFilters)
  return target;
}

size_t Input_HotelFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.HotelFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rating = 1;
  if (this->rating().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->rating());
  }

  // string location = 3;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string locationId = 4;
  if (this->locationid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->locationid());
  }

  // string amenitie = 5;
  if (this->amenitie().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->amenitie());
  }

  // string leisure = 6;
  if (this->leisure().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->leisure());
  }

  // string business = 7;
  if (this->business().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->business());
  }

  // string hotelPreference = 8;
  if (this->hotelpreference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hotelpreference());
  }

  // string chain = 9;
  if (this->chain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->chain());
  }

  // string attraction = 10;
  if (this->attraction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->attraction());
  }

  // string hotelName = 11;
  if (this->hotelname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hotelname());
  }

  // string lastUpdated = 17;
  if (this->lastupdated().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lastupdated());
  }

  // int32 luxury = 2;
  if (this->luxury() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->luxury());
  }

  // int32 builtYear = 12;
  if (this->builtyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->builtyear());
  }

  // int32 renovationYear = 13;
  if (this->renovationyear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->renovationyear());
  }

  // int32 floors = 14;
  if (this->floors() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->floors());
  }

  // int32 noOfRooms = 15;
  if (this->noofrooms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->noofrooms());
  }

  // int32 fireSafety = 16;
  if (this->firesafety() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->firesafety());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_HotelFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.HotelFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_HotelFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_HotelFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.HotelFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.HotelFilters)
    MergeFrom(*source);
  }
}

void Input_HotelFilters::MergeFrom(const Input_HotelFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.HotelFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rating().size() > 0) {
    set_rating(from.rating());
  }
  if (from.location().size() > 0) {
    set_location(from.location());
  }
  if (from.locationid().size() > 0) {
    set_locationid(from.locationid());
  }
  if (from.amenitie().size() > 0) {
    set_amenitie(from.amenitie());
  }
  if (from.leisure().size() > 0) {
    set_leisure(from.leisure());
  }
  if (from.business().size() > 0) {
    set_business(from.business());
  }
  if (from.hotelpreference().size() > 0) {
    set_hotelpreference(from.hotelpreference());
  }
  if (from.chain().size() > 0) {
    set_chain(from.chain());
  }
  if (from.attraction().size() > 0) {
    set_attraction(from.attraction());
  }
  if (from.hotelname().size() > 0) {
    set_hotelname(from.hotelname());
  }
  if (from.lastupdated().size() > 0) {
    set_lastupdated(from.lastupdated());
  }
  if (from.luxury() != 0) {
    set_luxury(from.luxury());
  }
  if (from.builtyear() != 0) {
    set_builtyear(from.builtyear());
  }
  if (from.renovationyear() != 0) {
    set_renovationyear(from.renovationyear());
  }
  if (from.floors() != 0) {
    set_floors(from.floors());
  }
  if (from.noofrooms() != 0) {
    set_noofrooms(from.noofrooms());
  }
  if (from.firesafety() != 0) {
    set_firesafety(from.firesafety());
  }
}

void Input_HotelFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.HotelFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_HotelFilters::CopyFrom(const Input_HotelFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.HotelFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_HotelFilters::IsInitialized() const {
  return true;
}

void Input_HotelFilters::Swap(Input_HotelFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_HotelFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_HotelFilters::UnsafeArenaSwap(Input_HotelFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_HotelFilters::InternalSwap(Input_HotelFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rating_.Swap(&other->rating_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locationid_.Swap(&other->locationid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  amenitie_.Swap(&other->amenitie_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  leisure_.Swap(&other->leisure_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  business_.Swap(&other->business_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotelpreference_.Swap(&other->hotelpreference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chain_.Swap(&other->chain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  attraction_.Swap(&other->attraction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotelname_.Swap(&other->hotelname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lastupdated_.Swap(&other->lastupdated_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(luxury_, other->luxury_);
  swap(builtyear_, other->builtyear_);
  swap(renovationyear_, other->renovationyear_);
  swap(floors_, other->floors_);
  swap(noofrooms_, other->noofrooms_);
  swap(firesafety_, other->firesafety_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_HotelFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input_AdditionalFilters::InitAsDefaultInstance() {
}
class Input_AdditionalFilters::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_AdditionalFilters::Input_AdditionalFilters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.AdditionalFilters)
}
Input_AdditionalFilters::Input_AdditionalFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.AdditionalFilters)
}
Input_AdditionalFilters::Input_AdditionalFilters(const Input_AdditionalFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.AdditionalFilters)
}

void Input_AdditionalFilters::SharedCtor() {
}

Input_AdditionalFilters::~Input_AdditionalFilters() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.AdditionalFilters)
  SharedDtor();
}

void Input_AdditionalFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Input_AdditionalFilters::ArenaDtor(void* object) {
  Input_AdditionalFilters* _this = reinterpret_cast< Input_AdditionalFilters* >(object);
  (void)_this;
}
void Input_AdditionalFilters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_AdditionalFilters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_AdditionalFilters& Input_AdditionalFilters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_AdditionalFilters_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_AdditionalFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_AdditionalFilters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_AdditionalFilters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.AdditionalFilters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.AdditionalFilters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.AdditionalFilters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_AdditionalFilters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.AdditionalFilters)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_AdditionalFilters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.AdditionalFilters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.AdditionalFilters)
  return target;
}

size_t Input_AdditionalFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.AdditionalFilters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_AdditionalFilters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.AdditionalFilters)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_AdditionalFilters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_AdditionalFilters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.AdditionalFilters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.AdditionalFilters)
    MergeFrom(*source);
  }
}

void Input_AdditionalFilters::MergeFrom(const Input_AdditionalFilters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.AdditionalFilters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Input_AdditionalFilters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.AdditionalFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_AdditionalFilters::CopyFrom(const Input_AdditionalFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.AdditionalFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_AdditionalFilters::IsInitialized() const {
  return true;
}

void Input_AdditionalFilters::Swap(Input_AdditionalFilters* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_AdditionalFilters* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_AdditionalFilters::UnsafeArenaSwap(Input_AdditionalFilters* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_AdditionalFilters::InternalSwap(Input_AdditionalFilters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_AdditionalFilters::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input_SearchPeriodCriteria::InitAsDefaultInstance() {
}
class Input_SearchPeriodCriteria::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input_SearchPeriodCriteria::kTravelFromFieldNumber;
const int Input_SearchPeriodCriteria::kTravelToFieldNumber;
const int Input_SearchPeriodCriteria::kBookingDateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input_SearchPeriodCriteria::Input_SearchPeriodCriteria()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input.SearchPeriodCriteria)
}
Input_SearchPeriodCriteria::Input_SearchPeriodCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input.SearchPeriodCriteria)
}
Input_SearchPeriodCriteria::Input_SearchPeriodCriteria(const Input_SearchPeriodCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&travelfrom_, &from.travelfrom_,
    static_cast<size_t>(reinterpret_cast<char*>(&bookingdatetime_) -
    reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input.SearchPeriodCriteria)
}

void Input_SearchPeriodCriteria::SharedCtor() {
  ::memset(&travelfrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bookingdatetime_) -
      reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
}

Input_SearchPeriodCriteria::~Input_SearchPeriodCriteria() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input.SearchPeriodCriteria)
  SharedDtor();
}

void Input_SearchPeriodCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Input_SearchPeriodCriteria::ArenaDtor(void* object) {
  Input_SearchPeriodCriteria* _this = reinterpret_cast< Input_SearchPeriodCriteria* >(object);
  (void)_this;
}
void Input_SearchPeriodCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input_SearchPeriodCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input_SearchPeriodCriteria& Input_SearchPeriodCriteria::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_SearchPeriodCriteria_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input_SearchPeriodCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&travelfrom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bookingdatetime_) -
      reinterpret_cast<char*>(&travelfrom_)) + sizeof(bookingdatetime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input_SearchPeriodCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 travelFrom = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 8) goto handle_unusual;
        travelfrom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 travelTo = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        travelto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // int32 bookingDateTime = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 24) goto handle_unusual;
        bookingdatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input_SearchPeriodCriteria::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input.SearchPeriodCriteria)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 travelFrom = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &travelfrom_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 travelTo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &travelto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bookingDateTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &bookingdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input.SearchPeriodCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input.SearchPeriodCriteria)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input_SearchPeriodCriteria::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->travelfrom(), output);
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->travelto(), output);
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->bookingdatetime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input.SearchPeriodCriteria)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input_SearchPeriodCriteria::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input.SearchPeriodCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->travelfrom(), target);
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->travelto(), target);
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->bookingdatetime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input.SearchPeriodCriteria)
  return target;
}

size_t Input_SearchPeriodCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input.SearchPeriodCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 travelFrom = 1;
  if (this->travelfrom() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->travelfrom());
  }

  // int32 travelTo = 2;
  if (this->travelto() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->travelto());
  }

  // int32 bookingDateTime = 3;
  if (this->bookingdatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->bookingdatetime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input_SearchPeriodCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input.SearchPeriodCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const Input_SearchPeriodCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input_SearchPeriodCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input.SearchPeriodCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input.SearchPeriodCriteria)
    MergeFrom(*source);
  }
}

void Input_SearchPeriodCriteria::MergeFrom(const Input_SearchPeriodCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input.SearchPeriodCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.travelfrom() != 0) {
    set_travelfrom(from.travelfrom());
  }
  if (from.travelto() != 0) {
    set_travelto(from.travelto());
  }
  if (from.bookingdatetime() != 0) {
    set_bookingdatetime(from.bookingdatetime());
  }
}

void Input_SearchPeriodCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input.SearchPeriodCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input_SearchPeriodCriteria::CopyFrom(const Input_SearchPeriodCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input.SearchPeriodCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input_SearchPeriodCriteria::IsInitialized() const {
  return true;
}

void Input_SearchPeriodCriteria::Swap(Input_SearchPeriodCriteria* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input_SearchPeriodCriteria* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input_SearchPeriodCriteria::UnsafeArenaSwap(Input_SearchPeriodCriteria* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input_SearchPeriodCriteria::InternalSwap(Input_SearchPeriodCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(travelfrom_, other->travelfrom_);
  swap(travelto_, other->travelto_);
  swap(bookingdatetime_, other->bookingdatetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input_SearchPeriodCriteria::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Input::InitAsDefaultInstance() {
  ::dotw::proto::_Input_default_instance_._instance.get_mutable()->hotelfilters_ = const_cast< ::dotw::proto::Input_HotelFilters*>(
      ::dotw::proto::Input_HotelFilters::internal_default_instance());
  ::dotw::proto::_Input_default_instance_._instance.get_mutable()->roomtypefilters_ = const_cast< ::dotw::proto::Input_RoomTypeFilters*>(
      ::dotw::proto::Input_RoomTypeFilters::internal_default_instance());
  ::dotw::proto::_Input_default_instance_._instance.get_mutable()->additionalfilters_ = const_cast< ::dotw::proto::Input_AdditionalFilters*>(
      ::dotw::proto::Input_AdditionalFilters::internal_default_instance());
  ::dotw::proto::_Input_default_instance_._instance.get_mutable()->searchperiodcriteria_ = const_cast< ::dotw::proto::Input_SearchPeriodCriteria*>(
      ::dotw::proto::Input_SearchPeriodCriteria::internal_default_instance());
}
class Input::HasBitSetters {
 public:
  static const ::dotw::proto::Input_HotelFilters& hotelfilters(const Input* msg);
  static const ::dotw::proto::Input_RoomTypeFilters& roomtypefilters(const Input* msg);
  static const ::dotw::proto::Input_AdditionalFilters& additionalfilters(const Input* msg);
  static const ::dotw::proto::Input_SearchPeriodCriteria& searchperiodcriteria(const Input* msg);
};

const ::dotw::proto::Input_HotelFilters&
Input::HasBitSetters::hotelfilters(const Input* msg) {
  return *msg->hotelfilters_;
}
const ::dotw::proto::Input_RoomTypeFilters&
Input::HasBitSetters::roomtypefilters(const Input* msg) {
  return *msg->roomtypefilters_;
}
const ::dotw::proto::Input_AdditionalFilters&
Input::HasBitSetters::additionalfilters(const Input* msg) {
  return *msg->additionalfilters_;
}
const ::dotw::proto::Input_SearchPeriodCriteria&
Input::HasBitSetters::searchperiodcriteria(const Input* msg) {
  return *msg->searchperiodcriteria_;
}
void Input::unsafe_arena_set_allocated_hotelfilters(
    ::dotw::proto::Input_HotelFilters* hotelfilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete hotelfilters_;
  }
  hotelfilters_ = hotelfilters;
  if (hotelfilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.hotelFilters)
}
void Input::unsafe_arena_set_allocated_roomtypefilters(
    ::dotw::proto::Input_RoomTypeFilters* roomtypefilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = roomtypefilters;
  if (roomtypefilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.roomTypeFilters)
}
void Input::unsafe_arena_set_allocated_additionalfilters(
    ::dotw::proto::Input_AdditionalFilters* additionalfilters) {
  if (GetArenaNoVirtual() == nullptr) {
    delete additionalfilters_;
  }
  additionalfilters_ = additionalfilters;
  if (additionalfilters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.additionalFilters)
}
void Input::unsafe_arena_set_allocated_searchperiodcriteria(
    ::dotw::proto::Input_SearchPeriodCriteria* searchperiodcriteria) {
  if (GetArenaNoVirtual() == nullptr) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = searchperiodcriteria;
  if (searchperiodcriteria) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.searchPeriodCriteria)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Input::kPsfilterFieldNumber;
const int Input::kCustomerIdFieldNumber;
const int Input::kEnvironmentFieldNumber;
const int Input::kRequestSourceFieldNumber;
const int Input::kExceptRestrictionsFieldNumber;
const int Input::kPassengerNationalityOrResidenceProvidedFieldNumber;
const int Input::kHotelIdsFieldNumber;
const int Input::kCityFieldNumber;
const int Input::kCountryFieldNumber;
const int Input::kBookingChannelsWithAutoMappingFieldNumber;
const int Input::kBookingChannelTypesFieldNumber;
const int Input::kExcludedBookingchannelFieldNumber;
const int Input::kActiveForRoomCategoriesFieldNumber;
const int Input::kRoomOcupancyFieldNumber;
const int Input::kHotelFiltersFieldNumber;
const int Input::kRoomTypeFiltersFieldNumber;
const int Input::kAdditionalFiltersFieldNumber;
const int Input::kSearchPeriodCriteriaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Input::Input()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dotw.proto.Input)
}
Input::Input(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  roomocupancy_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dotw.proto.Input)
}
Input::Input(const Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      roomocupancy_(from.roomocupancy_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  psfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.psfilter().size() > 0) {
    psfilter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psfilter(),
      GetArenaNoVirtual());
  }
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.environment().size() > 0) {
    environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.environment(),
      GetArenaNoVirtual());
  }
  exceptrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.exceptrestrictions().size() > 0) {
    exceptrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.exceptrestrictions(),
      GetArenaNoVirtual());
  }
  hotelids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hotelids().size() > 0) {
    hotelids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotelids(),
      GetArenaNoVirtual());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.city().size() > 0) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.city(),
      GetArenaNoVirtual());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.country().size() > 0) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country(),
      GetArenaNoVirtual());
  }
  bookingchannelswithautomapping_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bookingchannelswithautomapping().size() > 0) {
    bookingchannelswithautomapping_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bookingchannelswithautomapping(),
      GetArenaNoVirtual());
  }
  bookingchanneltypes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.bookingchanneltypes().size() > 0) {
    bookingchanneltypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bookingchanneltypes(),
      GetArenaNoVirtual());
  }
  excludedbookingchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.excludedbookingchannel().size() > 0) {
    excludedbookingchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.excludedbookingchannel(),
      GetArenaNoVirtual());
  }
  if (from.has_hotelfilters()) {
    hotelfilters_ = new ::dotw::proto::Input_HotelFilters(*from.hotelfilters_);
  } else {
    hotelfilters_ = nullptr;
  }
  if (from.has_roomtypefilters()) {
    roomtypefilters_ = new ::dotw::proto::Input_RoomTypeFilters(*from.roomtypefilters_);
  } else {
    roomtypefilters_ = nullptr;
  }
  if (from.has_additionalfilters()) {
    additionalfilters_ = new ::dotw::proto::Input_AdditionalFilters(*from.additionalfilters_);
  } else {
    additionalfilters_ = nullptr;
  }
  if (from.has_searchperiodcriteria()) {
    searchperiodcriteria_ = new ::dotw::proto::Input_SearchPeriodCriteria(*from.searchperiodcriteria_);
  } else {
    searchperiodcriteria_ = nullptr;
  }
  ::memcpy(&customerid_, &from.customerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&activeforroomcategories_) -
    reinterpret_cast<char*>(&customerid_)) + sizeof(activeforroomcategories_));
  // @@protoc_insertion_point(copy_constructor:dotw.proto.Input)
}

void Input::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_Input_dotw_5fInput_2eproto.base);
  psfilter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exceptrestrictions_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelids_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookingchannelswithautomapping_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookingchanneltypes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excludedbookingchannel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hotelfilters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeforroomcategories_) -
      reinterpret_cast<char*>(&hotelfilters_)) + sizeof(activeforroomcategories_));
}

Input::~Input() {
  // @@protoc_insertion_point(destructor:dotw.proto.Input)
  SharedDtor();
}

void Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  psfilter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exceptrestrictions_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hotelids_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookingchannelswithautomapping_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bookingchanneltypes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  excludedbookingchannel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hotelfilters_;
  if (this != internal_default_instance()) delete roomtypefilters_;
  if (this != internal_default_instance()) delete additionalfilters_;
  if (this != internal_default_instance()) delete searchperiodcriteria_;
}

void Input::ArenaDtor(void* object) {
  Input* _this = reinterpret_cast< Input* >(object);
  (void)_this;
}
void Input::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Input::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Input& Input::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Input_dotw_5fInput_2eproto.base);
  return *internal_default_instance();
}


void Input::Clear() {
// @@protoc_insertion_point(message_clear_start:dotw.proto.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomocupancy_.Clear();
  psfilter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  environment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exceptrestrictions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hotelids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bookingchannelswithautomapping_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bookingchanneltypes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  excludedbookingchannel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && hotelfilters_ != nullptr) {
    delete hotelfilters_;
  }
  hotelfilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && roomtypefilters_ != nullptr) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && additionalfilters_ != nullptr) {
    delete additionalfilters_;
  }
  additionalfilters_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && searchperiodcriteria_ != nullptr) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = nullptr;
  ::memset(&customerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&activeforroomcategories_) -
      reinterpret_cast<char*>(&customerid_)) + sizeof(activeforroomcategories_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Input::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string psfilter = 1;
      case 1: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_psfilter(), ptr, ctx, "dotw.proto.Input.psfilter");
        CHK_(ptr);
        break;
      }
      // int32 customerId = 2;
      case 2: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 16) goto handle_unusual;
        customerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string environment = 3;
      case 3: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_environment(), ptr, ctx, "dotw.proto.Input.environment");
        CHK_(ptr);
        break;
      }
      // int32 requestSource = 4;
      case 4: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 32) goto handle_unusual;
        requestsource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string exceptRestrictions = 5;
      case 5: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_exceptrestrictions(), ptr, ctx, "dotw.proto.Input.exceptRestrictions");
        CHK_(ptr);
        break;
      }
      // bool passengerNationalityOrResidenceProvided = 6;
      case 6: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 48) goto handle_unusual;
        passengernationalityorresidenceprovided_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // string hotelIds = 7;
      case 7: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hotelids(), ptr, ctx, "dotw.proto.Input.hotelIds");
        CHK_(ptr);
        break;
      }
      // string city = 8;
      case 8: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_city(), ptr, ctx, "dotw.proto.Input.city");
        CHK_(ptr);
        break;
      }
      // string country = 9;
      case 9: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country(), ptr, ctx, "dotw.proto.Input.country");
        CHK_(ptr);
        break;
      }
      // string bookingChannelsWithAutoMapping = 10;
      case 10: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bookingchannelswithautomapping(), ptr, ctx, "dotw.proto.Input.bookingChannelsWithAutoMapping");
        CHK_(ptr);
        break;
      }
      // string bookingChannelTypes = 11;
      case 11: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_bookingchanneltypes(), ptr, ctx, "dotw.proto.Input.bookingChannelTypes");
        CHK_(ptr);
        break;
      }
      // string excludedBookingchannel = 12;
      case 12: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_excludedbookingchannel(), ptr, ctx, "dotw.proto.Input.excludedBookingchannel");
        CHK_(ptr);
        break;
      }
      // bool activeForRoomCategories = 13;
      case 13: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 104) goto handle_unusual;
        activeforroomcategories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
        break;
      }
      // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
      case 14: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 114) goto handle_unusual;
        while (true) {
          ptr = ctx->ParseMessage(add_roomocupancy(), ptr);
          CHK_(ptr);
          if (!ctx->DataAvailable(ptr)) break;
          if (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) != 114) break;
          ptr += 1;
        }
        break;
      }
      // .dotw.proto.Input.HotelFilters hotelFilters = 15;
      case 15: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 122) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_hotelfilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
      case 16: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 130) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_roomtypefilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
      case 17: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 138) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_additionalfilters(), ptr);
        CHK_(ptr);
        break;
      }
      // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
      case 18: {
        if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) != 146) goto handle_unusual;
        ptr = ctx->ParseMessage(mutable_searchperiodcriteria(), ptr);
        CHK_(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        break;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Input::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:dotw.proto.Input)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string psfilter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_psfilter()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->psfilter().data(), static_cast<int>(this->psfilter().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.psfilter"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 customerId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &customerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string environment = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_environment()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->environment().data(), static_cast<int>(this->environment().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.environment"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 requestSource = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &requestsource_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string exceptRestrictions = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_exceptrestrictions()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->exceptrestrictions().data(), static_cast<int>(this->exceptrestrictions().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.exceptRestrictions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool passengerNationalityOrResidenceProvided = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passengernationalityorresidenceprovided_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hotelIds = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotelids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hotelids().data(), static_cast<int>(this->hotelids().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.hotelIds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string city = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->city().data(), static_cast<int>(this->city().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.city"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bookingChannelsWithAutoMapping = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bookingchannelswithautomapping()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bookingchannelswithautomapping().data(), static_cast<int>(this->bookingchannelswithautomapping().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.bookingChannelsWithAutoMapping"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bookingChannelTypes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bookingchanneltypes()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->bookingchanneltypes().data(), static_cast<int>(this->bookingchanneltypes().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.bookingChannelTypes"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string excludedBookingchannel = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_excludedbookingchannel()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->excludedbookingchannel().data(), static_cast<int>(this->excludedbookingchannel().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "dotw.proto.Input.excludedBookingchannel"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool activeForRoomCategories = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &activeforroomcategories_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_roomocupancy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.Input.HotelFilters hotelFilters = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hotelfilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_roomtypefilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_additionalfilters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_searchperiodcriteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dotw.proto.Input)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dotw.proto.Input)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Input::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dotw.proto.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->psfilter().data(), static_cast<int>(this->psfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.psfilter");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->psfilter(), output);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->customerid(), output);
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.environment");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->environment(), output);
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->requestsource(), output);
  }

  // string exceptRestrictions = 5;
  if (this->exceptrestrictions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exceptrestrictions().data(), static_cast<int>(this->exceptrestrictions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.exceptRestrictions");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exceptrestrictions(), output);
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->passengernationalityorresidenceprovided(), output);
  }

  // string hotelIds = 7;
  if (this->hotelids().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelids().data(), static_cast<int>(this->hotelids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.hotelIds");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hotelids(), output);
  }

  // string city = 8;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.city");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->city(), output);
  }

  // string country = 9;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.country");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country(), output);
  }

  // string bookingChannelsWithAutoMapping = 10;
  if (this->bookingchannelswithautomapping().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bookingchannelswithautomapping().data(), static_cast<int>(this->bookingchannelswithautomapping().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.bookingChannelsWithAutoMapping");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->bookingchannelswithautomapping(), output);
  }

  // string bookingChannelTypes = 11;
  if (this->bookingchanneltypes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bookingchanneltypes().data(), static_cast<int>(this->bookingchanneltypes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.bookingChannelTypes");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->bookingchanneltypes(), output);
  }

  // string excludedBookingchannel = 12;
  if (this->excludedbookingchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->excludedbookingchannel().data(), static_cast<int>(this->excludedbookingchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.excludedBookingchannel");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->excludedbookingchannel(), output);
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->activeforroomcategories(), output);
  }

  // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomocupancy_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->roomocupancy(static_cast<int>(i)),
      output);
  }

  // .dotw.proto.Input.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::hotelfilters(this), output);
  }

  // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::roomtypefilters(this), output);
  }

  // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::additionalfilters(this), output);
  }

  // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::searchperiodcriteria(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dotw.proto.Input)
}

::PROTOBUF_NAMESPACE_ID::uint8* Input::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dotw.proto.Input)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->psfilter().data(), static_cast<int>(this->psfilter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.psfilter");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->psfilter(), target);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->customerid(), target);
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->environment().data(), static_cast<int>(this->environment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.environment");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->environment(), target);
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->requestsource(), target);
  }

  // string exceptRestrictions = 5;
  if (this->exceptrestrictions().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->exceptrestrictions().data(), static_cast<int>(this->exceptrestrictions().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.exceptRestrictions");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->exceptrestrictions(), target);
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->passengernationalityorresidenceprovided(), target);
  }

  // string hotelIds = 7;
  if (this->hotelids().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hotelids().data(), static_cast<int>(this->hotelids().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.hotelIds");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->hotelids(), target);
  }

  // string city = 8;
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->city().data(), static_cast<int>(this->city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.city");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->city(), target);
  }

  // string country = 9;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.country");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->country(), target);
  }

  // string bookingChannelsWithAutoMapping = 10;
  if (this->bookingchannelswithautomapping().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bookingchannelswithautomapping().data(), static_cast<int>(this->bookingchannelswithautomapping().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.bookingChannelsWithAutoMapping");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->bookingchannelswithautomapping(), target);
  }

  // string bookingChannelTypes = 11;
  if (this->bookingchanneltypes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->bookingchanneltypes().data(), static_cast<int>(this->bookingchanneltypes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.bookingChannelTypes");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->bookingchanneltypes(), target);
  }

  // string excludedBookingchannel = 12;
  if (this->excludedbookingchannel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->excludedbookingchannel().data(), static_cast<int>(this->excludedbookingchannel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dotw.proto.Input.excludedBookingchannel");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->excludedbookingchannel(), target);
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->activeforroomcategories(), target);
  }

  // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roomocupancy_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->roomocupancy(static_cast<int>(i)), target);
  }

  // .dotw.proto.Input.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::hotelfilters(this), target);
  }

  // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::roomtypefilters(this), target);
  }

  // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::additionalfilters(this), target);
  }

  // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::searchperiodcriteria(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dotw.proto.Input)
  return target;
}

size_t Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dotw.proto.Input)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->roomocupancy_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->roomocupancy(static_cast<int>(i)));
    }
  }

  // string psfilter = 1;
  if (this->psfilter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->psfilter());
  }

  // string environment = 3;
  if (this->environment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->environment());
  }

  // string exceptRestrictions = 5;
  if (this->exceptrestrictions().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->exceptrestrictions());
  }

  // string hotelIds = 7;
  if (this->hotelids().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hotelids());
  }

  // string city = 8;
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->city());
  }

  // string country = 9;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string bookingChannelsWithAutoMapping = 10;
  if (this->bookingchannelswithautomapping().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bookingchannelswithautomapping());
  }

  // string bookingChannelTypes = 11;
  if (this->bookingchanneltypes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->bookingchanneltypes());
  }

  // string excludedBookingchannel = 12;
  if (this->excludedbookingchannel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->excludedbookingchannel());
  }

  // .dotw.proto.Input.HotelFilters hotelFilters = 15;
  if (this->has_hotelfilters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hotelfilters_);
  }

  // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
  if (this->has_roomtypefilters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roomtypefilters_);
  }

  // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
  if (this->has_additionalfilters()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *additionalfilters_);
  }

  // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
  if (this->has_searchperiodcriteria()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *searchperiodcriteria_);
  }

  // int32 customerId = 2;
  if (this->customerid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->customerid());
  }

  // int32 requestSource = 4;
  if (this->requestsource() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->requestsource());
  }

  // bool passengerNationalityOrResidenceProvided = 6;
  if (this->passengernationalityorresidenceprovided() != 0) {
    total_size += 1 + 1;
  }

  // bool activeForRoomCategories = 13;
  if (this->activeforroomcategories() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Input::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dotw.proto.Input)
  GOOGLE_DCHECK_NE(&from, this);
  const Input* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Input>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dotw.proto.Input)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dotw.proto.Input)
    MergeFrom(*source);
  }
}

void Input::MergeFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dotw.proto.Input)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roomocupancy_.MergeFrom(from.roomocupancy_);
  if (from.psfilter().size() > 0) {
    set_psfilter(from.psfilter());
  }
  if (from.environment().size() > 0) {
    set_environment(from.environment());
  }
  if (from.exceptrestrictions().size() > 0) {
    set_exceptrestrictions(from.exceptrestrictions());
  }
  if (from.hotelids().size() > 0) {
    set_hotelids(from.hotelids());
  }
  if (from.city().size() > 0) {
    set_city(from.city());
  }
  if (from.country().size() > 0) {
    set_country(from.country());
  }
  if (from.bookingchannelswithautomapping().size() > 0) {
    set_bookingchannelswithautomapping(from.bookingchannelswithautomapping());
  }
  if (from.bookingchanneltypes().size() > 0) {
    set_bookingchanneltypes(from.bookingchanneltypes());
  }
  if (from.excludedbookingchannel().size() > 0) {
    set_excludedbookingchannel(from.excludedbookingchannel());
  }
  if (from.has_hotelfilters()) {
    mutable_hotelfilters()->::dotw::proto::Input_HotelFilters::MergeFrom(from.hotelfilters());
  }
  if (from.has_roomtypefilters()) {
    mutable_roomtypefilters()->::dotw::proto::Input_RoomTypeFilters::MergeFrom(from.roomtypefilters());
  }
  if (from.has_additionalfilters()) {
    mutable_additionalfilters()->::dotw::proto::Input_AdditionalFilters::MergeFrom(from.additionalfilters());
  }
  if (from.has_searchperiodcriteria()) {
    mutable_searchperiodcriteria()->::dotw::proto::Input_SearchPeriodCriteria::MergeFrom(from.searchperiodcriteria());
  }
  if (from.customerid() != 0) {
    set_customerid(from.customerid());
  }
  if (from.requestsource() != 0) {
    set_requestsource(from.requestsource());
  }
  if (from.passengernationalityorresidenceprovided() != 0) {
    set_passengernationalityorresidenceprovided(from.passengernationalityorresidenceprovided());
  }
  if (from.activeforroomcategories() != 0) {
    set_activeforroomcategories(from.activeforroomcategories());
  }
}

void Input::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dotw.proto.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Input::CopyFrom(const Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dotw.proto.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Input::IsInitialized() const {
  return true;
}

void Input::Swap(Input* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Input* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Input::UnsafeArenaSwap(Input* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Input::InternalSwap(Input* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&roomocupancy_)->InternalSwap(CastToBase(&other->roomocupancy_));
  psfilter_.Swap(&other->psfilter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  environment_.Swap(&other->environment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exceptrestrictions_.Swap(&other->exceptrestrictions_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hotelids_.Swap(&other->hotelids_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bookingchannelswithautomapping_.Swap(&other->bookingchannelswithautomapping_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bookingchanneltypes_.Swap(&other->bookingchanneltypes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  excludedbookingchannel_.Swap(&other->excludedbookingchannel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hotelfilters_, other->hotelfilters_);
  swap(roomtypefilters_, other->roomtypefilters_);
  swap(additionalfilters_, other->additionalfilters_);
  swap(searchperiodcriteria_, other->searchperiodcriteria_);
  swap(customerid_, other->customerid_);
  swap(requestsource_, other->requestsource_);
  swap(passengernationalityorresidenceprovided_, other->passengernationalityorresidenceprovided_);
  swap(activeforroomcategories_, other->activeforroomcategories_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Input::GetMetadata() const {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::assign_descriptors_table_dotw_5fInput_2eproto);
  return ::file_level_metadata_dotw_5fInput_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace dotw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_RoomCategory* Arena::CreateMaybeMessage< ::dotw::proto::Input_RoomCategory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_RoomCategory >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_RoomTypeFilters* Arena::CreateMaybeMessage< ::dotw::proto::Input_RoomTypeFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_RoomTypeFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_RoomOccupancy* Arena::CreateMaybeMessage< ::dotw::proto::Input_RoomOccupancy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_RoomOccupancy >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_HotelFilters* Arena::CreateMaybeMessage< ::dotw::proto::Input_HotelFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_HotelFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_AdditionalFilters* Arena::CreateMaybeMessage< ::dotw::proto::Input_AdditionalFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_AdditionalFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input_SearchPeriodCriteria* Arena::CreateMaybeMessage< ::dotw::proto::Input_SearchPeriodCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input_SearchPeriodCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::dotw::proto::Input* Arena::CreateMaybeMessage< ::dotw::proto::Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dotw::proto::Input >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
