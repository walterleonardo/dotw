// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dotw_Input.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dotw_5fInput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dotw_5fInput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dotw_5fInput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dotw_5fInput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
void AddDescriptors_dotw_5fInput_2eproto();
namespace dotw {
namespace proto {
class Input;
class InputDefaultTypeInternal;
extern InputDefaultTypeInternal _Input_default_instance_;
class Input_AdditionalFilters;
class Input_AdditionalFiltersDefaultTypeInternal;
extern Input_AdditionalFiltersDefaultTypeInternal _Input_AdditionalFilters_default_instance_;
class Input_HotelFilters;
class Input_HotelFiltersDefaultTypeInternal;
extern Input_HotelFiltersDefaultTypeInternal _Input_HotelFilters_default_instance_;
class Input_RoomCategory;
class Input_RoomCategoryDefaultTypeInternal;
extern Input_RoomCategoryDefaultTypeInternal _Input_RoomCategory_default_instance_;
class Input_RoomOccupancy;
class Input_RoomOccupancyDefaultTypeInternal;
extern Input_RoomOccupancyDefaultTypeInternal _Input_RoomOccupancy_default_instance_;
class Input_RoomTypeFilters;
class Input_RoomTypeFiltersDefaultTypeInternal;
extern Input_RoomTypeFiltersDefaultTypeInternal _Input_RoomTypeFilters_default_instance_;
class Input_SearchPeriodCriteria;
class Input_SearchPeriodCriteriaDefaultTypeInternal;
extern Input_SearchPeriodCriteriaDefaultTypeInternal _Input_SearchPeriodCriteria_default_instance_;
}  // namespace proto
}  // namespace dotw
PROTOBUF_NAMESPACE_OPEN
template<> ::dotw::proto::Input* Arena::CreateMaybeMessage<::dotw::proto::Input>(Arena*);
template<> ::dotw::proto::Input_AdditionalFilters* Arena::CreateMaybeMessage<::dotw::proto::Input_AdditionalFilters>(Arena*);
template<> ::dotw::proto::Input_HotelFilters* Arena::CreateMaybeMessage<::dotw::proto::Input_HotelFilters>(Arena*);
template<> ::dotw::proto::Input_RoomCategory* Arena::CreateMaybeMessage<::dotw::proto::Input_RoomCategory>(Arena*);
template<> ::dotw::proto::Input_RoomOccupancy* Arena::CreateMaybeMessage<::dotw::proto::Input_RoomOccupancy>(Arena*);
template<> ::dotw::proto::Input_RoomTypeFilters* Arena::CreateMaybeMessage<::dotw::proto::Input_RoomTypeFilters>(Arena*);
template<> ::dotw::proto::Input_SearchPeriodCriteria* Arena::CreateMaybeMessage<::dotw::proto::Input_SearchPeriodCriteria>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dotw {
namespace proto {

// ===================================================================

class Input_RoomCategory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.RoomCategory) */ {
 public:
  Input_RoomCategory();
  virtual ~Input_RoomCategory();

  Input_RoomCategory(const Input_RoomCategory& from);
  Input_RoomCategory(Input_RoomCategory&& from) noexcept
    : Input_RoomCategory() {
    *this = ::std::move(from);
  }

  inline Input_RoomCategory& operator=(const Input_RoomCategory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_RoomCategory& operator=(Input_RoomCategory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_RoomCategory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_RoomCategory* internal_default_instance() {
    return reinterpret_cast<const Input_RoomCategory*>(
               &_Input_RoomCategory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Input_RoomCategory* other);
  void Swap(Input_RoomCategory* other);
  friend void swap(Input_RoomCategory& a, Input_RoomCategory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_RoomCategory* New() const final {
    return CreateMaybeMessage<Input_RoomCategory>(nullptr);
  }

  Input_RoomCategory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_RoomCategory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_RoomCategory& from);
  void MergeFrom(const Input_RoomCategory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_RoomCategory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.RoomCategory";
  }
  protected:
  explicit Input_RoomCategory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 MainCategory = 1;
  void clear_maincategory();
  static const int kMainCategoryFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 maincategory() const;
  void set_maincategory(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 SubCategory = 2;
  void clear_subcategory();
  static const int kSubCategoryFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 subcategory() const;
  void set_subcategory(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 View = 3;
  void clear_view();
  static const int kViewFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 BeddingType = 4;
  void clear_beddingtype();
  static const int kBeddingTypeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 beddingtype() const;
  void set_beddingtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Attribute1 = 5;
  void clear_attribute1();
  static const int kAttribute1FieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute1() const;
  void set_attribute1(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 Attribute2 = 6;
  void clear_attribute2();
  static const int kAttribute2FieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute2() const;
  void set_attribute2(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.RoomCategory)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 maincategory_;
  ::PROTOBUF_NAMESPACE_ID::int32 subcategory_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_;
  ::PROTOBUF_NAMESPACE_ID::int32 beddingtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute1_;
  ::PROTOBUF_NAMESPACE_ID::int32 attribute2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input_RoomTypeFilters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.RoomTypeFilters) */ {
 public:
  Input_RoomTypeFilters();
  virtual ~Input_RoomTypeFilters();

  Input_RoomTypeFilters(const Input_RoomTypeFilters& from);
  Input_RoomTypeFilters(Input_RoomTypeFilters&& from) noexcept
    : Input_RoomTypeFilters() {
    *this = ::std::move(from);
  }

  inline Input_RoomTypeFilters& operator=(const Input_RoomTypeFilters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_RoomTypeFilters& operator=(Input_RoomTypeFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_RoomTypeFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_RoomTypeFilters* internal_default_instance() {
    return reinterpret_cast<const Input_RoomTypeFilters*>(
               &_Input_RoomTypeFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Input_RoomTypeFilters* other);
  void Swap(Input_RoomTypeFilters* other);
  friend void swap(Input_RoomTypeFilters& a, Input_RoomTypeFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_RoomTypeFilters* New() const final {
    return CreateMaybeMessage<Input_RoomTypeFilters>(nullptr);
  }

  Input_RoomTypeFilters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_RoomTypeFilters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_RoomTypeFilters& from);
  void MergeFrom(const Input_RoomTypeFilters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_RoomTypeFilters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.RoomTypeFilters";
  }
  protected:
  explicit Input_RoomTypeFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
  int roomcategories_size() const;
  void clear_roomcategories();
  static const int kRoomCategoriesFieldNumber = 5;
  ::dotw::proto::Input_RoomCategory* mutable_roomcategories(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomCategory >*
      mutable_roomcategories();
  const ::dotw::proto::Input_RoomCategory& roomcategories(int index) const;
  ::dotw::proto::Input_RoomCategory* add_roomcategories();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomCategory >&
      roomcategories() const;

  // string roomAmenitie = 2;
  void clear_roomamenitie();
  static const int kRoomAmenitieFieldNumber = 2;
  const std::string& roomamenitie() const;
  void set_roomamenitie(const std::string& value);
  void set_roomamenitie(std::string&& value);
  void set_roomamenitie(const char* value);
  void set_roomamenitie(const char* value, size_t size);
  std::string* mutable_roomamenitie();
  std::string* release_roomamenitie();
  void set_allocated_roomamenitie(std::string* roomamenitie);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomamenitie();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomamenitie(
      std::string* roomamenitie);

  // string roomId = 3;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 3;
  const std::string& roomid() const;
  void set_roomid(const std::string& value);
  void set_roomid(std::string&& value);
  void set_roomid(const char* value);
  void set_roomid(const char* value, size_t size);
  std::string* mutable_roomid();
  std::string* release_roomid();
  void set_allocated_roomid(std::string* roomid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomid(
      std::string* roomid);

  // string roomName = 4;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 4;
  const std::string& roomname() const;
  void set_roomname(const std::string& value);
  void set_roomname(std::string&& value);
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  std::string* mutable_roomname();
  std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_roomname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_roomname(
      std::string* roomname);

  // int32 suite = 1;
  void clear_suite();
  static const int kSuiteFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 suite() const;
  void set_suite(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.RoomTypeFilters)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomCategory > roomcategories_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomamenitie_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
  ::PROTOBUF_NAMESPACE_ID::int32 suite_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input_RoomOccupancy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.RoomOccupancy) */ {
 public:
  Input_RoomOccupancy();
  virtual ~Input_RoomOccupancy();

  Input_RoomOccupancy(const Input_RoomOccupancy& from);
  Input_RoomOccupancy(Input_RoomOccupancy&& from) noexcept
    : Input_RoomOccupancy() {
    *this = ::std::move(from);
  }

  inline Input_RoomOccupancy& operator=(const Input_RoomOccupancy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_RoomOccupancy& operator=(Input_RoomOccupancy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_RoomOccupancy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_RoomOccupancy* internal_default_instance() {
    return reinterpret_cast<const Input_RoomOccupancy*>(
               &_Input_RoomOccupancy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(Input_RoomOccupancy* other);
  void Swap(Input_RoomOccupancy* other);
  friend void swap(Input_RoomOccupancy& a, Input_RoomOccupancy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_RoomOccupancy* New() const final {
    return CreateMaybeMessage<Input_RoomOccupancy>(nullptr);
  }

  Input_RoomOccupancy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_RoomOccupancy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_RoomOccupancy& from);
  void MergeFrom(const Input_RoomOccupancy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_RoomOccupancy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.RoomOccupancy";
  }
  protected:
  explicit Input_RoomOccupancy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string children = 2;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  const std::string& children() const;
  void set_children(const std::string& value);
  void set_children(std::string&& value);
  void set_children(const char* value);
  void set_children(const char* value, size_t size);
  std::string* mutable_children();
  std::string* release_children();
  void set_allocated_children(std::string* children);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_children();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_children(
      std::string* children);

  // int32 adults = 1;
  void clear_adults();
  static const int kAdultsFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 adults() const;
  void set_adults(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool twin = 3;
  void clear_twin();
  static const int kTwinFieldNumber = 3;
  bool twin() const;
  void set_twin(bool value);

  // bool extraBed = 4;
  void clear_extrabed();
  static const int kExtraBedFieldNumber = 4;
  bool extrabed() const;
  void set_extrabed(bool value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.RoomOccupancy)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr children_;
  ::PROTOBUF_NAMESPACE_ID::int32 adults_;
  bool twin_;
  bool extrabed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input_HotelFilters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.HotelFilters) */ {
 public:
  Input_HotelFilters();
  virtual ~Input_HotelFilters();

  Input_HotelFilters(const Input_HotelFilters& from);
  Input_HotelFilters(Input_HotelFilters&& from) noexcept
    : Input_HotelFilters() {
    *this = ::std::move(from);
  }

  inline Input_HotelFilters& operator=(const Input_HotelFilters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_HotelFilters& operator=(Input_HotelFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_HotelFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_HotelFilters* internal_default_instance() {
    return reinterpret_cast<const Input_HotelFilters*>(
               &_Input_HotelFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Input_HotelFilters* other);
  void Swap(Input_HotelFilters* other);
  friend void swap(Input_HotelFilters& a, Input_HotelFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_HotelFilters* New() const final {
    return CreateMaybeMessage<Input_HotelFilters>(nullptr);
  }

  Input_HotelFilters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_HotelFilters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_HotelFilters& from);
  void MergeFrom(const Input_HotelFilters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_HotelFilters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.HotelFilters";
  }
  protected:
  explicit Input_HotelFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string rating = 1;
  void clear_rating();
  static const int kRatingFieldNumber = 1;
  const std::string& rating() const;
  void set_rating(const std::string& value);
  void set_rating(std::string&& value);
  void set_rating(const char* value);
  void set_rating(const char* value, size_t size);
  std::string* mutable_rating();
  std::string* release_rating();
  void set_allocated_rating(std::string* rating);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rating();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rating(
      std::string* rating);

  // string location = 3;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location(
      std::string* location);

  // string locationId = 4;
  void clear_locationid();
  static const int kLocationIdFieldNumber = 4;
  const std::string& locationid() const;
  void set_locationid(const std::string& value);
  void set_locationid(std::string&& value);
  void set_locationid(const char* value);
  void set_locationid(const char* value, size_t size);
  std::string* mutable_locationid();
  std::string* release_locationid();
  void set_allocated_locationid(std::string* locationid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_locationid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_locationid(
      std::string* locationid);

  // string amenitie = 5;
  void clear_amenitie();
  static const int kAmenitieFieldNumber = 5;
  const std::string& amenitie() const;
  void set_amenitie(const std::string& value);
  void set_amenitie(std::string&& value);
  void set_amenitie(const char* value);
  void set_amenitie(const char* value, size_t size);
  std::string* mutable_amenitie();
  std::string* release_amenitie();
  void set_allocated_amenitie(std::string* amenitie);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_amenitie();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_amenitie(
      std::string* amenitie);

  // string leisure = 6;
  void clear_leisure();
  static const int kLeisureFieldNumber = 6;
  const std::string& leisure() const;
  void set_leisure(const std::string& value);
  void set_leisure(std::string&& value);
  void set_leisure(const char* value);
  void set_leisure(const char* value, size_t size);
  std::string* mutable_leisure();
  std::string* release_leisure();
  void set_allocated_leisure(std::string* leisure);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_leisure();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_leisure(
      std::string* leisure);

  // string business = 7;
  void clear_business();
  static const int kBusinessFieldNumber = 7;
  const std::string& business() const;
  void set_business(const std::string& value);
  void set_business(std::string&& value);
  void set_business(const char* value);
  void set_business(const char* value, size_t size);
  std::string* mutable_business();
  std::string* release_business();
  void set_allocated_business(std::string* business);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_business();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_business(
      std::string* business);

  // string hotelPreference = 8;
  void clear_hotelpreference();
  static const int kHotelPreferenceFieldNumber = 8;
  const std::string& hotelpreference() const;
  void set_hotelpreference(const std::string& value);
  void set_hotelpreference(std::string&& value);
  void set_hotelpreference(const char* value);
  void set_hotelpreference(const char* value, size_t size);
  std::string* mutable_hotelpreference();
  std::string* release_hotelpreference();
  void set_allocated_hotelpreference(std::string* hotelpreference);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hotelpreference();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hotelpreference(
      std::string* hotelpreference);

  // string chain = 9;
  void clear_chain();
  static const int kChainFieldNumber = 9;
  const std::string& chain() const;
  void set_chain(const std::string& value);
  void set_chain(std::string&& value);
  void set_chain(const char* value);
  void set_chain(const char* value, size_t size);
  std::string* mutable_chain();
  std::string* release_chain();
  void set_allocated_chain(std::string* chain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_chain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_chain(
      std::string* chain);

  // string attraction = 10;
  void clear_attraction();
  static const int kAttractionFieldNumber = 10;
  const std::string& attraction() const;
  void set_attraction(const std::string& value);
  void set_attraction(std::string&& value);
  void set_attraction(const char* value);
  void set_attraction(const char* value, size_t size);
  std::string* mutable_attraction();
  std::string* release_attraction();
  void set_allocated_attraction(std::string* attraction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_attraction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_attraction(
      std::string* attraction);

  // string hotelName = 11;
  void clear_hotelname();
  static const int kHotelNameFieldNumber = 11;
  const std::string& hotelname() const;
  void set_hotelname(const std::string& value);
  void set_hotelname(std::string&& value);
  void set_hotelname(const char* value);
  void set_hotelname(const char* value, size_t size);
  std::string* mutable_hotelname();
  std::string* release_hotelname();
  void set_allocated_hotelname(std::string* hotelname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hotelname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hotelname(
      std::string* hotelname);

  // string lastUpdated = 17;
  void clear_lastupdated();
  static const int kLastUpdatedFieldNumber = 17;
  const std::string& lastupdated() const;
  void set_lastupdated(const std::string& value);
  void set_lastupdated(std::string&& value);
  void set_lastupdated(const char* value);
  void set_lastupdated(const char* value, size_t size);
  std::string* mutable_lastupdated();
  std::string* release_lastupdated();
  void set_allocated_lastupdated(std::string* lastupdated);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lastupdated();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lastupdated(
      std::string* lastupdated);

  // int32 luxury = 2;
  void clear_luxury();
  static const int kLuxuryFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 luxury() const;
  void set_luxury(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 builtYear = 12;
  void clear_builtyear();
  static const int kBuiltYearFieldNumber = 12;
  ::PROTOBUF_NAMESPACE_ID::int32 builtyear() const;
  void set_builtyear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 renovationYear = 13;
  void clear_renovationyear();
  static const int kRenovationYearFieldNumber = 13;
  ::PROTOBUF_NAMESPACE_ID::int32 renovationyear() const;
  void set_renovationyear(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 floors = 14;
  void clear_floors();
  static const int kFloorsFieldNumber = 14;
  ::PROTOBUF_NAMESPACE_ID::int32 floors() const;
  void set_floors(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 noOfRooms = 15;
  void clear_noofrooms();
  static const int kNoOfRoomsFieldNumber = 15;
  ::PROTOBUF_NAMESPACE_ID::int32 noofrooms() const;
  void set_noofrooms(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 fireSafety = 16;
  void clear_firesafety();
  static const int kFireSafetyFieldNumber = 16;
  ::PROTOBUF_NAMESPACE_ID::int32 firesafety() const;
  void set_firesafety(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.HotelFilters)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rating_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amenitie_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leisure_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr business_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotelpreference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attraction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotelname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastupdated_;
  ::PROTOBUF_NAMESPACE_ID::int32 luxury_;
  ::PROTOBUF_NAMESPACE_ID::int32 builtyear_;
  ::PROTOBUF_NAMESPACE_ID::int32 renovationyear_;
  ::PROTOBUF_NAMESPACE_ID::int32 floors_;
  ::PROTOBUF_NAMESPACE_ID::int32 noofrooms_;
  ::PROTOBUF_NAMESPACE_ID::int32 firesafety_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input_AdditionalFilters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.AdditionalFilters) */ {
 public:
  Input_AdditionalFilters();
  virtual ~Input_AdditionalFilters();

  Input_AdditionalFilters(const Input_AdditionalFilters& from);
  Input_AdditionalFilters(Input_AdditionalFilters&& from) noexcept
    : Input_AdditionalFilters() {
    *this = ::std::move(from);
  }

  inline Input_AdditionalFilters& operator=(const Input_AdditionalFilters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_AdditionalFilters& operator=(Input_AdditionalFilters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_AdditionalFilters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_AdditionalFilters* internal_default_instance() {
    return reinterpret_cast<const Input_AdditionalFilters*>(
               &_Input_AdditionalFilters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Input_AdditionalFilters* other);
  void Swap(Input_AdditionalFilters* other);
  friend void swap(Input_AdditionalFilters& a, Input_AdditionalFilters& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_AdditionalFilters* New() const final {
    return CreateMaybeMessage<Input_AdditionalFilters>(nullptr);
  }

  Input_AdditionalFilters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_AdditionalFilters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_AdditionalFilters& from);
  void MergeFrom(const Input_AdditionalFilters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_AdditionalFilters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.AdditionalFilters";
  }
  protected:
  explicit Input_AdditionalFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.AdditionalFilters)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input_SearchPeriodCriteria :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input.SearchPeriodCriteria) */ {
 public:
  Input_SearchPeriodCriteria();
  virtual ~Input_SearchPeriodCriteria();

  Input_SearchPeriodCriteria(const Input_SearchPeriodCriteria& from);
  Input_SearchPeriodCriteria(Input_SearchPeriodCriteria&& from) noexcept
    : Input_SearchPeriodCriteria() {
    *this = ::std::move(from);
  }

  inline Input_SearchPeriodCriteria& operator=(const Input_SearchPeriodCriteria& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input_SearchPeriodCriteria& operator=(Input_SearchPeriodCriteria&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input_SearchPeriodCriteria& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input_SearchPeriodCriteria* internal_default_instance() {
    return reinterpret_cast<const Input_SearchPeriodCriteria*>(
               &_Input_SearchPeriodCriteria_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Input_SearchPeriodCriteria* other);
  void Swap(Input_SearchPeriodCriteria* other);
  friend void swap(Input_SearchPeriodCriteria& a, Input_SearchPeriodCriteria& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input_SearchPeriodCriteria* New() const final {
    return CreateMaybeMessage<Input_SearchPeriodCriteria>(nullptr);
  }

  Input_SearchPeriodCriteria* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input_SearchPeriodCriteria>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input_SearchPeriodCriteria& from);
  void MergeFrom(const Input_SearchPeriodCriteria& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input_SearchPeriodCriteria* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input.SearchPeriodCriteria";
  }
  protected:
  explicit Input_SearchPeriodCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 travelFrom = 1;
  void clear_travelfrom();
  static const int kTravelFromFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 travelfrom() const;
  void set_travelfrom(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 travelTo = 2;
  void clear_travelto();
  static const int kTravelToFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 travelto() const;
  void set_travelto(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 bookingDateTime = 3;
  void clear_bookingdatetime();
  static const int kBookingDateTimeFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 bookingdatetime() const;
  void set_bookingdatetime(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input.SearchPeriodCriteria)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 travelfrom_;
  ::PROTOBUF_NAMESPACE_ID::int32 travelto_;
  ::PROTOBUF_NAMESPACE_ID::int32 bookingdatetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// -------------------------------------------------------------------

class Input :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dotw.proto.Input) */ {
 public:
  Input();
  virtual ~Input();

  Input(const Input& from);
  Input(Input&& from) noexcept
    : Input() {
    *this = ::std::move(from);
  }

  inline Input& operator=(const Input& from) {
    CopyFrom(from);
    return *this;
  }
  inline Input& operator=(Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Input* internal_default_instance() {
    return reinterpret_cast<const Input*>(
               &_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Input* other);
  void Swap(Input* other);
  friend void swap(Input& a, Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Input* New() const final {
    return CreateMaybeMessage<Input>(nullptr);
  }

  Input* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Input>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Input& from);
  void MergeFrom(const Input& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Input* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dotw.proto.Input";
  }
  protected:
  explicit Input(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Input_RoomCategory RoomCategory;
  typedef Input_RoomTypeFilters RoomTypeFilters;
  typedef Input_RoomOccupancy RoomOccupancy;
  typedef Input_HotelFilters HotelFilters;
  typedef Input_AdditionalFilters AdditionalFilters;
  typedef Input_SearchPeriodCriteria SearchPeriodCriteria;

  // accessors -------------------------------------------------------

  // repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
  int roomocupancy_size() const;
  void clear_roomocupancy();
  static const int kRoomOcupancyFieldNumber = 14;
  ::dotw::proto::Input_RoomOccupancy* mutable_roomocupancy(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomOccupancy >*
      mutable_roomocupancy();
  const ::dotw::proto::Input_RoomOccupancy& roomocupancy(int index) const;
  ::dotw::proto::Input_RoomOccupancy* add_roomocupancy();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomOccupancy >&
      roomocupancy() const;

  // string psfilter = 1;
  void clear_psfilter();
  static const int kPsfilterFieldNumber = 1;
  const std::string& psfilter() const;
  void set_psfilter(const std::string& value);
  void set_psfilter(std::string&& value);
  void set_psfilter(const char* value);
  void set_psfilter(const char* value, size_t size);
  std::string* mutable_psfilter();
  std::string* release_psfilter();
  void set_allocated_psfilter(std::string* psfilter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_psfilter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_psfilter(
      std::string* psfilter);

  // string environment = 3;
  void clear_environment();
  static const int kEnvironmentFieldNumber = 3;
  const std::string& environment() const;
  void set_environment(const std::string& value);
  void set_environment(std::string&& value);
  void set_environment(const char* value);
  void set_environment(const char* value, size_t size);
  std::string* mutable_environment();
  std::string* release_environment();
  void set_allocated_environment(std::string* environment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_environment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_environment(
      std::string* environment);

  // string exceptRestrictions = 5;
  void clear_exceptrestrictions();
  static const int kExceptRestrictionsFieldNumber = 5;
  const std::string& exceptrestrictions() const;
  void set_exceptrestrictions(const std::string& value);
  void set_exceptrestrictions(std::string&& value);
  void set_exceptrestrictions(const char* value);
  void set_exceptrestrictions(const char* value, size_t size);
  std::string* mutable_exceptrestrictions();
  std::string* release_exceptrestrictions();
  void set_allocated_exceptrestrictions(std::string* exceptrestrictions);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exceptrestrictions();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exceptrestrictions(
      std::string* exceptrestrictions);

  // string hotelIds = 7;
  void clear_hotelids();
  static const int kHotelIdsFieldNumber = 7;
  const std::string& hotelids() const;
  void set_hotelids(const std::string& value);
  void set_hotelids(std::string&& value);
  void set_hotelids(const char* value);
  void set_hotelids(const char* value, size_t size);
  std::string* mutable_hotelids();
  std::string* release_hotelids();
  void set_allocated_hotelids(std::string* hotelids);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hotelids();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hotelids(
      std::string* hotelids);

  // string city = 8;
  void clear_city();
  static const int kCityFieldNumber = 8;
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);

  // string country = 9;
  void clear_country();
  static const int kCountryFieldNumber = 9;
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);

  // string bookingChannelsWithAutoMapping = 10;
  void clear_bookingchannelswithautomapping();
  static const int kBookingChannelsWithAutoMappingFieldNumber = 10;
  const std::string& bookingchannelswithautomapping() const;
  void set_bookingchannelswithautomapping(const std::string& value);
  void set_bookingchannelswithautomapping(std::string&& value);
  void set_bookingchannelswithautomapping(const char* value);
  void set_bookingchannelswithautomapping(const char* value, size_t size);
  std::string* mutable_bookingchannelswithautomapping();
  std::string* release_bookingchannelswithautomapping();
  void set_allocated_bookingchannelswithautomapping(std::string* bookingchannelswithautomapping);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bookingchannelswithautomapping();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bookingchannelswithautomapping(
      std::string* bookingchannelswithautomapping);

  // string bookingChannelTypes = 11;
  void clear_bookingchanneltypes();
  static const int kBookingChannelTypesFieldNumber = 11;
  const std::string& bookingchanneltypes() const;
  void set_bookingchanneltypes(const std::string& value);
  void set_bookingchanneltypes(std::string&& value);
  void set_bookingchanneltypes(const char* value);
  void set_bookingchanneltypes(const char* value, size_t size);
  std::string* mutable_bookingchanneltypes();
  std::string* release_bookingchanneltypes();
  void set_allocated_bookingchanneltypes(std::string* bookingchanneltypes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bookingchanneltypes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bookingchanneltypes(
      std::string* bookingchanneltypes);

  // string excludedBookingchannel = 12;
  void clear_excludedbookingchannel();
  static const int kExcludedBookingchannelFieldNumber = 12;
  const std::string& excludedbookingchannel() const;
  void set_excludedbookingchannel(const std::string& value);
  void set_excludedbookingchannel(std::string&& value);
  void set_excludedbookingchannel(const char* value);
  void set_excludedbookingchannel(const char* value, size_t size);
  std::string* mutable_excludedbookingchannel();
  std::string* release_excludedbookingchannel();
  void set_allocated_excludedbookingchannel(std::string* excludedbookingchannel);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_excludedbookingchannel();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_excludedbookingchannel(
      std::string* excludedbookingchannel);

  // .dotw.proto.Input.HotelFilters hotelFilters = 15;
  bool has_hotelfilters() const;
  void clear_hotelfilters();
  static const int kHotelFiltersFieldNumber = 15;
  const ::dotw::proto::Input_HotelFilters& hotelfilters() const;
  ::dotw::proto::Input_HotelFilters* release_hotelfilters();
  ::dotw::proto::Input_HotelFilters* mutable_hotelfilters();
  void set_allocated_hotelfilters(::dotw::proto::Input_HotelFilters* hotelfilters);
  void unsafe_arena_set_allocated_hotelfilters(
      ::dotw::proto::Input_HotelFilters* hotelfilters);
  ::dotw::proto::Input_HotelFilters* unsafe_arena_release_hotelfilters();

  // .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
  bool has_roomtypefilters() const;
  void clear_roomtypefilters();
  static const int kRoomTypeFiltersFieldNumber = 16;
  const ::dotw::proto::Input_RoomTypeFilters& roomtypefilters() const;
  ::dotw::proto::Input_RoomTypeFilters* release_roomtypefilters();
  ::dotw::proto::Input_RoomTypeFilters* mutable_roomtypefilters();
  void set_allocated_roomtypefilters(::dotw::proto::Input_RoomTypeFilters* roomtypefilters);
  void unsafe_arena_set_allocated_roomtypefilters(
      ::dotw::proto::Input_RoomTypeFilters* roomtypefilters);
  ::dotw::proto::Input_RoomTypeFilters* unsafe_arena_release_roomtypefilters();

  // .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
  bool has_additionalfilters() const;
  void clear_additionalfilters();
  static const int kAdditionalFiltersFieldNumber = 17;
  const ::dotw::proto::Input_AdditionalFilters& additionalfilters() const;
  ::dotw::proto::Input_AdditionalFilters* release_additionalfilters();
  ::dotw::proto::Input_AdditionalFilters* mutable_additionalfilters();
  void set_allocated_additionalfilters(::dotw::proto::Input_AdditionalFilters* additionalfilters);
  void unsafe_arena_set_allocated_additionalfilters(
      ::dotw::proto::Input_AdditionalFilters* additionalfilters);
  ::dotw::proto::Input_AdditionalFilters* unsafe_arena_release_additionalfilters();

  // .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
  bool has_searchperiodcriteria() const;
  void clear_searchperiodcriteria();
  static const int kSearchPeriodCriteriaFieldNumber = 18;
  const ::dotw::proto::Input_SearchPeriodCriteria& searchperiodcriteria() const;
  ::dotw::proto::Input_SearchPeriodCriteria* release_searchperiodcriteria();
  ::dotw::proto::Input_SearchPeriodCriteria* mutable_searchperiodcriteria();
  void set_allocated_searchperiodcriteria(::dotw::proto::Input_SearchPeriodCriteria* searchperiodcriteria);
  void unsafe_arena_set_allocated_searchperiodcriteria(
      ::dotw::proto::Input_SearchPeriodCriteria* searchperiodcriteria);
  ::dotw::proto::Input_SearchPeriodCriteria* unsafe_arena_release_searchperiodcriteria();

  // int32 customerId = 2;
  void clear_customerid();
  static const int kCustomerIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 customerid() const;
  void set_customerid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 requestSource = 4;
  void clear_requestsource();
  static const int kRequestSourceFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int32 requestsource() const;
  void set_requestsource(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool passengerNationalityOrResidenceProvided = 6;
  void clear_passengernationalityorresidenceprovided();
  static const int kPassengerNationalityOrResidenceProvidedFieldNumber = 6;
  bool passengernationalityorresidenceprovided() const;
  void set_passengernationalityorresidenceprovided(bool value);

  // bool activeForRoomCategories = 13;
  void clear_activeforroomcategories();
  static const int kActiveForRoomCategoriesFieldNumber = 13;
  bool activeforroomcategories() const;
  void set_activeforroomcategories(bool value);

  // @@protoc_insertion_point(class_scope:dotw.proto.Input)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomOccupancy > roomocupancy_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psfilter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exceptrestrictions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotelids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookingchannelswithautomapping_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bookingchanneltypes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr excludedbookingchannel_;
  ::dotw::proto::Input_HotelFilters* hotelfilters_;
  ::dotw::proto::Input_RoomTypeFilters* roomtypefilters_;
  ::dotw::proto::Input_AdditionalFilters* additionalfilters_;
  ::dotw::proto::Input_SearchPeriodCriteria* searchperiodcriteria_;
  ::PROTOBUF_NAMESPACE_ID::int32 customerid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestsource_;
  bool passengernationalityorresidenceprovided_;
  bool activeforroomcategories_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dotw_5fInput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Input_RoomCategory

// int32 MainCategory = 1;
inline void Input_RoomCategory::clear_maincategory() {
  maincategory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::maincategory() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.MainCategory)
  return maincategory_;
}
inline void Input_RoomCategory::set_maincategory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maincategory_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.MainCategory)
}

// int32 SubCategory = 2;
inline void Input_RoomCategory::clear_subcategory() {
  subcategory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::subcategory() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.SubCategory)
  return subcategory_;
}
inline void Input_RoomCategory::set_subcategory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subcategory_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.SubCategory)
}

// int32 View = 3;
inline void Input_RoomCategory::clear_view() {
  view_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::view() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.View)
  return view_;
}
inline void Input_RoomCategory::set_view(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.View)
}

// int32 BeddingType = 4;
inline void Input_RoomCategory::clear_beddingtype() {
  beddingtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::beddingtype() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.BeddingType)
  return beddingtype_;
}
inline void Input_RoomCategory::set_beddingtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  beddingtype_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.BeddingType)
}

// int32 Attribute1 = 5;
inline void Input_RoomCategory::clear_attribute1() {
  attribute1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::attribute1() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.Attribute1)
  return attribute1_;
}
inline void Input_RoomCategory::set_attribute1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attribute1_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.Attribute1)
}

// int32 Attribute2 = 6;
inline void Input_RoomCategory::clear_attribute2() {
  attribute2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomCategory::attribute2() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomCategory.Attribute2)
  return attribute2_;
}
inline void Input_RoomCategory::set_attribute2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attribute2_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomCategory.Attribute2)
}

// -------------------------------------------------------------------

// Input_RoomTypeFilters

// int32 suite = 1;
inline void Input_RoomTypeFilters::clear_suite() {
  suite_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomTypeFilters::suite() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomTypeFilters.suite)
  return suite_;
}
inline void Input_RoomTypeFilters::set_suite(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  suite_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomTypeFilters.suite)
}

// string roomAmenitie = 2;
inline void Input_RoomTypeFilters::clear_roomamenitie() {
  roomamenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_RoomTypeFilters::roomamenitie() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
  return roomamenitie_.Get();
}
inline void Input_RoomTypeFilters::set_roomamenitie(const std::string& value) {
  
  roomamenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}
inline void Input_RoomTypeFilters::set_roomamenitie(std::string&& value) {
  
  roomamenitie_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}
inline void Input_RoomTypeFilters::set_roomamenitie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomamenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}
inline void Input_RoomTypeFilters::set_roomamenitie(const char* value,
    size_t size) {
  
  roomamenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}
inline std::string* Input_RoomTypeFilters::mutable_roomamenitie() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
  return roomamenitie_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_RoomTypeFilters::release_roomamenitie() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
  
  return roomamenitie_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::set_allocated_roomamenitie(std::string* roomamenitie) {
  if (roomamenitie != nullptr) {
    
  } else {
    
  }
  roomamenitie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomamenitie,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}
inline std::string* Input_RoomTypeFilters::unsafe_arena_release_roomamenitie() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return roomamenitie_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::unsafe_arena_set_allocated_roomamenitie(
    std::string* roomamenitie) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (roomamenitie != nullptr) {
    
  } else {
    
  }
  roomamenitie_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomamenitie, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.RoomTypeFilters.roomAmenitie)
}

// string roomId = 3;
inline void Input_RoomTypeFilters::clear_roomid() {
  roomid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_RoomTypeFilters::roomid() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomTypeFilters.roomId)
  return roomid_.Get();
}
inline void Input_RoomTypeFilters::set_roomid(const std::string& value) {
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomTypeFilters.roomId)
}
inline void Input_RoomTypeFilters::set_roomid(std::string&& value) {
  
  roomid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.RoomTypeFilters.roomId)
}
inline void Input_RoomTypeFilters::set_roomid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.RoomTypeFilters.roomId)
}
inline void Input_RoomTypeFilters::set_roomid(const char* value,
    size_t size) {
  
  roomid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.RoomTypeFilters.roomId)
}
inline std::string* Input_RoomTypeFilters::mutable_roomid() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.RoomTypeFilters.roomId)
  return roomid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_RoomTypeFilters::release_roomid() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.RoomTypeFilters.roomId)
  
  return roomid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::set_allocated_roomid(std::string* roomid) {
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.RoomTypeFilters.roomId)
}
inline std::string* Input_RoomTypeFilters::unsafe_arena_release_roomid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.RoomTypeFilters.roomId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return roomid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::unsafe_arena_set_allocated_roomid(
    std::string* roomid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (roomid != nullptr) {
    
  } else {
    
  }
  roomid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.RoomTypeFilters.roomId)
}

// string roomName = 4;
inline void Input_RoomTypeFilters::clear_roomname() {
  roomname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_RoomTypeFilters::roomname() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomTypeFilters.roomName)
  return roomname_.Get();
}
inline void Input_RoomTypeFilters::set_roomname(const std::string& value) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomTypeFilters.roomName)
}
inline void Input_RoomTypeFilters::set_roomname(std::string&& value) {
  
  roomname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.RoomTypeFilters.roomName)
}
inline void Input_RoomTypeFilters::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.RoomTypeFilters.roomName)
}
inline void Input_RoomTypeFilters::set_roomname(const char* value,
    size_t size) {
  
  roomname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.RoomTypeFilters.roomName)
}
inline std::string* Input_RoomTypeFilters::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.RoomTypeFilters.roomName)
  return roomname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_RoomTypeFilters::release_roomname() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.RoomTypeFilters.roomName)
  
  return roomname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roomname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.RoomTypeFilters.roomName)
}
inline std::string* Input_RoomTypeFilters::unsafe_arena_release_roomname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.RoomTypeFilters.roomName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return roomname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_RoomTypeFilters::unsafe_arena_set_allocated_roomname(
    std::string* roomname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (roomname != nullptr) {
    
  } else {
    
  }
  roomname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      roomname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.RoomTypeFilters.roomName)
}

// repeated .dotw.proto.Input.RoomCategory roomCategories = 5;
inline int Input_RoomTypeFilters::roomcategories_size() const {
  return roomcategories_.size();
}
inline void Input_RoomTypeFilters::clear_roomcategories() {
  roomcategories_.Clear();
}
inline ::dotw::proto::Input_RoomCategory* Input_RoomTypeFilters::mutable_roomcategories(int index) {
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.RoomTypeFilters.roomCategories)
  return roomcategories_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomCategory >*
Input_RoomTypeFilters::mutable_roomcategories() {
  // @@protoc_insertion_point(field_mutable_list:dotw.proto.Input.RoomTypeFilters.roomCategories)
  return &roomcategories_;
}
inline const ::dotw::proto::Input_RoomCategory& Input_RoomTypeFilters::roomcategories(int index) const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomTypeFilters.roomCategories)
  return roomcategories_.Get(index);
}
inline ::dotw::proto::Input_RoomCategory* Input_RoomTypeFilters::add_roomcategories() {
  // @@protoc_insertion_point(field_add:dotw.proto.Input.RoomTypeFilters.roomCategories)
  return roomcategories_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomCategory >&
Input_RoomTypeFilters::roomcategories() const {
  // @@protoc_insertion_point(field_list:dotw.proto.Input.RoomTypeFilters.roomCategories)
  return roomcategories_;
}

// -------------------------------------------------------------------

// Input_RoomOccupancy

// int32 adults = 1;
inline void Input_RoomOccupancy::clear_adults() {
  adults_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_RoomOccupancy::adults() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomOccupancy.adults)
  return adults_;
}
inline void Input_RoomOccupancy::set_adults(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  adults_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomOccupancy.adults)
}

// string children = 2;
inline void Input_RoomOccupancy::clear_children() {
  children_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_RoomOccupancy::children() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomOccupancy.children)
  return children_.Get();
}
inline void Input_RoomOccupancy::set_children(const std::string& value) {
  
  children_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomOccupancy.children)
}
inline void Input_RoomOccupancy::set_children(std::string&& value) {
  
  children_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.RoomOccupancy.children)
}
inline void Input_RoomOccupancy::set_children(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  children_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.RoomOccupancy.children)
}
inline void Input_RoomOccupancy::set_children(const char* value,
    size_t size) {
  
  children_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.RoomOccupancy.children)
}
inline std::string* Input_RoomOccupancy::mutable_children() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.RoomOccupancy.children)
  return children_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_RoomOccupancy::release_children() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.RoomOccupancy.children)
  
  return children_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_RoomOccupancy::set_allocated_children(std::string* children) {
  if (children != nullptr) {
    
  } else {
    
  }
  children_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), children,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.RoomOccupancy.children)
}
inline std::string* Input_RoomOccupancy::unsafe_arena_release_children() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.RoomOccupancy.children)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return children_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_RoomOccupancy::unsafe_arena_set_allocated_children(
    std::string* children) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (children != nullptr) {
    
  } else {
    
  }
  children_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      children, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.RoomOccupancy.children)
}

// bool twin = 3;
inline void Input_RoomOccupancy::clear_twin() {
  twin_ = false;
}
inline bool Input_RoomOccupancy::twin() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomOccupancy.twin)
  return twin_;
}
inline void Input_RoomOccupancy::set_twin(bool value) {
  
  twin_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomOccupancy.twin)
}

// bool extraBed = 4;
inline void Input_RoomOccupancy::clear_extrabed() {
  extrabed_ = false;
}
inline bool Input_RoomOccupancy::extrabed() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.RoomOccupancy.extraBed)
  return extrabed_;
}
inline void Input_RoomOccupancy::set_extrabed(bool value) {
  
  extrabed_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.RoomOccupancy.extraBed)
}

// -------------------------------------------------------------------

// Input_HotelFilters

// string rating = 1;
inline void Input_HotelFilters::clear_rating() {
  rating_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::rating() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.rating)
  return rating_.Get();
}
inline void Input_HotelFilters::set_rating(const std::string& value) {
  
  rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.rating)
}
inline void Input_HotelFilters::set_rating(std::string&& value) {
  
  rating_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.rating)
}
inline void Input_HotelFilters::set_rating(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.rating)
}
inline void Input_HotelFilters::set_rating(const char* value,
    size_t size) {
  
  rating_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.rating)
}
inline std::string* Input_HotelFilters::mutable_rating() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.rating)
  return rating_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_rating() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.rating)
  
  return rating_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_rating(std::string* rating) {
  if (rating != nullptr) {
    
  } else {
    
  }
  rating_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rating,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.rating)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_rating() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.rating)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return rating_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_rating(
    std::string* rating) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (rating != nullptr) {
    
  } else {
    
  }
  rating_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rating, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.rating)
}

// int32 luxury = 2;
inline void Input_HotelFilters::clear_luxury() {
  luxury_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::luxury() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.luxury)
  return luxury_;
}
inline void Input_HotelFilters::set_luxury(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luxury_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.luxury)
}

// string location = 3;
inline void Input_HotelFilters::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::location() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.location)
  return location_.Get();
}
inline void Input_HotelFilters::set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.location)
}
inline void Input_HotelFilters::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.location)
}
inline void Input_HotelFilters::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.location)
}
inline void Input_HotelFilters::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.location)
}
inline std::string* Input_HotelFilters::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.location)
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_location() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.location)
  
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.location)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_location(
    std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (location != nullptr) {
    
  } else {
    
  }
  location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.location)
}

// string locationId = 4;
inline void Input_HotelFilters::clear_locationid() {
  locationid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::locationid() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.locationId)
  return locationid_.Get();
}
inline void Input_HotelFilters::set_locationid(const std::string& value) {
  
  locationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.locationId)
}
inline void Input_HotelFilters::set_locationid(std::string&& value) {
  
  locationid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.locationId)
}
inline void Input_HotelFilters::set_locationid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.locationId)
}
inline void Input_HotelFilters::set_locationid(const char* value,
    size_t size) {
  
  locationid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.locationId)
}
inline std::string* Input_HotelFilters::mutable_locationid() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.locationId)
  return locationid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_locationid() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.locationId)
  
  return locationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_locationid(std::string* locationid) {
  if (locationid != nullptr) {
    
  } else {
    
  }
  locationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locationid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.locationId)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_locationid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.locationId)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return locationid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_locationid(
    std::string* locationid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (locationid != nullptr) {
    
  } else {
    
  }
  locationid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      locationid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.locationId)
}

// string amenitie = 5;
inline void Input_HotelFilters::clear_amenitie() {
  amenitie_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::amenitie() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.amenitie)
  return amenitie_.Get();
}
inline void Input_HotelFilters::set_amenitie(const std::string& value) {
  
  amenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.amenitie)
}
inline void Input_HotelFilters::set_amenitie(std::string&& value) {
  
  amenitie_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.amenitie)
}
inline void Input_HotelFilters::set_amenitie(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.amenitie)
}
inline void Input_HotelFilters::set_amenitie(const char* value,
    size_t size) {
  
  amenitie_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.amenitie)
}
inline std::string* Input_HotelFilters::mutable_amenitie() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.amenitie)
  return amenitie_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_amenitie() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.amenitie)
  
  return amenitie_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_amenitie(std::string* amenitie) {
  if (amenitie != nullptr) {
    
  } else {
    
  }
  amenitie_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amenitie,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.amenitie)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_amenitie() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.amenitie)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return amenitie_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_amenitie(
    std::string* amenitie) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (amenitie != nullptr) {
    
  } else {
    
  }
  amenitie_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      amenitie, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.amenitie)
}

// string leisure = 6;
inline void Input_HotelFilters::clear_leisure() {
  leisure_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::leisure() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.leisure)
  return leisure_.Get();
}
inline void Input_HotelFilters::set_leisure(const std::string& value) {
  
  leisure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.leisure)
}
inline void Input_HotelFilters::set_leisure(std::string&& value) {
  
  leisure_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.leisure)
}
inline void Input_HotelFilters::set_leisure(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  leisure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.leisure)
}
inline void Input_HotelFilters::set_leisure(const char* value,
    size_t size) {
  
  leisure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.leisure)
}
inline std::string* Input_HotelFilters::mutable_leisure() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.leisure)
  return leisure_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_leisure() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.leisure)
  
  return leisure_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_leisure(std::string* leisure) {
  if (leisure != nullptr) {
    
  } else {
    
  }
  leisure_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leisure,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.leisure)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_leisure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.leisure)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return leisure_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_leisure(
    std::string* leisure) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (leisure != nullptr) {
    
  } else {
    
  }
  leisure_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      leisure, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.leisure)
}

// string business = 7;
inline void Input_HotelFilters::clear_business() {
  business_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::business() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.business)
  return business_.Get();
}
inline void Input_HotelFilters::set_business(const std::string& value) {
  
  business_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.business)
}
inline void Input_HotelFilters::set_business(std::string&& value) {
  
  business_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.business)
}
inline void Input_HotelFilters::set_business(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  business_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.business)
}
inline void Input_HotelFilters::set_business(const char* value,
    size_t size) {
  
  business_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.business)
}
inline std::string* Input_HotelFilters::mutable_business() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.business)
  return business_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_business() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.business)
  
  return business_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_business(std::string* business) {
  if (business != nullptr) {
    
  } else {
    
  }
  business_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), business,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.business)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_business() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.business)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return business_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_business(
    std::string* business) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (business != nullptr) {
    
  } else {
    
  }
  business_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      business, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.business)
}

// string hotelPreference = 8;
inline void Input_HotelFilters::clear_hotelpreference() {
  hotelpreference_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::hotelpreference() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.hotelPreference)
  return hotelpreference_.Get();
}
inline void Input_HotelFilters::set_hotelpreference(const std::string& value) {
  
  hotelpreference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.hotelPreference)
}
inline void Input_HotelFilters::set_hotelpreference(std::string&& value) {
  
  hotelpreference_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.hotelPreference)
}
inline void Input_HotelFilters::set_hotelpreference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotelpreference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.hotelPreference)
}
inline void Input_HotelFilters::set_hotelpreference(const char* value,
    size_t size) {
  
  hotelpreference_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.hotelPreference)
}
inline std::string* Input_HotelFilters::mutable_hotelpreference() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.hotelPreference)
  return hotelpreference_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_hotelpreference() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.hotelPreference)
  
  return hotelpreference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_hotelpreference(std::string* hotelpreference) {
  if (hotelpreference != nullptr) {
    
  } else {
    
  }
  hotelpreference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotelpreference,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.hotelPreference)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_hotelpreference() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.hotelPreference)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hotelpreference_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_hotelpreference(
    std::string* hotelpreference) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hotelpreference != nullptr) {
    
  } else {
    
  }
  hotelpreference_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hotelpreference, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.hotelPreference)
}

// string chain = 9;
inline void Input_HotelFilters::clear_chain() {
  chain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::chain() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.chain)
  return chain_.Get();
}
inline void Input_HotelFilters::set_chain(const std::string& value) {
  
  chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.chain)
}
inline void Input_HotelFilters::set_chain(std::string&& value) {
  
  chain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.chain)
}
inline void Input_HotelFilters::set_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.chain)
}
inline void Input_HotelFilters::set_chain(const char* value,
    size_t size) {
  
  chain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.chain)
}
inline std::string* Input_HotelFilters::mutable_chain() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.chain)
  return chain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_chain() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.chain)
  
  return chain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_chain(std::string* chain) {
  if (chain != nullptr) {
    
  } else {
    
  }
  chain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.chain)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_chain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.chain)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return chain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_chain(
    std::string* chain) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (chain != nullptr) {
    
  } else {
    
  }
  chain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      chain, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.chain)
}

// string attraction = 10;
inline void Input_HotelFilters::clear_attraction() {
  attraction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::attraction() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.attraction)
  return attraction_.Get();
}
inline void Input_HotelFilters::set_attraction(const std::string& value) {
  
  attraction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.attraction)
}
inline void Input_HotelFilters::set_attraction(std::string&& value) {
  
  attraction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.attraction)
}
inline void Input_HotelFilters::set_attraction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attraction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.attraction)
}
inline void Input_HotelFilters::set_attraction(const char* value,
    size_t size) {
  
  attraction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.attraction)
}
inline std::string* Input_HotelFilters::mutable_attraction() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.attraction)
  return attraction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_attraction() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.attraction)
  
  return attraction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_attraction(std::string* attraction) {
  if (attraction != nullptr) {
    
  } else {
    
  }
  attraction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attraction,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.attraction)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_attraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.attraction)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return attraction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_attraction(
    std::string* attraction) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (attraction != nullptr) {
    
  } else {
    
  }
  attraction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      attraction, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.attraction)
}

// string hotelName = 11;
inline void Input_HotelFilters::clear_hotelname() {
  hotelname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::hotelname() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.hotelName)
  return hotelname_.Get();
}
inline void Input_HotelFilters::set_hotelname(const std::string& value) {
  
  hotelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.hotelName)
}
inline void Input_HotelFilters::set_hotelname(std::string&& value) {
  
  hotelname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.hotelName)
}
inline void Input_HotelFilters::set_hotelname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.hotelName)
}
inline void Input_HotelFilters::set_hotelname(const char* value,
    size_t size) {
  
  hotelname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.hotelName)
}
inline std::string* Input_HotelFilters::mutable_hotelname() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.hotelName)
  return hotelname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_hotelname() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.hotelName)
  
  return hotelname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_hotelname(std::string* hotelname) {
  if (hotelname != nullptr) {
    
  } else {
    
  }
  hotelname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotelname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.hotelName)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_hotelname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.hotelName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hotelname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_hotelname(
    std::string* hotelname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hotelname != nullptr) {
    
  } else {
    
  }
  hotelname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hotelname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.hotelName)
}

// int32 builtYear = 12;
inline void Input_HotelFilters::clear_builtyear() {
  builtyear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::builtyear() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.builtYear)
  return builtyear_;
}
inline void Input_HotelFilters::set_builtyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  builtyear_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.builtYear)
}

// int32 renovationYear = 13;
inline void Input_HotelFilters::clear_renovationyear() {
  renovationyear_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::renovationyear() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.renovationYear)
  return renovationyear_;
}
inline void Input_HotelFilters::set_renovationyear(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  renovationyear_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.renovationYear)
}

// int32 floors = 14;
inline void Input_HotelFilters::clear_floors() {
  floors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::floors() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.floors)
  return floors_;
}
inline void Input_HotelFilters::set_floors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  floors_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.floors)
}

// int32 noOfRooms = 15;
inline void Input_HotelFilters::clear_noofrooms() {
  noofrooms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::noofrooms() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.noOfRooms)
  return noofrooms_;
}
inline void Input_HotelFilters::set_noofrooms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  noofrooms_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.noOfRooms)
}

// int32 fireSafety = 16;
inline void Input_HotelFilters::clear_firesafety() {
  firesafety_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_HotelFilters::firesafety() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.fireSafety)
  return firesafety_;
}
inline void Input_HotelFilters::set_firesafety(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  firesafety_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.fireSafety)
}

// string lastUpdated = 17;
inline void Input_HotelFilters::clear_lastupdated() {
  lastupdated_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input_HotelFilters::lastupdated() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.HotelFilters.lastUpdated)
  return lastupdated_.Get();
}
inline void Input_HotelFilters::set_lastupdated(const std::string& value) {
  
  lastupdated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.HotelFilters.lastUpdated)
}
inline void Input_HotelFilters::set_lastupdated(std::string&& value) {
  
  lastupdated_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.HotelFilters.lastUpdated)
}
inline void Input_HotelFilters::set_lastupdated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastupdated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.HotelFilters.lastUpdated)
}
inline void Input_HotelFilters::set_lastupdated(const char* value,
    size_t size) {
  
  lastupdated_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.HotelFilters.lastUpdated)
}
inline std::string* Input_HotelFilters::mutable_lastupdated() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.HotelFilters.lastUpdated)
  return lastupdated_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input_HotelFilters::release_lastupdated() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.HotelFilters.lastUpdated)
  
  return lastupdated_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input_HotelFilters::set_allocated_lastupdated(std::string* lastupdated) {
  if (lastupdated != nullptr) {
    
  } else {
    
  }
  lastupdated_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastupdated,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.HotelFilters.lastUpdated)
}
inline std::string* Input_HotelFilters::unsafe_arena_release_lastupdated() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.HotelFilters.lastUpdated)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return lastupdated_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input_HotelFilters::unsafe_arena_set_allocated_lastupdated(
    std::string* lastupdated) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (lastupdated != nullptr) {
    
  } else {
    
  }
  lastupdated_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lastupdated, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.HotelFilters.lastUpdated)
}

// -------------------------------------------------------------------

// Input_AdditionalFilters

// -------------------------------------------------------------------

// Input_SearchPeriodCriteria

// int32 travelFrom = 1;
inline void Input_SearchPeriodCriteria::clear_travelfrom() {
  travelfrom_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_SearchPeriodCriteria::travelfrom() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.SearchPeriodCriteria.travelFrom)
  return travelfrom_;
}
inline void Input_SearchPeriodCriteria::set_travelfrom(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  travelfrom_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.SearchPeriodCriteria.travelFrom)
}

// int32 travelTo = 2;
inline void Input_SearchPeriodCriteria::clear_travelto() {
  travelto_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_SearchPeriodCriteria::travelto() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.SearchPeriodCriteria.travelTo)
  return travelto_;
}
inline void Input_SearchPeriodCriteria::set_travelto(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  travelto_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.SearchPeriodCriteria.travelTo)
}

// int32 bookingDateTime = 3;
inline void Input_SearchPeriodCriteria::clear_bookingdatetime() {
  bookingdatetime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input_SearchPeriodCriteria::bookingdatetime() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.SearchPeriodCriteria.bookingDateTime)
  return bookingdatetime_;
}
inline void Input_SearchPeriodCriteria::set_bookingdatetime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bookingdatetime_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.SearchPeriodCriteria.bookingDateTime)
}

// -------------------------------------------------------------------

// Input

// string psfilter = 1;
inline void Input::clear_psfilter() {
  psfilter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::psfilter() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.psfilter)
  return psfilter_.Get();
}
inline void Input::set_psfilter(const std::string& value) {
  
  psfilter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.psfilter)
}
inline void Input::set_psfilter(std::string&& value) {
  
  psfilter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.psfilter)
}
inline void Input::set_psfilter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psfilter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.psfilter)
}
inline void Input::set_psfilter(const char* value,
    size_t size) {
  
  psfilter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.psfilter)
}
inline std::string* Input::mutable_psfilter() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.psfilter)
  return psfilter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_psfilter() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.psfilter)
  
  return psfilter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_psfilter(std::string* psfilter) {
  if (psfilter != nullptr) {
    
  } else {
    
  }
  psfilter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psfilter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.psfilter)
}
inline std::string* Input::unsafe_arena_release_psfilter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.psfilter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return psfilter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_psfilter(
    std::string* psfilter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (psfilter != nullptr) {
    
  } else {
    
  }
  psfilter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      psfilter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.psfilter)
}

// int32 customerId = 2;
inline void Input::clear_customerid() {
  customerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::customerid() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.customerId)
  return customerid_;
}
inline void Input::set_customerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  customerid_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.customerId)
}

// string environment = 3;
inline void Input::clear_environment() {
  environment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::environment() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.environment)
  return environment_.Get();
}
inline void Input::set_environment(const std::string& value) {
  
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.environment)
}
inline void Input::set_environment(std::string&& value) {
  
  environment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.environment)
}
inline void Input::set_environment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.environment)
}
inline void Input::set_environment(const char* value,
    size_t size) {
  
  environment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.environment)
}
inline std::string* Input::mutable_environment() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.environment)
  return environment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_environment() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.environment)
  
  return environment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_environment(std::string* environment) {
  if (environment != nullptr) {
    
  } else {
    
  }
  environment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.environment)
}
inline std::string* Input::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.environment)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return environment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_environment(
    std::string* environment) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (environment != nullptr) {
    
  } else {
    
  }
  environment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      environment, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.environment)
}

// int32 requestSource = 4;
inline void Input::clear_requestsource() {
  requestsource_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Input::requestsource() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.requestSource)
  return requestsource_;
}
inline void Input::set_requestsource(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  requestsource_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.requestSource)
}

// string exceptRestrictions = 5;
inline void Input::clear_exceptrestrictions() {
  exceptrestrictions_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::exceptrestrictions() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.exceptRestrictions)
  return exceptrestrictions_.Get();
}
inline void Input::set_exceptrestrictions(const std::string& value) {
  
  exceptrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.exceptRestrictions)
}
inline void Input::set_exceptrestrictions(std::string&& value) {
  
  exceptrestrictions_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.exceptRestrictions)
}
inline void Input::set_exceptrestrictions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  exceptrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.exceptRestrictions)
}
inline void Input::set_exceptrestrictions(const char* value,
    size_t size) {
  
  exceptrestrictions_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.exceptRestrictions)
}
inline std::string* Input::mutable_exceptrestrictions() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.exceptRestrictions)
  return exceptrestrictions_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_exceptrestrictions() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.exceptRestrictions)
  
  return exceptrestrictions_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_exceptrestrictions(std::string* exceptrestrictions) {
  if (exceptrestrictions != nullptr) {
    
  } else {
    
  }
  exceptrestrictions_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exceptrestrictions,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.exceptRestrictions)
}
inline std::string* Input::unsafe_arena_release_exceptrestrictions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.exceptRestrictions)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return exceptrestrictions_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_exceptrestrictions(
    std::string* exceptrestrictions) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (exceptrestrictions != nullptr) {
    
  } else {
    
  }
  exceptrestrictions_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exceptrestrictions, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.exceptRestrictions)
}

// bool passengerNationalityOrResidenceProvided = 6;
inline void Input::clear_passengernationalityorresidenceprovided() {
  passengernationalityorresidenceprovided_ = false;
}
inline bool Input::passengernationalityorresidenceprovided() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.passengerNationalityOrResidenceProvided)
  return passengernationalityorresidenceprovided_;
}
inline void Input::set_passengernationalityorresidenceprovided(bool value) {
  
  passengernationalityorresidenceprovided_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.passengerNationalityOrResidenceProvided)
}

// string hotelIds = 7;
inline void Input::clear_hotelids() {
  hotelids_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::hotelids() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.hotelIds)
  return hotelids_.Get();
}
inline void Input::set_hotelids(const std::string& value) {
  
  hotelids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.hotelIds)
}
inline void Input::set_hotelids(std::string&& value) {
  
  hotelids_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.hotelIds)
}
inline void Input::set_hotelids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hotelids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.hotelIds)
}
inline void Input::set_hotelids(const char* value,
    size_t size) {
  
  hotelids_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.hotelIds)
}
inline std::string* Input::mutable_hotelids() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.hotelIds)
  return hotelids_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_hotelids() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.hotelIds)
  
  return hotelids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_hotelids(std::string* hotelids) {
  if (hotelids != nullptr) {
    
  } else {
    
  }
  hotelids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotelids,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.hotelIds)
}
inline std::string* Input::unsafe_arena_release_hotelids() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.hotelIds)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hotelids_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_hotelids(
    std::string* hotelids) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hotelids != nullptr) {
    
  } else {
    
  }
  hotelids_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hotelids, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.hotelIds)
}

// string city = 8;
inline void Input::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::city() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.city)
  return city_.Get();
}
inline void Input::set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.city)
}
inline void Input::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.city)
}
inline void Input::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.city)
}
inline void Input::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.city)
}
inline std::string* Input::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.city)
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_city() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.city)
  
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.city)
}
inline std::string* Input::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.city)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.city)
}

// string country = 9;
inline void Input::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::country() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.country)
  return country_.Get();
}
inline void Input::set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.country)
}
inline void Input::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.country)
}
inline void Input::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.country)
}
inline void Input::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.country)
}
inline std::string* Input::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.country)
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_country() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.country)
  
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.country)
}
inline std::string* Input::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.country)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.country)
}

// string bookingChannelsWithAutoMapping = 10;
inline void Input::clear_bookingchannelswithautomapping() {
  bookingchannelswithautomapping_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::bookingchannelswithautomapping() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.bookingChannelsWithAutoMapping)
  return bookingchannelswithautomapping_.Get();
}
inline void Input::set_bookingchannelswithautomapping(const std::string& value) {
  
  bookingchannelswithautomapping_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.bookingChannelsWithAutoMapping)
}
inline void Input::set_bookingchannelswithautomapping(std::string&& value) {
  
  bookingchannelswithautomapping_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.bookingChannelsWithAutoMapping)
}
inline void Input::set_bookingchannelswithautomapping(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bookingchannelswithautomapping_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.bookingChannelsWithAutoMapping)
}
inline void Input::set_bookingchannelswithautomapping(const char* value,
    size_t size) {
  
  bookingchannelswithautomapping_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.bookingChannelsWithAutoMapping)
}
inline std::string* Input::mutable_bookingchannelswithautomapping() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.bookingChannelsWithAutoMapping)
  return bookingchannelswithautomapping_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_bookingchannelswithautomapping() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.bookingChannelsWithAutoMapping)
  
  return bookingchannelswithautomapping_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_bookingchannelswithautomapping(std::string* bookingchannelswithautomapping) {
  if (bookingchannelswithautomapping != nullptr) {
    
  } else {
    
  }
  bookingchannelswithautomapping_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookingchannelswithautomapping,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.bookingChannelsWithAutoMapping)
}
inline std::string* Input::unsafe_arena_release_bookingchannelswithautomapping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.bookingChannelsWithAutoMapping)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return bookingchannelswithautomapping_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_bookingchannelswithautomapping(
    std::string* bookingchannelswithautomapping) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (bookingchannelswithautomapping != nullptr) {
    
  } else {
    
  }
  bookingchannelswithautomapping_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bookingchannelswithautomapping, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.bookingChannelsWithAutoMapping)
}

// string bookingChannelTypes = 11;
inline void Input::clear_bookingchanneltypes() {
  bookingchanneltypes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::bookingchanneltypes() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.bookingChannelTypes)
  return bookingchanneltypes_.Get();
}
inline void Input::set_bookingchanneltypes(const std::string& value) {
  
  bookingchanneltypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.bookingChannelTypes)
}
inline void Input::set_bookingchanneltypes(std::string&& value) {
  
  bookingchanneltypes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.bookingChannelTypes)
}
inline void Input::set_bookingchanneltypes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bookingchanneltypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.bookingChannelTypes)
}
inline void Input::set_bookingchanneltypes(const char* value,
    size_t size) {
  
  bookingchanneltypes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.bookingChannelTypes)
}
inline std::string* Input::mutable_bookingchanneltypes() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.bookingChannelTypes)
  return bookingchanneltypes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_bookingchanneltypes() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.bookingChannelTypes)
  
  return bookingchanneltypes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_bookingchanneltypes(std::string* bookingchanneltypes) {
  if (bookingchanneltypes != nullptr) {
    
  } else {
    
  }
  bookingchanneltypes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bookingchanneltypes,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.bookingChannelTypes)
}
inline std::string* Input::unsafe_arena_release_bookingchanneltypes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.bookingChannelTypes)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return bookingchanneltypes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_bookingchanneltypes(
    std::string* bookingchanneltypes) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (bookingchanneltypes != nullptr) {
    
  } else {
    
  }
  bookingchanneltypes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bookingchanneltypes, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.bookingChannelTypes)
}

// string excludedBookingchannel = 12;
inline void Input::clear_excludedbookingchannel() {
  excludedbookingchannel_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Input::excludedbookingchannel() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.excludedBookingchannel)
  return excludedbookingchannel_.Get();
}
inline void Input::set_excludedbookingchannel(const std::string& value) {
  
  excludedbookingchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:dotw.proto.Input.excludedBookingchannel)
}
inline void Input::set_excludedbookingchannel(std::string&& value) {
  
  excludedbookingchannel_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:dotw.proto.Input.excludedBookingchannel)
}
inline void Input::set_excludedbookingchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  excludedbookingchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:dotw.proto.Input.excludedBookingchannel)
}
inline void Input::set_excludedbookingchannel(const char* value,
    size_t size) {
  
  excludedbookingchannel_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:dotw.proto.Input.excludedBookingchannel)
}
inline std::string* Input::mutable_excludedbookingchannel() {
  
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.excludedBookingchannel)
  return excludedbookingchannel_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Input::release_excludedbookingchannel() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.excludedBookingchannel)
  
  return excludedbookingchannel_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Input::set_allocated_excludedbookingchannel(std::string* excludedbookingchannel) {
  if (excludedbookingchannel != nullptr) {
    
  } else {
    
  }
  excludedbookingchannel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), excludedbookingchannel,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.excludedBookingchannel)
}
inline std::string* Input::unsafe_arena_release_excludedbookingchannel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.excludedBookingchannel)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return excludedbookingchannel_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Input::unsafe_arena_set_allocated_excludedbookingchannel(
    std::string* excludedbookingchannel) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (excludedbookingchannel != nullptr) {
    
  } else {
    
  }
  excludedbookingchannel_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      excludedbookingchannel, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dotw.proto.Input.excludedBookingchannel)
}

// bool activeForRoomCategories = 13;
inline void Input::clear_activeforroomcategories() {
  activeforroomcategories_ = false;
}
inline bool Input::activeforroomcategories() const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.activeForRoomCategories)
  return activeforroomcategories_;
}
inline void Input::set_activeforroomcategories(bool value) {
  
  activeforroomcategories_ = value;
  // @@protoc_insertion_point(field_set:dotw.proto.Input.activeForRoomCategories)
}

// repeated .dotw.proto.Input.RoomOccupancy roomOcupancy = 14;
inline int Input::roomocupancy_size() const {
  return roomocupancy_.size();
}
inline void Input::clear_roomocupancy() {
  roomocupancy_.Clear();
}
inline ::dotw::proto::Input_RoomOccupancy* Input::mutable_roomocupancy(int index) {
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.roomOcupancy)
  return roomocupancy_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomOccupancy >*
Input::mutable_roomocupancy() {
  // @@protoc_insertion_point(field_mutable_list:dotw.proto.Input.roomOcupancy)
  return &roomocupancy_;
}
inline const ::dotw::proto::Input_RoomOccupancy& Input::roomocupancy(int index) const {
  // @@protoc_insertion_point(field_get:dotw.proto.Input.roomOcupancy)
  return roomocupancy_.Get(index);
}
inline ::dotw::proto::Input_RoomOccupancy* Input::add_roomocupancy() {
  // @@protoc_insertion_point(field_add:dotw.proto.Input.roomOcupancy)
  return roomocupancy_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dotw::proto::Input_RoomOccupancy >&
Input::roomocupancy() const {
  // @@protoc_insertion_point(field_list:dotw.proto.Input.roomOcupancy)
  return roomocupancy_;
}

// .dotw.proto.Input.HotelFilters hotelFilters = 15;
inline bool Input::has_hotelfilters() const {
  return this != internal_default_instance() && hotelfilters_ != nullptr;
}
inline void Input::clear_hotelfilters() {
  if (GetArenaNoVirtual() == nullptr && hotelfilters_ != nullptr) {
    delete hotelfilters_;
  }
  hotelfilters_ = nullptr;
}
inline const ::dotw::proto::Input_HotelFilters& Input::hotelfilters() const {
  const ::dotw::proto::Input_HotelFilters* p = hotelfilters_;
  // @@protoc_insertion_point(field_get:dotw.proto.Input.hotelFilters)
  return p != nullptr ? *p : *reinterpret_cast<const ::dotw::proto::Input_HotelFilters*>(
      &::dotw::proto::_Input_HotelFilters_default_instance_);
}
inline ::dotw::proto::Input_HotelFilters* Input::release_hotelfilters() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.hotelFilters)
  
  ::dotw::proto::Input_HotelFilters* temp = hotelfilters_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  hotelfilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_HotelFilters* Input::unsafe_arena_release_hotelfilters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.hotelFilters)
  
  ::dotw::proto::Input_HotelFilters* temp = hotelfilters_;
  hotelfilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_HotelFilters* Input::mutable_hotelfilters() {
  
  if (hotelfilters_ == nullptr) {
    auto* p = CreateMaybeMessage<::dotw::proto::Input_HotelFilters>(GetArenaNoVirtual());
    hotelfilters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.hotelFilters)
  return hotelfilters_;
}
inline void Input::set_allocated_hotelfilters(::dotw::proto::Input_HotelFilters* hotelfilters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hotelfilters_;
  }
  if (hotelfilters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hotelfilters);
    if (message_arena != submessage_arena) {
      hotelfilters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hotelfilters, submessage_arena);
    }
    
  } else {
    
  }
  hotelfilters_ = hotelfilters;
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.hotelFilters)
}

// .dotw.proto.Input.RoomTypeFilters roomTypeFilters = 16;
inline bool Input::has_roomtypefilters() const {
  return this != internal_default_instance() && roomtypefilters_ != nullptr;
}
inline void Input::clear_roomtypefilters() {
  if (GetArenaNoVirtual() == nullptr && roomtypefilters_ != nullptr) {
    delete roomtypefilters_;
  }
  roomtypefilters_ = nullptr;
}
inline const ::dotw::proto::Input_RoomTypeFilters& Input::roomtypefilters() const {
  const ::dotw::proto::Input_RoomTypeFilters* p = roomtypefilters_;
  // @@protoc_insertion_point(field_get:dotw.proto.Input.roomTypeFilters)
  return p != nullptr ? *p : *reinterpret_cast<const ::dotw::proto::Input_RoomTypeFilters*>(
      &::dotw::proto::_Input_RoomTypeFilters_default_instance_);
}
inline ::dotw::proto::Input_RoomTypeFilters* Input::release_roomtypefilters() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.roomTypeFilters)
  
  ::dotw::proto::Input_RoomTypeFilters* temp = roomtypefilters_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  roomtypefilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_RoomTypeFilters* Input::unsafe_arena_release_roomtypefilters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.roomTypeFilters)
  
  ::dotw::proto::Input_RoomTypeFilters* temp = roomtypefilters_;
  roomtypefilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_RoomTypeFilters* Input::mutable_roomtypefilters() {
  
  if (roomtypefilters_ == nullptr) {
    auto* p = CreateMaybeMessage<::dotw::proto::Input_RoomTypeFilters>(GetArenaNoVirtual());
    roomtypefilters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.roomTypeFilters)
  return roomtypefilters_;
}
inline void Input::set_allocated_roomtypefilters(::dotw::proto::Input_RoomTypeFilters* roomtypefilters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete roomtypefilters_;
  }
  if (roomtypefilters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(roomtypefilters);
    if (message_arena != submessage_arena) {
      roomtypefilters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roomtypefilters, submessage_arena);
    }
    
  } else {
    
  }
  roomtypefilters_ = roomtypefilters;
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.roomTypeFilters)
}

// .dotw.proto.Input.AdditionalFilters additionalFilters = 17;
inline bool Input::has_additionalfilters() const {
  return this != internal_default_instance() && additionalfilters_ != nullptr;
}
inline void Input::clear_additionalfilters() {
  if (GetArenaNoVirtual() == nullptr && additionalfilters_ != nullptr) {
    delete additionalfilters_;
  }
  additionalfilters_ = nullptr;
}
inline const ::dotw::proto::Input_AdditionalFilters& Input::additionalfilters() const {
  const ::dotw::proto::Input_AdditionalFilters* p = additionalfilters_;
  // @@protoc_insertion_point(field_get:dotw.proto.Input.additionalFilters)
  return p != nullptr ? *p : *reinterpret_cast<const ::dotw::proto::Input_AdditionalFilters*>(
      &::dotw::proto::_Input_AdditionalFilters_default_instance_);
}
inline ::dotw::proto::Input_AdditionalFilters* Input::release_additionalfilters() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.additionalFilters)
  
  ::dotw::proto::Input_AdditionalFilters* temp = additionalfilters_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  additionalfilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_AdditionalFilters* Input::unsafe_arena_release_additionalfilters() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.additionalFilters)
  
  ::dotw::proto::Input_AdditionalFilters* temp = additionalfilters_;
  additionalfilters_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_AdditionalFilters* Input::mutable_additionalfilters() {
  
  if (additionalfilters_ == nullptr) {
    auto* p = CreateMaybeMessage<::dotw::proto::Input_AdditionalFilters>(GetArenaNoVirtual());
    additionalfilters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.additionalFilters)
  return additionalfilters_;
}
inline void Input::set_allocated_additionalfilters(::dotw::proto::Input_AdditionalFilters* additionalfilters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete additionalfilters_;
  }
  if (additionalfilters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(additionalfilters);
    if (message_arena != submessage_arena) {
      additionalfilters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additionalfilters, submessage_arena);
    }
    
  } else {
    
  }
  additionalfilters_ = additionalfilters;
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.additionalFilters)
}

// .dotw.proto.Input.SearchPeriodCriteria searchPeriodCriteria = 18;
inline bool Input::has_searchperiodcriteria() const {
  return this != internal_default_instance() && searchperiodcriteria_ != nullptr;
}
inline void Input::clear_searchperiodcriteria() {
  if (GetArenaNoVirtual() == nullptr && searchperiodcriteria_ != nullptr) {
    delete searchperiodcriteria_;
  }
  searchperiodcriteria_ = nullptr;
}
inline const ::dotw::proto::Input_SearchPeriodCriteria& Input::searchperiodcriteria() const {
  const ::dotw::proto::Input_SearchPeriodCriteria* p = searchperiodcriteria_;
  // @@protoc_insertion_point(field_get:dotw.proto.Input.searchPeriodCriteria)
  return p != nullptr ? *p : *reinterpret_cast<const ::dotw::proto::Input_SearchPeriodCriteria*>(
      &::dotw::proto::_Input_SearchPeriodCriteria_default_instance_);
}
inline ::dotw::proto::Input_SearchPeriodCriteria* Input::release_searchperiodcriteria() {
  // @@protoc_insertion_point(field_release:dotw.proto.Input.searchPeriodCriteria)
  
  ::dotw::proto::Input_SearchPeriodCriteria* temp = searchperiodcriteria_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  searchperiodcriteria_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_SearchPeriodCriteria* Input::unsafe_arena_release_searchperiodcriteria() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dotw.proto.Input.searchPeriodCriteria)
  
  ::dotw::proto::Input_SearchPeriodCriteria* temp = searchperiodcriteria_;
  searchperiodcriteria_ = nullptr;
  return temp;
}
inline ::dotw::proto::Input_SearchPeriodCriteria* Input::mutable_searchperiodcriteria() {
  
  if (searchperiodcriteria_ == nullptr) {
    auto* p = CreateMaybeMessage<::dotw::proto::Input_SearchPeriodCriteria>(GetArenaNoVirtual());
    searchperiodcriteria_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dotw.proto.Input.searchPeriodCriteria)
  return searchperiodcriteria_;
}
inline void Input::set_allocated_searchperiodcriteria(::dotw::proto::Input_SearchPeriodCriteria* searchperiodcriteria) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete searchperiodcriteria_;
  }
  if (searchperiodcriteria) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(searchperiodcriteria);
    if (message_arena != submessage_arena) {
      searchperiodcriteria = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchperiodcriteria, submessage_arena);
    }
    
  } else {
    
  }
  searchperiodcriteria_ = searchperiodcriteria;
  // @@protoc_insertion_point(field_set_allocated:dotw.proto.Input.searchPeriodCriteria)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace dotw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dotw_5fInput_2eproto
